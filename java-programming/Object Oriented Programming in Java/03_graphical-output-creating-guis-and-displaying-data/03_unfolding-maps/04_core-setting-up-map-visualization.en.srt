1
00:00:00,000 --> 00:00:03,529
[MUSIC]

2
00:00:03,529 --> 00:00:05,717
So now we're ready to
lay the foundation for

3
00:00:05,717 --> 00:00:09,540
the specific graphical application
that you're doing for the project.

4
00:00:09,540 --> 00:00:13,480
And so remember that what we'll be
doing here is placing earthquake

5
00:00:13,480 --> 00:00:15,160
data around the world.

6
00:00:15,160 --> 00:00:17,250
By the end of this sequence of videos,

7
00:00:17,250 --> 00:00:21,570
you'll be able to place markers on a map
of the world that you're displaying, and

8
00:00:21,570 --> 00:00:24,670
format those markers in
whichever way you choose.

9
00:00:24,670 --> 00:00:27,450
Now the way that you'll be doing
that is by really delving deeply

10
00:00:27,450 --> 00:00:31,680
into the documentation for Java, for
Processing, for Unfolding Maps, and

11
00:00:31,680 --> 00:00:35,610
really learning how to become comfortable
using other people's code and

12
00:00:35,610 --> 00:00:38,670
their interfaces in
developing your own project.

13
00:00:38,670 --> 00:00:41,470
So all of this is in
the service of the really cool

14
00:00:41,470 --> 00:00:44,250
project that we hope your
excited about diving into.

15
00:00:44,250 --> 00:00:48,060
So let's start by thinking about
the map that we want to build and

16
00:00:48,060 --> 00:00:50,760
the information that we
want to lay over top of it.

17
00:00:50,760 --> 00:00:55,100
And if you think back to how Christine
introduced the ideas behind objects and

18
00:00:55,100 --> 00:01:00,175
classes, we really want to think about our
map as representing real world data and

19
00:01:00,175 --> 00:01:06,025
modelling that real world data with
the Java constructs that we use.

20
00:01:06,025 --> 00:01:09,135
So some of those real world objects
that we care about include things like

21
00:01:09,135 --> 00:01:11,395
location and geographical information, and

22
00:01:11,395 --> 00:01:14,655
then those points of interest that
we want to highlight using markers.

23
00:01:14,655 --> 00:01:17,455
In our case,
those points of interest are earthquakes.

24
00:01:17,455 --> 00:01:23,330
So let's think about how we implement some
of this in Java, and we've got the two

25
00:01:23,330 --> 00:01:28,720
faces the project being setting up the map
and then adding the content to that map.

26
00:01:28,720 --> 00:01:32,980
So, thinking back to our graphical
applications from the previous lesson,

27
00:01:32,980 --> 00:01:38,180
we know that the PApplet class
lets us display data visually.

28
00:01:38,180 --> 00:01:40,820
And so,
when we want to customize that display,

29
00:01:40,820 --> 00:01:44,000
we can extend the data type PApplet.

30
00:01:44,000 --> 00:01:49,920
And so our skeleton code for this new Java
class would have the name of the class,

31
00:01:49,920 --> 00:01:54,530
and just a reminder that the class
name needs to be the name

32
00:01:54,530 --> 00:01:57,403
of the file that we're
saving this code in.

33
00:01:57,403 --> 00:02:01,490
So our file name would be
EarthquakeCityMap.java.

34
00:02:01,490 --> 00:02:02,940
Now in this class,

35
00:02:02,940 --> 00:02:07,690
what we need to define in order to
specify how we're customizing the output

36
00:02:07,690 --> 00:02:12,600
are the two special methods that we have,
the setup method and the draw method.

37
00:02:12,600 --> 00:02:14,560
Notice that,
right now in the skeleton code,

38
00:02:14,560 --> 00:02:20,630
we also have declared a private instance
variable that we'll be referring to,

39
00:02:20,630 --> 00:02:23,240
and it's a variable of type UnfoldingMap.

40
00:02:23,240 --> 00:02:28,000
And so let's see how we fill some of this
skeleton code and what that all means.

41
00:02:28,000 --> 00:02:31,350
As we're getting more comfortable with
this code, we want to trace through it and

42
00:02:31,350 --> 00:02:32,820
see what the methods are doing and

43
00:02:32,820 --> 00:02:36,520
why they are placed in
the code where they're placed.

44
00:02:36,520 --> 00:02:40,380
So take a moment, please, and
see which of these methods you recognize

45
00:02:40,380 --> 00:02:43,471
from the previous work that we've done,
and which one seem new.

46
00:02:45,010 --> 00:02:48,370
Okay, so let's start with the familiar
methods, and you'll notice that some of

47
00:02:48,370 --> 00:02:52,460
these methods we used before when we
were building just a simple graphical

48
00:02:52,460 --> 00:02:56,710
application by extending PApplet
before from the processing library.

49
00:02:56,710 --> 00:03:01,120
And for example, the size method
that we're using here in setup lets

50
00:03:01,120 --> 00:03:04,410
us specify the dimensions of
the canvas that we're displaying.

51
00:03:04,410 --> 00:03:08,190
And the background method in
the draw method that we've got here,

52
00:03:08,190 --> 00:03:11,670
let's just specify the background
color of the canvas.

53
00:03:11,670 --> 00:03:14,110
So those methods we're familiar with.

54
00:03:14,110 --> 00:03:17,270
Now in order to implement the project
that we care about that has

55
00:03:17,270 --> 00:03:21,520
quite a much more sophisticated output
than just some colors on a canvas,

56
00:03:21,520 --> 00:03:24,600
what we're using is
the UnfoldingMaps library.

57
00:03:24,600 --> 00:03:29,610
And that library gives us access to
a whole array of new data types.

58
00:03:29,610 --> 00:03:32,530
And one of those data types that's very
important that's sort of at the crux

59
00:03:32,530 --> 00:03:35,650
of what we'll be doing is
the map object itself.

60
00:03:35,650 --> 00:03:38,350
So that data type is called UnfoldingMap,
and

61
00:03:38,350 --> 00:03:42,610
you see that we're using the constructor
to build an UnfoldingMap type object

62
00:03:42,610 --> 00:03:44,770
in the second line of the setup method.

63
00:03:44,770 --> 00:03:48,180
So, as we're building that object,
we need to tell Java

64
00:03:48,180 --> 00:03:51,630
some parameter information about
the object that we want to create.

65
00:03:51,630 --> 00:03:55,720
So some of those parameters indicate the
size of the map that we want to display.

66
00:03:55,720 --> 00:03:59,480
And so we have the height and
the width dimensions of the unfolding map.

67
00:03:59,480 --> 00:04:02,390
But that map is going to be
associated with a canvas.

68
00:04:02,390 --> 00:04:09,150
And so we need to tell the display
where on that canvas to locate the map,

69
00:04:09,150 --> 00:04:13,370
and so we need to also give
the coordinates of the map in the canvas.

70
00:04:13,370 --> 00:04:15,940
Now notice in the particular example
that we're working on right now,

71
00:04:15,940 --> 00:04:19,750
the map is much smaller than the canvas,
and there's a reason for that.

72
00:04:19,750 --> 00:04:22,810
Remember that in the project for
this week, what we'll be doing is putting

73
00:04:22,810 --> 00:04:27,000
the map and a key for
that map together on the same canvas.

74
00:04:27,000 --> 00:04:30,040
And so we can't have the map
taking up the entire space.

75
00:04:30,040 --> 00:04:33,560
The other piece of the puzzle that we
needed to specify when we're building

76
00:04:33,560 --> 00:04:38,280
a new unfolding map object is where
that unfolding map object learns

77
00:04:38,280 --> 00:04:43,170
about the map features, in particular,
the boundaries of continents for

78
00:04:43,170 --> 00:04:47,580
example, or countries, or any road data
that we want to display in our map.

79
00:04:47,580 --> 00:04:52,760
And in order to do that, Unfolding Maps
has this infrastructure of map providers,

80
00:04:52,760 --> 00:04:55,980
and for now we could just use this

81
00:04:55,980 --> 00:05:00,080
long constructor as a bit of a magical
incantation with all of its parameters.

82
00:05:00,080 --> 00:05:04,720
And we know that if we want to display a
map, that last parameter needs to be a new

83
00:05:04,720 --> 00:05:08,340
map provider, and we're choosing
to use the Google Map provider.

84
00:05:08,340 --> 00:05:11,250
So one of the things that you're working
with in some of the end-of-module

85
00:05:11,250 --> 00:05:14,540
assessments is playing with
the different map providers and

86
00:05:14,540 --> 00:05:16,700
seeing what the effects
of that would look like.

87
00:05:18,000 --> 00:05:20,620
Now as we continue setting up our map,

88
00:05:20,620 --> 00:05:23,750
we are modifying the map
object that we just created.

89
00:05:23,750 --> 00:05:27,045
We're calling a method on it
that says zoom to level, and

90
00:05:27,045 --> 00:05:28,490
we're specifying the level two.

91
00:05:29,510 --> 00:05:33,410
We can choose the default zoom
level of the map that we're using.

92
00:05:33,410 --> 00:05:36,230
Now for those of you who are working
through this course offline,

93
00:05:36,230 --> 00:05:39,390
you'll notice that we've put
in some functionality for you.

94
00:05:39,390 --> 00:05:43,953
We've put in some options for you that
let you still work and program without

95
00:05:43,953 --> 00:05:49,388
accessing the map providers online in
real time as you're running your applets.

96
00:05:49,388 --> 00:05:54,378
You will have to be a little careful
though with zoom levels, so in particular,

97
00:05:54,378 --> 00:05:58,037
the offline version of the map
only has three zoom levels.

98
00:05:58,037 --> 00:06:02,117
Now some of those methods, then,
allow us to incorporate some really cool

99
00:06:02,117 --> 00:06:06,327
functionality in our maps without having
to code it all off some scratch, and

100
00:06:06,327 --> 00:06:08,688
the MapUtils library also lets us do that.

101
00:06:08,688 --> 00:06:11,865
So the
MapUtils.createDefaultEventDispatcher

102
00:06:11,865 --> 00:06:14,816
basically sounds like magic at the moment,
but

103
00:06:14,816 --> 00:06:18,440
we'll talk more about events
later on in the course.

104
00:06:18,440 --> 00:06:23,220
And what this event dispatcher
does is it makes our map come to

105
00:06:23,220 --> 00:06:26,700
life in the sense that we can double-click
on it and change the zoom level.

106
00:06:26,700 --> 00:06:31,660
We can drag-and-drop the map, we can
zoom to different parts of the world.

107
00:06:31,660 --> 00:06:36,180
And so without us having to write up
a whole bunch of code to implement

108
00:06:36,180 --> 00:06:38,820
that functionality,
by using what other people have done,

109
00:06:38,820 --> 00:06:43,672
we can already boost
the interactivity of our application.

110
00:06:43,672 --> 00:06:49,080
We're using another method from
the map object in the draw method.

111
00:06:49,080 --> 00:06:50,960
And notice that, in the draw method,

112
00:06:50,960 --> 00:06:54,276
as soon as we've set the color,
what we've said is map.draw.

113
00:06:54,276 --> 00:06:58,050
And map.draw is actually
a very powerful method.

114
00:06:58,050 --> 00:07:02,430
In that one line, what we're saying is,
take the map object and

115
00:07:02,430 --> 00:07:09,010
anything that's associated with it, and
refresh the view of that map object.

116
00:07:09,010 --> 00:07:10,650
And what you'll see as we go ahead and

117
00:07:10,650 --> 00:07:16,130
customize our map is that instead of
drawing each one of the new pieces

118
00:07:16,130 --> 00:07:21,280
that we've added to our application
everytime we invoke the draw method,

119
00:07:21,280 --> 00:07:26,058
what we're going to do is associate each
one of those new pieces to the map object.

120
00:07:26,058 --> 00:07:30,250
And then map.draw's method
will refresh them all.

121
00:07:30,250 --> 00:07:33,420
So we've talked in a fair amount of detail
about a lot of the methods that you see

122
00:07:33,420 --> 00:07:34,360
here in this starter code.

123
00:07:34,360 --> 00:07:38,230
But there's one yet
that we haven't defined or discussed, and

124
00:07:38,230 --> 00:07:42,820
that's the addKey method, and
you get to design that method.

125
00:07:42,820 --> 00:07:46,300
That method is a private
helper method in this class

126
00:07:46,300 --> 00:07:50,610
where you will design how to interpret and
display the markers

127
00:07:50,610 --> 00:07:54,190
that indicate the magnitude of earthquakes
that you're showing on this map.

128
00:07:54,190 --> 00:08:00,190
And so the definition for this method
occurs a little bit later in this file,

129
00:08:00,190 --> 00:08:01,710
and as you look through
the starter code for

130
00:08:01,710 --> 00:08:05,300
this week's project,
make sure to trace through the code and

131
00:08:05,300 --> 00:08:10,950
find where you'll be filling in
the body of that method In this class.

132
00:08:10,950 --> 00:08:15,050
So as we trace through the code,
it's important to know what all

133
00:08:15,050 --> 00:08:17,790
the methods are doing,
not just where they come from.

134
00:08:17,790 --> 00:08:22,500
And so now that we have a sense of what
each of the methods do individually, let's

135
00:08:22,500 --> 00:08:28,090
think about what we expect to see when we
run a piece of code like this in Eclipse.

136
00:08:28,090 --> 00:08:31,921
So let's start by predicting
what you would expect to see.

137
00:08:34,997 --> 00:08:40,041
Okay, so what you probably predicted
was a canvas that has a background

138
00:08:40,041 --> 00:08:45,001
that is almost completely black and
which displays a map that doesn't

139
00:08:45,001 --> 00:08:49,650
take up the whole canvas, but
that shows up on the canvas.

140
00:08:49,650 --> 00:08:51,190
Now my question is,

141
00:08:51,190 --> 00:08:54,290
what if we wanted to display something
just a little bit different?

142
00:08:54,290 --> 00:08:58,411
For example, if we wanted this to be
our canvas, what would we need to do?

143
00:09:01,522 --> 00:09:05,618
So you probably have honed in on the
background method as what we would need to

144
00:09:05,618 --> 00:09:09,650
change if we wanted to change the
background color from almost nearly black

145
00:09:09,650 --> 00:09:11,310
to this light gray.

146
00:09:11,310 --> 00:09:14,850
And you might remember that in
the processing library documentation,

147
00:09:14,850 --> 00:09:19,070
we have the definition of the background
method and it's various parameters.

148
00:09:19,070 --> 00:09:23,740
And if we want to switch our color from
almost black to gray, what we could do is

149
00:09:23,740 --> 00:09:29,070
just pick up value for the gray
level that is much closer to white.

150
00:09:29,070 --> 00:09:33,530
So for example, if we picked a value,
say 220 or 230, then we'd

151
00:09:33,530 --> 00:09:38,500
achieve the effect of having a light gray
background like we were anticipating.

152
00:09:38,500 --> 00:09:43,440
So at this point, we've done a really
thorough job of setting up our map.

153
00:09:43,440 --> 00:09:46,790
And the next step is to add some content,
so that's what we'll do next.