1
00:00:00,000 --> 00:00:03,549
[MUSIC].

2
00:00:03,549 --> 00:00:07,757
So welcome back to this second of a
sequence of videos in which we're going to

3
00:00:07,757 --> 00:00:09,940
be building a graphical application.

4
00:00:09,940 --> 00:00:13,550
And remember our goal is to display
this beautiful beach picture and

5
00:00:13,550 --> 00:00:14,510
add a second sun.

6
00:00:14,510 --> 00:00:18,000
And that sun is going to
be a visual clock for us.

7
00:00:18,000 --> 00:00:22,500
So, if we deconstruct the application and
what we need to do.

8
00:00:22,500 --> 00:00:26,970
Basically, we need to create
some window or canvass and

9
00:00:26,970 --> 00:00:29,980
then place items unto that canvass.

10
00:00:29,980 --> 00:00:33,550
And so, where going to have a background
image and then we're going to put some

11
00:00:33,550 --> 00:00:38,330
shapes unto the image and so
we'd like a way for our canvass.

12
00:00:38,330 --> 00:00:43,670
To be able to display images and shapes,
and for us to be able to control

13
00:00:43,670 --> 00:00:49,900
the location and color and
various other properties as well.

14
00:00:49,900 --> 00:00:53,790
Let's think about how we would do that and
we'll start by thinking about controlling

15
00:00:53,790 --> 00:00:57,450
the position of elements
in our application, so

16
00:00:57,450 --> 00:01:01,180
a really convenient way of specifying
position is using coordinates.

17
00:01:01,180 --> 00:01:05,550
You probably thought about them a lot
in various math backgrounds and

18
00:01:05,550 --> 00:01:06,640
other situations.

19
00:01:06,640 --> 00:01:11,370
Maps, for example, and what we can
do is we can separate our canvas,

20
00:01:11,370 --> 00:01:15,020
the window that we're working with,
into a grid and

21
00:01:15,020 --> 00:01:20,160
we've got points on this grid
being determined by their location

22
00:01:20,160 --> 00:01:25,040
across in the x direction and
up and down in the y direction and

23
00:01:25,040 --> 00:01:29,590
so the x direction determines how
far across the picture we are and

24
00:01:29,590 --> 00:01:34,120
the y coordinate determines how
far down the picture we are.

25
00:01:34,120 --> 00:01:39,360
And so it's useful to keep in mind how
each of these variables changes as we

26
00:01:39,360 --> 00:01:40,950
walk across the picture.

27
00:01:40,950 --> 00:01:47,150
And so the 0 of the x coordinate where the
x is smallest is on the left hand side.

28
00:01:47,150 --> 00:01:51,210
And as we go towards the right,
the x value increases.

29
00:01:51,210 --> 00:01:55,030
And that's just as you would expect
from other contact, the coordinates.

30
00:01:55,030 --> 00:01:56,380
But y is a little different.

31
00:01:56,380 --> 00:01:57,750
Y is a little tricky.

32
00:01:57,750 --> 00:02:00,340
It start as 0 at the very top,
not the bottom,

33
00:02:00,340 --> 00:02:03,260
at the very top is where y is equal to 0.

34
00:02:03,260 --> 00:02:06,910
Then as we move down
the picture is how it grows.

35
00:02:06,910 --> 00:02:08,360
All right so let's practice.

36
00:02:08,360 --> 00:02:11,840
Let's take an example and
suppose we had a canvas and

37
00:02:11,840 --> 00:02:16,990
it was 200 pixels wide and
200 pixels long.

38
00:02:16,990 --> 00:02:20,230
And let's think about what
the coordinates would be

39
00:02:20,230 --> 00:02:23,980
of the center of the yellow
sun in this picture.

40
00:02:23,980 --> 00:02:29,130
Okay, so let's think about it and when
you're ball parking at these coordinates,

41
00:02:29,130 --> 00:02:32,990
what you might want to do is
think about relative position.

42
00:02:32,990 --> 00:02:35,340
So is the sun half way across the picture?

43
00:02:35,340 --> 00:02:36,910
No, it's not really, is it?

44
00:02:36,910 --> 00:02:38,790
A quarter of the way across the picture?

45
00:02:38,790 --> 00:02:41,180
Yeah, it kind of looks like
it is a quarter of the way.

46
00:02:41,180 --> 00:02:45,520
So, the center x coordinate
would be probably around 50, and

47
00:02:45,520 --> 00:02:46,960
ditto for the y coordinate.

48
00:02:46,960 --> 00:02:49,700
It's probably a quarter
of the way down as well.

49
00:02:49,700 --> 00:02:54,500
And these are just rough numbers, so
it's not exactly those, but pretty good.

50
00:02:54,500 --> 00:03:00,080
Okay, so we know how to place, how to at
least determine positions on the canvas.

51
00:03:00,080 --> 00:03:04,400
But now what we would like to do is
translate this into actual Java code and

52
00:03:04,400 --> 00:03:08,610
not just talk about abstract
drawing a grid on a canvas but

53
00:03:08,610 --> 00:03:10,320
actually coding it out.

54
00:03:10,320 --> 00:03:15,100
We are going to use processes and
processes is this amazing

55
00:03:15,100 --> 00:03:20,470
versatile library of classes and
methods and

56
00:03:20,470 --> 00:03:24,620
data types that we can use in
order develop our applications.

57
00:03:25,680 --> 00:03:30,680
The thing is though you would not want to
memorize everything that's in processing.

58
00:03:30,680 --> 00:03:35,580
What you want to do is have some sort of
index, or a way of looking things up.

59
00:03:35,580 --> 00:03:40,020
I really want to do something with the
size, I'm going to look in my processing

60
00:03:40,020 --> 00:03:44,170
index to see if there's a method to
do with the size of the canvas and

61
00:03:44,170 --> 00:03:49,510
the Javadoc documentation of
processing gives us exactly that.

62
00:03:49,510 --> 00:03:54,180
So we look up in processing and we see
that there's a class called PApplet.

63
00:03:55,290 --> 00:04:00,710
What this class does is it does all
of the hard work under the hood.

64
00:04:00,710 --> 00:04:03,970
Of bringing up a canvas,

65
00:04:03,970 --> 00:04:09,180
a little window, and then giving us
functionality for drawing in that window.

66
00:04:09,180 --> 00:04:12,780
So when we wanna go ahead and
define our application,

67
00:04:12,780 --> 00:04:15,990
the one with La Jolla Shores
in the background and the sun,

68
00:04:15,990 --> 00:04:22,210
we don't need to worry about what it means
to draw a canvas on my computer screen.

69
00:04:22,210 --> 00:04:26,180
I can leave that to the PApplet datatype,

70
00:04:26,180 --> 00:04:30,390
which is a kind of a GUI datatype,
and then just customize

71
00:04:30,390 --> 00:04:35,130
what's being displayed in that window
that's being brought up by my PApplet.

72
00:04:35,130 --> 00:04:39,650
So if we look at this code snippet,
what we see here is that our class,

73
00:04:39,650 --> 00:04:45,130
the class that we're defining,
MyPApplet extends PApplet.

74
00:04:45,130 --> 00:04:50,790
So extends is a really important keyword
and Leo is going to tell you all about

75
00:04:50,790 --> 00:04:55,020
that in next module about inheritance.

76
00:04:55,020 --> 00:04:57,340
But you don't need to
worry about that just yet.

77
00:04:57,340 --> 00:05:01,380
We're going to use this notion and
then learn about it after you've got

78
00:05:01,380 --> 00:05:06,040
some experience about with how powerful
it is for now think about extends PApplet

79
00:05:06,040 --> 00:05:10,470
as a way of telling Java that we would
like to use the core functionality

80
00:05:10,470 --> 00:05:14,150
that's available in PApplet but
then customize it a little bit.

81
00:05:14,150 --> 00:05:18,890
The people who wrote processing
developed the data type PApplet.

82
00:05:18,890 --> 00:05:22,880
They developed it with graphical
applications in mind so

83
00:05:22,880 --> 00:05:25,310
it gives us a kind of GUI.

84
00:05:25,310 --> 00:05:30,160
And what we're going to do now
with MyPApplet is customize it and

85
00:05:30,160 --> 00:05:31,710
change it up a little bit.

86
00:05:31,710 --> 00:05:36,190
But in order to use it, we have to tell
Java the thing that I'm extending,

87
00:05:36,190 --> 00:05:38,830
well it comes from the processing library.

88
00:05:38,830 --> 00:05:42,300
And so in the beginning of our
code there we have to tell Java,

89
00:05:42,300 --> 00:05:47,640
please look at the code that's
available in processing.core,

90
00:05:47,640 --> 00:05:50,060
and we're going to access
some of those data types.

91
00:05:50,060 --> 00:05:52,630
So that's what that
line up there is doing.

92
00:05:52,630 --> 00:05:57,160
But now, when we we want to build our
PApplet, what we have to do, our job,

93
00:05:57,160 --> 00:05:59,650
is to specify 2 methods.

94
00:05:59,650 --> 00:06:05,790
What we are going to need to tell Java is
first of all, how to configure the canvas.

95
00:06:05,790 --> 00:06:08,380
That's going to be in the set up method.

96
00:06:08,380 --> 00:06:12,260
Then, once we've configured the canvas
what to actually draw in there, and

97
00:06:12,260 --> 00:06:14,750
that is going to be in the draw method.

98
00:06:14,750 --> 00:06:17,720
If you think about the flow of
execution of our application

99
00:06:17,720 --> 00:06:22,020
what's going to happen is that Java
will execute the setup method once.

100
00:06:22,020 --> 00:06:23,880
As we run our application,

101
00:06:23,880 --> 00:06:28,890
the first thing that happens that
we define is the setup method.

102
00:06:28,890 --> 00:06:32,600
And then that's executed once and
then that code is never touched again.

103
00:06:32,600 --> 00:06:36,260
And then every time the canvas
is refreshed or redrawn, for

104
00:06:36,260 --> 00:06:39,670
example, if it gets
resized in the screen and

105
00:06:39,670 --> 00:06:43,410
the draw method will get executed
again and again and again.

106
00:06:43,410 --> 00:06:46,480
So that piece of code gets executed often.

107
00:06:46,480 --> 00:06:48,170
We loop through it a lot.

108
00:06:48,170 --> 00:06:54,470
So let's think about what actually happens
when we start developing this code.

109
00:06:54,470 --> 00:06:57,210
And to do that, let's do baby steps.

110
00:06:57,210 --> 00:06:59,320
And this is a useful thing
when you're testing your code,

111
00:06:59,320 --> 00:07:03,260
as well, or debugging,
is to run it very often.

112
00:07:03,260 --> 00:07:07,360
And you'll see especially when you're
debugging graphical applications.

113
00:07:07,360 --> 00:07:12,080
You'll want to stop developing code and
hit that run button in Eclipse.

114
00:07:12,080 --> 00:07:16,930
Extremely frequently because it's going
to be really the best way of making sure

115
00:07:16,930 --> 00:07:21,330
that what you think you're implementing is
actually what's showing up on a screen and

116
00:07:21,330 --> 00:07:23,300
you'll be able to catch
bugs much more quickly.

117
00:07:23,300 --> 00:07:26,900
So you want to hit that run button very,
very often.

118
00:07:26,900 --> 00:07:31,380
Okay, so if we do that even before we
put any methods in our class at all

119
00:07:31,380 --> 00:07:33,460
Let's think about what will happen.

120
00:07:33,460 --> 00:07:39,730
And here I did in eclipse offline and
I'm giving you a little screenshot of it.

121
00:07:39,730 --> 00:07:45,040
And what you'll see is that we didn't
get an error, the code compiled, and

122
00:07:45,040 --> 00:07:48,510
it did something even though
we didn't define any methods.

123
00:07:48,510 --> 00:07:51,900
And that's because we're
using the power of PApplet.

124
00:07:51,900 --> 00:07:55,620
So PApplet as a datatype
already tells Java, hey,

125
00:07:55,620 --> 00:08:00,720
I want to draw some default canvas and
then I'm just gonna wait.

126
00:08:00,720 --> 00:08:01,970
I'm gonna do nothing,

127
00:08:01,970 --> 00:08:07,590
unless the person whose extending
this class, tells me what to do.

128
00:08:07,590 --> 00:08:12,920
Okay, so by default,
the applet just displays a blank canvas.

129
00:08:12,920 --> 00:08:14,330
But we wanna do more than that.

130
00:08:14,330 --> 00:08:16,120
We wanna draw our picture.

131
00:08:16,120 --> 00:08:19,240
And so
we're going to now work on bringing in

132
00:08:19,240 --> 00:08:23,120
some content to both the setup method and
the draw method.

133
00:08:23,120 --> 00:08:24,600
Now, what content?

134
00:08:24,600 --> 00:08:27,260
Well, that content is
going to be determined

135
00:08:27,260 --> 00:08:30,840
by the methods available to
us in the processing library.

136
00:08:30,840 --> 00:08:34,150
And so it's really useful as
you're developing to have

137
00:08:34,150 --> 00:08:36,800
a browser open with the documentation.

138
00:08:36,800 --> 00:08:40,290
Open available to you and keep going
back and forth between Eclipse and

139
00:08:40,290 --> 00:08:42,830
your browser, as you are developing.

140
00:08:42,830 --> 00:08:45,490
Don't memorize these methods.

141
00:08:45,490 --> 00:08:47,760
Libraries change over time.

142
00:08:47,760 --> 00:08:51,490
Which one is most modern,
that will always change.

143
00:08:51,490 --> 00:08:56,570
All the libraries that are most useful
have really good documented code, so

144
00:08:56,570 --> 00:08:59,970
you'll be able to understand which
methods are available to you.

145
00:08:59,970 --> 00:09:03,300
Okay, so
let's think about the setup method, and

146
00:09:03,300 --> 00:09:08,470
the pieces that we want to do
at the very beginning are to.

147
00:09:08,470 --> 00:09:13,170
Set some default size to our canvas and
then get access to the background beach

148
00:09:13,170 --> 00:09:16,150
picture that's going to be
the background of our application.

149
00:09:16,150 --> 00:09:16,700
Okay, so

150
00:09:16,700 --> 00:09:20,210
we look up in the index we're processing
the documentation and oh woo-hoo!

151
00:09:20,210 --> 00:09:22,090
We have a size method.

152
00:09:22,090 --> 00:09:24,770
And that documentation
even gives us an example.

153
00:09:24,770 --> 00:09:26,460
It's sweet we're great.

154
00:09:26,460 --> 00:09:29,985
And we realize that if we type
in size open graphic 200,

155
00:09:29,985 --> 00:09:35,340
200 then what that setup method is going
to do when it executes this line of code,

156
00:09:35,340 --> 00:09:40,970
is display our canvas at the default size,
200 wide and 200 long, or high.

157
00:09:40,970 --> 00:09:44,540
All right, cool, we've done that.

158
00:09:44,540 --> 00:09:48,270
And now what we'd like to do is have
access to the background image.

159
00:09:48,270 --> 00:09:50,000
And, again,
look up in the documentation and

160
00:09:50,000 --> 00:09:53,610
see that there's a really
nice way of loading an image.

161
00:09:53,610 --> 00:09:56,400
And we could even load
an image from a URL.

162
00:09:56,400 --> 00:09:59,600
So an image might exist as a JPEG file,
for

163
00:09:59,600 --> 00:10:03,900
example, on your local machine or
it might be on a server somewhere.

164
00:10:03,900 --> 00:10:07,670
And with processing, we have a way
to going to a specified web address,

165
00:10:07,670 --> 00:10:12,390
a URL, and grabbing an image there and
bringing that into our application.

166
00:10:12,390 --> 00:10:15,360
And so in the documentation we
have an example of how to do that.

167
00:10:15,360 --> 00:10:18,950
We stick it in our code and
now we've defined out setup method.

168
00:10:19,990 --> 00:10:21,720
Whats going to happen when we run?

169
00:10:21,720 --> 00:10:22,530
So pause.

170
00:10:24,100 --> 00:10:24,670
What do you think?

171
00:10:25,690 --> 00:10:30,280
I hope that you ran this example
in eclipse and saw what happens.

172
00:10:30,280 --> 00:10:32,900
And what happens might be
a little counter intuitive.

173
00:10:32,900 --> 00:10:34,840
We still get a blank canvas.

174
00:10:36,510 --> 00:10:40,890
The reason that happens is because we've
only loaded the image into memory,

175
00:10:40,890 --> 00:10:42,740
we haven't displayed it yet.

176
00:10:42,740 --> 00:10:46,100
And so it's really useful when
you're using methods from a library,

177
00:10:46,100 --> 00:10:48,180
to read through the description.

178
00:10:48,180 --> 00:10:51,490
And if we had read through them we would
have seen that what happens when we

179
00:10:51,490 --> 00:10:55,680
execute load image is that we have
that image loaded into memory and

180
00:10:55,680 --> 00:10:57,139
it's stored in a PImage.

181
00:10:58,310 --> 00:11:03,870
Object and then we'll have access to it
later, but nothing in that documentation

182
00:11:03,870 --> 00:11:08,250
talks about displaying that object on the
canvas, and we'll have to dot that later.

183
00:11:08,250 --> 00:11:13,890
And so in the next video, we're going
to really implement the draw method

184
00:11:13,890 --> 00:11:18,380
of our PApplet, and once we do that,
we'll have our full working application.