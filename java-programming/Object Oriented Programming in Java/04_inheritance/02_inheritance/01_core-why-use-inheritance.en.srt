1
00:00:00,000 --> 00:00:04,064
[MUSIC]

2
00:00:04,064 --> 00:00:09,030
In this module we're gonna begin looking
at inheritance and polymorphism in Java.

3
00:00:09,030 --> 00:00:12,740
Inheritance and polymorphism
are incredibly power features to any other

4
00:00:12,740 --> 00:00:17,090
oriented programing language but
unlike lobes and conditionals

5
00:00:17,090 --> 00:00:20,040
you don't usually need to use inheritance
and polymorphism for your code to work.

6
00:00:20,040 --> 00:00:22,040
When you first started programming,

7
00:00:22,040 --> 00:00:24,550
you probably could have put a lot of your
code in main and gotten away with it.

8
00:00:25,750 --> 00:00:28,560
But as your code grew,
you started using methods,

9
00:00:28,560 --> 00:00:31,030
and then later started using classes.

10
00:00:31,030 --> 00:00:32,880
Likewise, as the complexity
of your project grows and

11
00:00:32,880 --> 00:00:36,540
you start working on large software
design projects, you start having to use

12
00:00:36,540 --> 00:00:39,899
inheritance and polymorphism to be able
to handle the complexity of the project.

13
00:00:41,470 --> 00:00:44,460
You've already worked with inheritance and
polymorphism to some extent

14
00:00:44,460 --> 00:00:48,610
by having used the keyword
extends in your previous modules.

15
00:00:48,610 --> 00:00:51,180
What we're going to do here is
start working in more detail

16
00:00:51,180 --> 00:00:52,270
with inheritance and polymorphism.

17
00:00:53,290 --> 00:00:58,899
The goal here for this single video is to
look at the value of inheritance and self.

18
00:01:00,672 --> 00:01:04,080
We're gonna do this by
posing a potential problem.

19
00:01:04,080 --> 00:01:08,420
Imagine you're a software
engineer at a university, and

20
00:01:08,420 --> 00:01:11,310
you've been working for
some time on a Person class.

21
00:01:12,340 --> 00:01:15,860
You've actually tested the code, it's much
longer than the code that you see here,

22
00:01:15,860 --> 00:01:17,570
and you're very happy with it.

23
00:01:17,570 --> 00:01:19,210
But your software design
team comes back to you and

24
00:01:19,210 --> 00:01:22,010
says, we really can't just
have one class anymore.

25
00:01:22,010 --> 00:01:25,520
This needs to start behaving
differently for students or faculty.

26
00:01:26,760 --> 00:01:28,400
So you think about how
are you gonna solve this, and

27
00:01:28,400 --> 00:01:30,030
there's a couple potential solutions.

28
00:01:30,030 --> 00:01:32,750
Neither of these are gonna be good
solutions, so I'm not gonna dive into too

29
00:01:32,750 --> 00:01:36,460
much detail with them, but let's talk
through what you might try to do.

30
00:01:36,460 --> 00:01:37,640
The first option is really to say, well,

31
00:01:37,640 --> 00:01:40,410
I'm gonna keep all this
in the Person class.

32
00:01:40,410 --> 00:01:43,240
And I'm just gonna have it behave
differently if you're a student or

33
00:01:43,240 --> 00:01:44,510
faculty member.

34
00:01:44,510 --> 00:01:47,620
And I'm gonna do this by having
a boolean which just says whether or

35
00:01:47,620 --> 00:01:48,330
not you're a student.

36
00:01:48,330 --> 00:01:51,110
True if you're a student,
false if you're faculty.

37
00:01:51,110 --> 00:01:54,160
I'm gonna add a constructor that
handles it this way as well.

38
00:01:54,160 --> 00:01:59,110
And then in each of my methods,
I can just do if student,

39
00:01:59,110 --> 00:02:02,700
do the code for the student,
else do the code for the faculty.

40
00:02:02,700 --> 00:02:04,900
And at this point this doesn't
seem like that bad of an idea.

41
00:02:06,230 --> 00:02:08,380
What's going to happen is your software
design team is going to come back

42
00:02:08,380 --> 00:02:12,190
to you later and say, you know we can't
have all students behave the same,

43
00:02:12,190 --> 00:02:15,610
undergrads and graduate students
are going to behave differently.

44
00:02:15,610 --> 00:02:18,570
They have different needs,
graduate students have thesis advisors,

45
00:02:18,570 --> 00:02:19,670
things like that.

46
00:02:19,670 --> 00:02:20,520
Then they come back to you and

47
00:02:20,520 --> 00:02:23,670
say well we need you to behave differently
if you're a full time student or

48
00:02:23,670 --> 00:02:25,420
you're a part time student.

49
00:02:25,420 --> 00:02:28,760
So what you'll do is you'll add now
boolean flags to say whether or

50
00:02:28,760 --> 00:02:30,200
not this is a graduate student or not and

51
00:02:30,200 --> 00:02:33,270
a boolean flag to keep track of
whether you're full time or not.

52
00:02:33,270 --> 00:02:36,830
And now your methods gonna start looking
something like if you're a student and

53
00:02:36,830 --> 00:02:41,680
you're a grad student and you're full time
and if this sounds really ugly, it is.

54
00:02:41,680 --> 00:02:44,460
In fact, this kind of ugly code
has a specific name for it.

55
00:02:44,460 --> 00:02:45,456
You may have heard of it before.

56
00:02:45,456 --> 00:02:48,810
It's called spaghetti code.

57
00:02:48,810 --> 00:02:50,920
Now I like spaghetti, but
I don't like spaghetti code.

58
00:02:53,340 --> 00:02:56,290
Spaghetti code is code that you're gonna
write, you're gonna realize how bad it is,

59
00:02:56,290 --> 00:02:58,499
you're gonna throw it away,
and you're gonna start over.

60
00:02:59,730 --> 00:03:01,800
So this solution we're not happy with.

61
00:03:01,800 --> 00:03:04,320
Let me propose another potential solution.

62
00:03:04,320 --> 00:03:08,350
Let's just take my Person class and
copy paste it into two files and

63
00:03:08,350 --> 00:03:11,450
we name one to be Student and
the other to be Faculty.

64
00:03:11,450 --> 00:03:14,530
And then within the Student class
I'm gonna change all the code

65
00:03:14,530 --> 00:03:17,440
to match the behavior of a student, and
within the Faculty I'm gonna change all

66
00:03:17,440 --> 00:03:19,090
the code to match the behavior
of a faculty member.

67
00:03:21,220 --> 00:03:23,093
At this point this seems like
a pretty reasonable solution.

68
00:03:23,093 --> 00:03:24,450
This will actually work for
a little while.

69
00:03:24,450 --> 00:03:27,720
But it's not going to work indefinitely.

70
00:03:30,210 --> 00:03:33,083
Take a few seconds to think
where it might go wrong.

71
00:03:36,453 --> 00:03:37,450
All right.

72
00:03:37,450 --> 00:03:40,820
If your answer had anything to do with
either consistency or the ability to store

73
00:03:40,820 --> 00:03:44,410
all the objects in one data structure,
you're on the right track.

74
00:03:44,410 --> 00:03:45,800
So let's talk through it in both of those.

75
00:03:47,040 --> 00:03:49,690
What's gonna happen is your design team's
gonna come back to you and they're gonna

76
00:03:49,690 --> 00:03:53,870
say at some point, you know having
a single string name isn't sufficient.

77
00:03:53,870 --> 00:03:56,080
We really need you to break this
out as first name and last name.

78
00:03:57,140 --> 00:03:59,200
And this isn't a major change,
so you go into your code,

79
00:03:59,200 --> 00:04:02,820
you start changing all the instances
of name to now work with first name and

80
00:04:02,820 --> 00:04:05,340
last name and
you fix all of the Student class.

81
00:04:05,340 --> 00:04:08,830
And then you're gonna realize, wait,
I had name in the Faculty class, too.

82
00:04:08,830 --> 00:04:12,450
And you can't just copy-paste the code
that you just changed in Student into

83
00:04:12,450 --> 00:04:13,290
Faculty.

84
00:04:13,290 --> 00:04:15,500
You're gonna have to
rewrite all the Faculty,

85
00:04:15,500 --> 00:04:18,400
do all the changes you just made
in Student to the Faculty code.

86
00:04:18,400 --> 00:04:21,180
It's gonna be tedious and
it's unnecessary.

87
00:04:21,180 --> 00:04:23,170
But more important,
what if you make a mistake?

88
00:04:23,170 --> 00:04:25,860
What if you miss a change in
Faculty that you made in Student?

89
00:04:25,860 --> 00:04:28,050
This is gonna be really
hard to keep consistent.

90
00:04:29,570 --> 00:04:30,780
The other problem with this

91
00:04:32,010 --> 00:04:35,790
is that there is probably some code
that has an array of persons right now.

92
00:04:38,020 --> 00:04:41,690
What's gonna happen if I now break this
into two classes, only students and

93
00:04:41,690 --> 00:04:42,250
only faculty.

94
00:04:42,250 --> 00:04:44,460
Well I can't keep that single
array of persons anymore.

95
00:04:45,500 --> 00:04:49,880
I'm gonna have to keep two arrays,
one for students and one for faculty.

96
00:04:49,880 --> 00:04:53,300
I know there's no clean way to keep
a single data structure for all persons.

97
00:04:53,300 --> 00:04:55,680
And you may say,
well why is that important?

98
00:04:55,680 --> 00:05:00,320
Well, what if I just wanted to sort by
the time that the person came on campus?

99
00:05:01,370 --> 00:05:02,120
That would be really hard to do.

100
00:05:02,120 --> 00:05:04,500
I could sort the students potentially,
I could sort the faculty, but

101
00:05:04,500 --> 00:05:05,430
how do I merge those?

102
00:05:05,430 --> 00:05:07,950
It's gonna get ugly pretty quick.

103
00:05:07,950 --> 00:05:10,159
So, neither of these answers
are things that we're happy with.

104
00:05:11,870 --> 00:05:12,830
What do we want then?

105
00:05:12,830 --> 00:05:16,880
Essentially, we figured out the goals
by looking at these two examples.

106
00:05:16,880 --> 00:05:20,370
The goals here are 1, to keep all
of our common code in one class.

107
00:05:20,370 --> 00:05:22,120
It'd be great if we could do that.

108
00:05:22,120 --> 00:05:25,830
We also would like it, so
if we have different behaviors,

109
00:05:25,830 --> 00:05:29,050
I split that different behavior
into different classes.

110
00:05:29,050 --> 00:05:31,440
And lastly,
I wanna be able to keep all these objects

111
00:05:31,440 --> 00:05:32,630
in one single data structure.

112
00:05:33,660 --> 00:05:35,260
Now these are somewhat lofty goals, but

113
00:05:35,260 --> 00:05:38,210
the good news is,
they all come to us with inheritance.

114
00:05:38,210 --> 00:05:41,490
We're gonna dive into the details about
how to do this in the next video.