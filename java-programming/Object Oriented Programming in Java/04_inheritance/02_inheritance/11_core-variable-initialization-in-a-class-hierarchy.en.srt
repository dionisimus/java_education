1
00:00:00,000 --> 00:00:04,025
[MUSIC]

2
00:00:04,025 --> 00:00:08,185
In the past couple of videos, we've been
starting to look at how class creation, or

3
00:00:08,185 --> 00:00:09,885
object creation happens in Java,

4
00:00:09,885 --> 00:00:13,780
specifically how does inheritance
apply to object creation.

5
00:00:13,780 --> 00:00:16,280
In the last video, we actually looked
at a number of compiler rules.

6
00:00:16,280 --> 00:00:20,570
Now these compiler rules are what the
compiler does when it looks at your code.

7
00:00:20,570 --> 00:00:22,850
Now the reason we want to
know about these rules,

8
00:00:22,850 --> 00:00:25,470
is because it's going to
help us trace our code.

9
00:00:25,470 --> 00:00:28,990
In fact, we're going to see an error
in our code here in just a little bit,

10
00:00:28,990 --> 00:00:31,630
which comes about because of these rules.

11
00:00:33,820 --> 00:00:36,111
We're also going to use
same-class constructors, and

12
00:00:36,111 --> 00:00:38,364
super class constructors to
help with class creation.

13
00:00:41,683 --> 00:00:46,570
Now we started by saying all objects
are created from the inside out.

14
00:00:46,570 --> 00:00:50,790
In the last video we saw how
the compiler rules make this happen.

15
00:00:50,790 --> 00:00:53,570
But what we did with the last video was
essentially just create a number of

16
00:00:53,570 --> 00:00:57,370
default constructors without
actually initializing anything.

17
00:00:57,370 --> 00:01:01,500
So what we're gonna do now is modify
these to initialize the name variable.

18
00:01:01,500 --> 00:01:04,870
Again, you've likely initialized
a variable before in a constructor.

19
00:01:04,870 --> 00:01:08,370
What we're focusing on are the elements
that apply to inheritance.

20
00:01:10,020 --> 00:01:12,600
So let's start off with our person class.

21
00:01:13,860 --> 00:01:17,940
Remember that the extends object was
automatically put there by the compiler.

22
00:01:17,940 --> 00:01:21,200
And what we're gonna do instead of
having it automatically put there,

23
00:01:21,200 --> 00:01:23,500
is we're gonna explicitly put it here.

24
00:01:23,500 --> 00:01:26,640
Likewise, I'm gonna explicitly
put the default constructor which

25
00:01:26,640 --> 00:01:28,050
would have been inserted
by the compiler anyway.

26
00:01:28,050 --> 00:01:30,320
And what we're gonna so

27
00:01:30,320 --> 00:01:33,530
now is modify this default constructor
to initialize the name variable.

28
00:01:34,600 --> 00:01:37,940
So let's add a string
argument to the constructor.

29
00:01:37,940 --> 00:01:41,740
Let's add this.name = n and
just do what we would of done before.

30
00:01:41,740 --> 00:01:45,330
Now, to be honest if we didn't have
that call to super we'd be fine.

31
00:01:46,720 --> 00:01:50,100
But because I've now inserted this line,
I've got an error.

32
00:01:51,920 --> 00:01:52,799
Remember that rule.

33
00:01:54,000 --> 00:01:58,470
The very first line of instructor has to
be a call to your same class constructor

34
00:01:58,470 --> 00:02:00,090
or a super class constructor.

35
00:02:00,090 --> 00:02:03,209
I have broken this rule
by saying this.name = n.

36
00:02:03,209 --> 00:02:05,950
And because I have a call
to super() after that,

37
00:02:05,950 --> 00:02:08,600
this is going to produce
a fairly cryptic compiler error.

38
00:02:09,970 --> 00:02:13,650
Now you know what that error means and you
can fix it by just switching the order.

39
00:02:14,770 --> 00:02:18,130
So now i'm calling my superclass
constructor correctly and

40
00:02:18,130 --> 00:02:19,480
now I can initialize my variable.

41
00:02:21,400 --> 00:02:25,680
Let's modify the student class now to
initialize the variables there as well.

42
00:02:25,680 --> 00:02:29,200
So i'm gonna take default
student constructor and

43
00:02:29,200 --> 00:02:30,179
i'm gonna make changes to it.

44
00:02:32,260 --> 00:02:34,640
I'm gonna insert String n.

45
00:02:34,640 --> 00:02:39,680
I'm gonna insert as a parameter, and I'm
also going to initialize that variable.

46
00:02:41,860 --> 00:02:42,440
Is this gonna work?

47
00:02:42,440 --> 00:02:45,880
I want you to pause and
think about this for a few seconds.

48
00:02:45,880 --> 00:02:48,269
Look at the code and
see if there's any errors here.

49
00:02:50,720 --> 00:02:57,290
If you start to recognize that I'm not
allowed to say this.name, you're right.

50
00:02:57,290 --> 00:02:59,940
That's a private variable
in the person class.

51
00:02:59,940 --> 00:03:02,500
I'm not allowed to direct the access
of that in the student class,

52
00:03:02,500 --> 00:03:04,290
I'd have to use a getter or
a setter to do so.

53
00:03:05,940 --> 00:03:07,780
But I don't have a getter or a setter.

54
00:03:07,780 --> 00:03:09,250
Is there a way for me to do this?

55
00:03:09,250 --> 00:03:12,910
Can I initialize name without
having the public getter setter?

56
00:03:12,910 --> 00:03:16,520
The answer is yes.

57
00:03:16,520 --> 00:03:20,340
All I have to do is change this now
to call the superclass constructor

58
00:03:20,340 --> 00:03:23,460
that takes an argument,
which is gonna initialize to be named.

59
00:03:25,090 --> 00:03:25,900
Perfect.

60
00:03:25,900 --> 00:03:27,310
So, just cross out those two lines,

61
00:03:27,310 --> 00:03:30,590
replace it with super,
with that name variable being passed in.

62
00:03:30,590 --> 00:03:32,360
And it's gonna initialize
everything properly.

63
00:03:34,300 --> 00:03:36,200
Let's go a little bit further with this,
though.

64
00:03:36,200 --> 00:03:38,480
Let me add one more constructor
to that student class.

65
00:03:40,620 --> 00:03:44,490
Let me add in, so this is our code
from where we just left off, and

66
00:03:44,490 --> 00:03:46,870
now let me add in that
no-arg default constructor.

67
00:03:47,890 --> 00:03:50,840
Now you should might be tempted to do
with a no-arg default constructor and

68
00:03:50,840 --> 00:03:53,150
let's just throw in some
kind of default name here.

69
00:03:53,150 --> 00:03:55,260
Is to just say super student.

70
00:03:57,090 --> 00:04:01,430
This will work, it's not the word idea but
is there a better way to do this?

71
00:04:02,620 --> 00:04:04,350
Yes, there is.

72
00:04:04,350 --> 00:04:08,580
There is no reason I should be
calling these super classes.

73
00:04:08,580 --> 00:04:12,180
Argument constructor when I
have one in my own class.

74
00:04:12,180 --> 00:04:15,120
A better way to do this
would be to do it like this.

75
00:04:16,190 --> 00:04:20,260
I should use my own same class
constructor if it's available to me,

76
00:04:20,260 --> 00:04:23,220
because they maybe code within
my same class constructor

77
00:04:23,220 --> 00:04:26,040
which does things that I wanna
initialize based on this.

78
00:04:26,040 --> 00:04:27,902
I shouldn't just jump
straight to the super class.

79
00:04:31,385 --> 00:04:36,110
But having done all these pieces, we now
see how object creation happens in Java.

80
00:04:36,110 --> 00:04:38,090
We see that it happens
from the inside out,

81
00:04:38,090 --> 00:04:41,171
we see that everything inherits
from object, and we now know how to

82
00:04:41,171 --> 00:04:45,150
use Superclass Constructors and Ownclass
constructors design our classes better.