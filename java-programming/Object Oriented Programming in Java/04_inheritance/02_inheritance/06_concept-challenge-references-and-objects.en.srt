1
00:00:00,025 --> 00:00:06,498
[NOISE] All right, you've learned
a little bit about inheritance.

2
00:00:06,498 --> 00:00:10,367
And you've played that matching game
with Leo where you learned what kinds of

3
00:00:10,367 --> 00:00:13,160
references can refer to
what kinds of objects.

4
00:00:13,160 --> 00:00:16,560
It turns out that is a really,
really tricky idea to get.

5
00:00:16,560 --> 00:00:18,460
So, we've got a concept challenge for

6
00:00:18,460 --> 00:00:22,930
you that's gonna exercise your
ability to make those matches.

7
00:00:22,930 --> 00:00:24,150
Don't worry if this is
a little bit tricky.

8
00:00:24,150 --> 00:00:26,040
It takes a while to get it.

9
00:00:26,040 --> 00:00:27,710
So work through it, you know the drill.

10
00:00:27,710 --> 00:00:32,730
Work through it on your own, answer
the end video quiz, discuss with others,

11
00:00:32,730 --> 00:00:35,870
watch our learner videos, and
then watch our explanation.

12
00:00:37,290 --> 00:00:38,310
Here's your challenge.

13
00:00:38,310 --> 00:00:39,940
You've got three classes.

14
00:00:39,940 --> 00:00:42,860
There's a Person class,
it has a name, member variable.

15
00:00:42,860 --> 00:00:44,520
And it has a getName, method.

16
00:00:45,750 --> 00:00:47,870
There's a Student class
which extends person.

17
00:00:47,870 --> 00:00:53,302
It has an ID member variable that's
an integer, and it has a getID method,

18
00:00:53,302 --> 00:00:57,720
it returns an integer, and there's
a Faculty class which also extends Person.

19
00:00:57,720 --> 00:01:00,670
It also has an ID variable, but
this time it's a string, and

20
00:01:00,670 --> 00:01:02,560
it has a getID method
that returns a string.

21
00:01:03,950 --> 00:01:09,050
We have five statements over there on
the right that create new objects and

22
00:01:09,050 --> 00:01:11,990
assign references to refer
to those new objects.

23
00:01:11,990 --> 00:01:14,820
All of those statements compile and
run just fine.

24
00:01:16,190 --> 00:01:20,543
Your question is going to be to answer
questions about which of an additional

25
00:01:20,543 --> 00:01:25,521
series of statements work, and which cause
errors at either compile time or run time.

26
00:01:32,440 --> 00:01:33,460
>> Okay, my name is Linda.

27
00:01:33,460 --> 00:01:35,310
>> My name's Mustafa.

28
00:01:35,310 --> 00:01:36,600
>> My name is Jason.

29
00:01:38,730 --> 00:01:40,750
So how did you guys answer question one.

30
00:01:42,100 --> 00:01:45,160
>> I seem to think that question
one didn't have any issues.

31
00:01:45,160 --> 00:01:50,040
S is a student, and they're trying

32
00:01:50,040 --> 00:01:54,650
to get the name from the student, and-
>> Well I

33
00:01:54,650 --> 00:01:58,130
thought there was a problem with that
because when I look at the class of

34
00:01:58,130 --> 00:02:02,430
Student I realize there is
no method called getName.

35
00:02:02,430 --> 00:02:06,120
>> That's true, but
Student extends from Person.

36
00:02:06,120 --> 00:02:09,420
>> So it will inherit all
the parent class methods.

37
00:02:09,420 --> 00:02:10,630
>> Yeah, it's a public method.

38
00:02:10,630 --> 00:02:14,360
>> Oh so, it will inherit
the Persons getName method.

39
00:02:14,360 --> 00:02:15,190
>> Right, yeah.

40
00:02:15,190 --> 00:02:15,980
>> Oh okay, I see.

41
00:02:17,220 --> 00:02:20,360
What about the second p = s?

42
00:02:20,360 --> 00:02:22,790
>> For the second one,
I also thought it was fine.

43
00:02:22,790 --> 00:02:23,385
>> That's fine?

44
00:02:23,385 --> 00:02:26,860
>> Cuz Person p is a new Person.

45
00:02:26,860 --> 00:02:31,340
And if you change the reference
of p to become the object created

46
00:02:31,340 --> 00:02:35,990
from Student s equals new Student,
then every Student is a Person.

47
00:02:37,150 --> 00:02:38,910
>> Okay, so that's the part that I missed.

48
00:02:38,910 --> 00:02:43,610
I was thinking it would be a problem cuz
Student and Person are not the same type,

49
00:02:43,610 --> 00:02:45,460
so I wasn't sure if you
could cast it that way.

50
00:02:45,460 --> 00:02:49,700
>> Oh, right.
>> So too much p instead of

51
00:02:49,700 --> 00:02:52,595
referencing to Person,
I was referencing to Students.

52
00:02:52,595 --> 00:02:53,095
>> Mm-hm.
>> Okay.

53
00:02:53,095 --> 00:02:54,080
>> If that makes sense?

54
00:02:54,080 --> 00:02:55,661
>> Yeah, okay.
>> Now look at the next line of-

55
00:02:57,842 --> 00:02:59,648
>> I don't think that would work because

56
00:02:59,648 --> 00:03:02,050
Person doesn't have a getID method-
>> Right.

57
00:03:02,050 --> 00:03:03,790
>> So
where would it be looking to get that?

58
00:03:03,790 --> 00:03:08,344
>> I thought that during compile time
error since p is still a Person,

59
00:03:08,344 --> 00:03:14,530
it'll go into the Person class and then
look at, oh, where's the getID method?

60
00:03:14,530 --> 00:03:19,335
>> But didn't we just updated a Person
class with pointing to a Student class?

61
00:03:19,335 --> 00:03:21,015
>> Mm-hm.
>> The compiler doesn't know that.

62
00:03:21,015 --> 00:03:24,821
The compiler still sees it as a Person
object because it was originally set up

63
00:03:24,821 --> 00:03:25,365
that way.

64
00:03:25,365 --> 00:03:31,020
>> It's only at run time that the compiler
will see that p is actually a Student.

65
00:03:31,020 --> 00:03:32,510
>> Oh, okay.
Even that I believe we have

66
00:03:32,510 --> 00:03:33,720
to cast it I guess.

67
00:03:33,720 --> 00:03:34,238
>> Right.
>> Mm-hm.

68
00:03:36,954 --> 00:03:41,396
>> How about the third line of code,
faculty equals Person?

69
00:03:41,396 --> 00:03:41,940
>> Person?

70
00:03:42,950 --> 00:03:46,640
>> Well person isn't
necessarily a Faculty member.

71
00:03:46,640 --> 00:03:49,890
So like he was saying that
if you go around and ask

72
00:03:49,890 --> 00:03:53,200
a random person on the street, they might
not have the information for faculty.

73
00:03:53,200 --> 00:03:57,730
So I'm not sure if you can cast
the faculty as a broad term person.

74
00:03:57,730 --> 00:04:00,500
>> Right, not every person is faculty.

75
00:04:00,500 --> 00:04:02,200
>> Right.
>> Yeah that makes sense.

76
00:04:03,950 --> 00:04:08,244
And then the last one,
o equals a Student, or

77
00:04:08,244 --> 00:04:11,748
object class equals Student class.

78
00:04:11,748 --> 00:04:16,168
>> I think we've previously learned that
every object inherits from the object

79
00:04:16,168 --> 00:04:17,124
class, right?

80
00:04:17,124 --> 00:04:17,770
>> Yeah.

81
00:04:17,770 --> 00:04:18,320
>> Oh, I see.

82
00:04:18,320 --> 00:04:19,390
>> So s is a Student.

83
00:04:19,390 --> 00:04:23,710
>> Okay, I like,
every class would inherit object meaning.

84
00:04:23,710 --> 00:04:25,060
There's implicit extent.

85
00:04:25,060 --> 00:04:26,120
>> Yeah, yeah exactly.

86
00:04:26,120 --> 00:04:26,970
>> Perfect.

87
00:04:26,970 --> 00:04:29,620
>> All right let's step through these
lines one at a time to figure out which

88
00:04:29,620 --> 00:04:32,060
ones work and which ones cause errors.

89
00:04:32,060 --> 00:04:33,620
This first line here,
it's pretty straightforward.

90
00:04:33,620 --> 00:04:35,960
It creates a new variable
of type String called n,

91
00:04:35,960 --> 00:04:38,640
and it's gonna set it
equal to s.getName().

92
00:04:38,640 --> 00:04:42,330
Well first we need to
figure out what is s.

93
00:04:42,330 --> 00:04:46,265
Well s is a Student reference,
it's a reference to a Student.

94
00:04:46,265 --> 00:04:48,860
And it actually does refer
to a Student object.

95
00:04:48,860 --> 00:04:53,680
And you can see that right here,
when we created that Student object and

96
00:04:53,680 --> 00:04:55,030
assigned the reference s to point to.

97
00:04:55,030 --> 00:04:59,430
So now we can look in the Student class
and see if there's a getName method.

98
00:04:59,430 --> 00:05:01,590
We look here, no getName method, but

99
00:05:01,590 --> 00:05:05,250
that doesn't concern us too much,
because Student extends Person.

100
00:05:05,250 --> 00:05:08,420
So now we can go up in person and
look at those getName method there.

101
00:05:08,420 --> 00:05:09,800
And sure enough, there is.

102
00:05:09,800 --> 00:05:11,070
It returns a string.

103
00:05:11,070 --> 00:05:15,580
So this will run just fine, again,
because this getName method is public.

104
00:05:15,580 --> 00:05:16,710
So everything is good.

105
00:05:16,710 --> 00:05:17,947
This line will work just fine.

106
00:05:19,898 --> 00:05:23,748
The next line says that the reference
p should be set to refer

107
00:05:23,748 --> 00:05:27,720
to the same location as
the reference s refers to.

108
00:05:27,720 --> 00:05:31,340
Now s refers to a Student object.

109
00:05:31,340 --> 00:05:35,730
What we're saying is that now p
should refer to a Student object, and

110
00:05:35,730 --> 00:05:37,210
we have to figure out if that's okay.

111
00:05:37,210 --> 00:05:41,880
Is it okay for a Person reference to refer
to an object that's actually a student?

112
00:05:41,880 --> 00:05:45,350
So you ask the question
are all students people?

113
00:05:45,350 --> 00:05:47,540
Is a student always a person?

114
00:05:47,540 --> 00:05:51,030
And I hope the answer is always yes.

115
00:05:51,030 --> 00:05:53,290
So that should be just fine.

116
00:05:53,290 --> 00:05:54,597
That line works as well.

117
00:05:57,268 --> 00:06:02,909
Next line here says that int
m gets the value of p.getID.

118
00:06:04,150 --> 00:06:06,925
Now, we have to think about
things a little more carefully.

119
00:06:06,925 --> 00:06:11,272
So what we're asking, assuming that
this line has already completely, and

120
00:06:11,272 --> 00:06:18,650
p now refers to a Student object, we
wanna know is it okay to call p a getID.

121
00:06:18,650 --> 00:06:23,100
There is a getID method
inside the student class, but

122
00:06:23,100 --> 00:06:26,300
the problem is that p
is a Person reference.

123
00:06:26,300 --> 00:06:31,832
So the compiler doesn't know that p
actually refers to a Student object.

124
00:06:31,832 --> 00:06:34,632
The compiler is gonna complain
about this statement here.

125
00:06:34,632 --> 00:06:39,820
It's gonna say it's a piece of reference
to a Person, I don't know about this getID

126
00:06:39,820 --> 00:06:43,770
method, there's no getID method in Person
class, and so I'm gonna cause an error.

127
00:06:44,790 --> 00:06:45,910
We can fix this with a cast.

128
00:06:45,910 --> 00:06:50,260
So if we wanted to fix this problem,
we would just insert a cast here.

129
00:06:50,260 --> 00:06:56,415
We could cast p, so
instead of just p, we'd say Student,

130
00:06:56,415 --> 00:07:02,200
and then p right there, and then .getID.

131
00:07:02,200 --> 00:07:04,350
Because we know that object
is actually a Student.

132
00:07:04,350 --> 00:07:07,230
So that's fine to do, but again,
be a little careful with your cast

133
00:07:07,230 --> 00:07:10,420
because your compiler will trust
you no matter what you say.

134
00:07:10,420 --> 00:07:12,401
We can do this in this case
cuz we know that's the term.

135
00:07:14,862 --> 00:07:18,712
All right, so the next statement there, so
going back actually to the last statement,

136
00:07:18,712 --> 00:07:20,210
this statement right here.

137
00:07:20,210 --> 00:07:22,350
This statement right there
does not work as written, but

138
00:07:22,350 --> 00:07:23,360
it will work if we add that cast.

139
00:07:25,000 --> 00:07:29,000
Let's consider the next line,
where it says f gets the value of q.

140
00:07:29,000 --> 00:07:30,290
So what is f?

141
00:07:30,290 --> 00:07:31,690
F is a Faculty reference.

142
00:07:31,690 --> 00:07:35,050
It's a reference to some
sort of Faculty object.

143
00:07:35,050 --> 00:07:36,340
And what is q?

144
00:07:36,340 --> 00:07:39,600
Well, q is a reference to a Person.

145
00:07:40,750 --> 00:07:44,760
So now we need to figure out if a Faculty
reference can point to a person object.

146
00:07:45,820 --> 00:07:49,570
And again we will ask the question,
are all people faculty?

147
00:07:49,570 --> 00:07:52,010
And the answer to that
question is of course no.

148
00:07:52,010 --> 00:07:56,430
So we can't set a Faculty reference
equal to a Person object.

149
00:07:56,430 --> 00:07:57,280
That will cause an error.

150
00:07:57,280 --> 00:07:59,910
And there's nothing that we
can do to make that work.

151
00:07:59,910 --> 00:08:04,470
If we try to cast q to a faculty,
compiler might accept it,

152
00:08:04,470 --> 00:08:07,755
but at run time we're going to get
what is called a class cast exception,

153
00:08:07,755 --> 00:08:11,600
because it's illegal to cast
a Person object to a Faculty type.

154
00:08:13,490 --> 00:08:16,330
That line will not work.

155
00:08:16,330 --> 00:08:19,999
What about this next
line where we say o = s.

156
00:08:19,999 --> 00:08:26,580
So o is an Object type reference,
and s is a Student object, up here.

157
00:08:27,920 --> 00:08:29,140
Well, that should work, right?

158
00:08:29,140 --> 00:08:31,920
Because everything in Java is an Object.

159
00:08:31,920 --> 00:08:34,530
The Object text references
are allowed to point to any kind of

160
00:08:34,530 --> 00:08:35,220
Object that they want.

161
00:08:35,220 --> 00:08:37,540
So that one's pretty straightforward.

162
00:08:37,540 --> 00:08:38,210
That works.

163
00:08:39,640 --> 00:08:40,390
So now we're done.

164
00:08:40,390 --> 00:08:44,040
And to summarize what we found was
this first line here was just fine.

165
00:08:45,290 --> 00:08:49,090
The next line here was also just fine,
because all students are people.

166
00:08:50,400 --> 00:08:52,334
The next line is not okay.

167
00:08:54,330 --> 00:08:56,400
But we could make it okay with a cast.

168
00:08:58,380 --> 00:09:00,210
The next line was there not okay and

169
00:09:00,210 --> 00:09:02,550
there is nothing we could
do to make that line work.

170
00:09:03,810 --> 00:09:06,371
And finally this last
line here was just fine.