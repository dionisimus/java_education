1
00:00:00,000 --> 00:00:04,371
[MUSIC]

2
00:00:04,371 --> 00:00:07,630
Hi, welcome back to our
lessons on polymorphism.

3
00:00:08,830 --> 00:00:10,320
So with the lessons today,

4
00:00:10,320 --> 00:00:14,100
we're gonna focus on compile
time rules versus runtime rules.

5
00:00:14,100 --> 00:00:15,850
And once you understand that,

6
00:00:15,850 --> 00:00:20,520
all the magic that might appear to be
associated with polymorphism goes away.

7
00:00:20,520 --> 00:00:23,650
There's a saying here in our
integral classes at UCSD,

8
00:00:23,650 --> 00:00:27,870
which is think like a compiler,
act like a runtime environment.

9
00:00:27,870 --> 00:00:31,986
That phrase comes from one of our really
popular lecturers here, Rick Ord.

10
00:00:31,986 --> 00:00:33,395
And why I like that saying so

11
00:00:33,395 --> 00:00:37,740
much is that there are two pieces that
happen whenever you execute code.

12
00:00:37,740 --> 00:00:41,320
The first step is a compiler has
to interpret the code you wrote.

13
00:00:41,320 --> 00:00:42,660
In the second step,

14
00:00:42,660 --> 00:00:46,100
that's when the runtime environment
gets to execute that interpreted quote.

15
00:00:47,300 --> 00:00:50,390
So you have to be able to
see your code in two lights.

16
00:00:50,390 --> 00:00:53,260
You have to do this especially when
we're thinking about Polymorphism.

17
00:00:53,260 --> 00:00:56,120
The truth is you've already started to
wear these two hats when we started

18
00:00:56,120 --> 00:00:58,446
talking about constructors.

19
00:00:58,446 --> 00:01:01,430
So let's continue with this by
looking at the compile time rules and

20
00:01:01,430 --> 00:01:04,300
the runtime rules when it
comes to polymorphism.

21
00:01:04,300 --> 00:01:05,971
So what this is gonna allow us to do then,

22
00:01:05,971 --> 00:01:08,940
is to step through the decisions made
both at compile time and runtime.

23
00:01:10,210 --> 00:01:13,050
So the rules, first off, compiler rules.

24
00:01:13,050 --> 00:01:15,980
Compiler can only know the reference type.

25
00:01:17,560 --> 00:01:19,420
Doesn't know the runtime
type of the object.

26
00:01:19,420 --> 00:01:21,850
It only knows the reference type.

27
00:01:21,850 --> 00:01:24,480
Which means when you try
call a method on object,

28
00:01:24,480 --> 00:01:27,680
it can only look in that reference
type class for that method.

29
00:01:28,760 --> 00:01:31,800
The goal of the compiler is
to output a method signature,

30
00:01:31,800 --> 00:01:34,280
which will then be executed at runtime.

31
00:01:34,280 --> 00:01:36,950
So let's walk through this
in detail with our example.

32
00:01:36,950 --> 00:01:39,500
So we have our Person class,
we have our Student class.

33
00:01:39,500 --> 00:01:43,348
I've got a Person reference
point to the Student object, and

34
00:01:43,348 --> 00:01:47,130
I'm gonna call the toString
method on that Student object.

35
00:01:47,130 --> 00:01:51,340
The compiler only knows that
this is a Person reference.

36
00:01:51,340 --> 00:01:56,031
So when you try call toString it's
gonna look in the Person class, and

37
00:01:56,031 --> 00:01:57,950
find that toString method.

38
00:01:59,700 --> 00:02:03,180
Then it's gonna emit a compile time,
a method signature.

39
00:02:03,180 --> 00:02:07,010
A compile time,
which is a no parameter toString method,

40
00:02:07,010 --> 00:02:08,915
which is to be executed at runtime.

41
00:02:10,440 --> 00:02:12,130
That leads us, then, to our runtime rules.

42
00:02:13,672 --> 00:02:17,260
At runtime,
you have to follow the exact runtime type

43
00:02:17,260 --> 00:02:18,870
of the object to find that method.

44
00:02:18,870 --> 00:02:23,810
So what you're gonna do is match
the method signature, which was emitted at

45
00:02:23,810 --> 00:02:28,560
compile time, to the appropriate method
within the actual runtime class.

46
00:02:30,140 --> 00:02:31,140
Let's walk through that.

47
00:02:31,140 --> 00:02:35,140
Where we left off was the compiler had
already emitted a method signature,

48
00:02:35,140 --> 00:02:37,159
which was toString with no arguments.

49
00:02:38,170 --> 00:02:40,480
And when we attempt to do s.toString,

50
00:02:40,480 --> 00:02:44,970
now at runtime, it knows that s
is actually a Student object.

51
00:02:46,320 --> 00:02:49,420
So it's gonna find the toString
method in Student, and

52
00:02:49,420 --> 00:02:51,590
that's what's gonna be
executed at runtime.

53
00:02:53,260 --> 00:02:55,775
So, now that we know these rules,
let's look at a couple more examples.

54
00:02:58,281 --> 00:03:02,114
So first,
let's say I have a Person reference,

55
00:03:02,114 --> 00:03:04,835
s, pointing to a Student object.

56
00:03:04,835 --> 00:03:09,200
And what I want do is call
the getSID method on my Student.

57
00:03:09,200 --> 00:03:12,776
What I want you to do is take
a few seconds to think about this.

58
00:03:12,776 --> 00:03:14,496
What do you think's gonna happen?

59
00:03:19,512 --> 00:03:23,140
All right if you said this was
gonna cause problems, you're right.

60
00:03:23,140 --> 00:03:27,080
The reason it's gonna cause problems
is because the compiler can only know

61
00:03:29,230 --> 00:03:31,610
that s is a Person reference.

62
00:03:31,610 --> 00:03:35,560
So the compiler can only look in
the Person class for that method.

63
00:03:35,560 --> 00:03:38,610
It's gonna look there and
it's not gonna find a getSID method.

64
00:03:38,610 --> 00:03:41,810
Which means the compiler is
gonna give you an error and say,

65
00:03:41,810 --> 00:03:43,580
I can't find this method
in the Person class.

66
00:03:44,810 --> 00:03:48,740
Now you might say, well wait a second,
I know that this is always gonna be

67
00:03:48,740 --> 00:03:52,140
a Student object,
it should be allowed to call SID.

68
00:03:53,210 --> 00:03:54,530
Well, we're going to be able to do that,
but

69
00:03:54,530 --> 00:03:56,790
we're going to have to do that
through explicit casting.

70
00:03:56,790 --> 00:03:59,643
We're going to cover
casting in the next video.