1
00:00:03,632 --> 00:00:06,830
In this concept challenge we're gonna
have some fun with polymorphism and

2
00:00:06,830 --> 00:00:07,649
dynamic binding.

3
00:00:07,649 --> 00:00:11,849
We want it to be a little bit challenging,
but hopefully not too far beyond the reach

4
00:00:11,849 --> 00:00:15,380
of what you can do with your new
knowledge about how this works.

5
00:00:15,380 --> 00:00:16,640
So you know the drill.

6
00:00:16,640 --> 00:00:19,910
You're going to pause,
answer the question on your own,

7
00:00:19,910 --> 00:00:24,190
discuss it with people around you or
online, watch our learner videos, and

8
00:00:24,190 --> 00:00:27,200
then confirm your understanding
with our explanation.

9
00:00:27,200 --> 00:00:28,210
So what's the problem?

10
00:00:28,210 --> 00:00:28,855
Here it is.

11
00:00:28,855 --> 00:00:31,770
We two classes for you,
the student class and the person class.

12
00:00:31,770 --> 00:00:35,390
The person class is the base class.

13
00:00:35,390 --> 00:00:38,990
It has a private member variable name and
then the number of methods.

14
00:00:38,990 --> 00:00:39,970
There's one constructor.

15
00:00:39,970 --> 00:00:41,510
It takes an argument.

16
00:00:41,510 --> 00:00:43,030
There's a method called isAsleep.

17
00:00:43,030 --> 00:00:46,340
It takes an integer argument,
and it returns a boolean.

18
00:00:46,340 --> 00:00:51,270
The integer argument indicates the time of
day, in term of hours on a 24 hour clock,

19
00:00:51,270 --> 00:00:55,730
and a person is asleep between
the hours of 10 PM, or 22, and 7 AM.

20
00:00:55,730 --> 00:00:59,270
So between those hours,
isAsleep will return true.

21
00:01:00,540 --> 00:01:03,670
It also has a two string method
which just returns its name, and

22
00:01:03,670 --> 00:01:08,080
then it has a status method which also
takes an integer argument for the hour.

23
00:01:08,080 --> 00:01:11,550
And what it's gonna do is it's gonna check
to see if the person is asleep at that

24
00:01:11,550 --> 00:01:12,580
hour, and if it is,

25
00:01:12,580 --> 00:01:16,230
it will say the person is offline or
print a message to that effect.

26
00:01:16,230 --> 00:01:19,310
And if they're not asleep then it'll print
a message saying the person is online.

27
00:01:20,390 --> 00:01:21,120
That's the person class.

28
00:01:22,120 --> 00:01:25,515
The student class extends
the person class.

29
00:01:25,515 --> 00:01:30,600
And so it inherits a bunch of things from
the person, and then what it does is it

30
00:01:30,600 --> 00:01:35,730
overrides the isAsleep method to slightly
change the hours that a student is asleep.

31
00:01:35,730 --> 00:01:41,340
So a student in our world here is only
asleep between the hours of 2 AM and 8 AM.

32
00:01:42,880 --> 00:01:46,600
So if we call isAsleep between those hours
then the student will report being asleep.

33
00:01:47,600 --> 00:01:52,950
So the question for you is, what happens
when we create a reference to the person,

34
00:01:52,950 --> 00:01:55,840
set that reference equal to
a new student object, and

35
00:01:55,840 --> 00:02:00,780
then call the status method on that
object at time 1 in the morning?

36
00:02:02,630 --> 00:02:03,210
>> I'm Alicia.

37
00:02:03,210 --> 00:02:04,660
>> I'm Joanna.

38
00:02:04,660 --> 00:02:05,290
>> And I'm Justin.

39
00:02:07,670 --> 00:02:10,700
>> So actually when I looked at this code

40
00:02:10,700 --> 00:02:14,750
I was wondering if person can
actually even be a student.

41
00:02:14,750 --> 00:02:20,650
>> I think student can be
a person since it extends person.

42
00:02:20,650 --> 00:02:21,150
So.

43
00:02:22,370 --> 00:02:29,340
>> I agree with Justin because student
is a person, and you know it's a person.

44
00:02:29,340 --> 00:02:33,590
So it's just a more
specific type of person.

45
00:02:34,970 --> 00:02:36,440
>> What do you think it prints out?

46
00:02:37,860 --> 00:02:38,360
>> Mm..

47
00:02:40,128 --> 00:02:41,230
I don't know.

48
00:02:41,230 --> 00:02:42,810
Will it even print out?

49
00:02:42,810 --> 00:02:48,140
Because there are two,
if you look in the public class person and

50
00:02:48,140 --> 00:02:54,080
in the class student,
both of them have method is asleep.

51
00:02:55,280 --> 00:03:03,850
Which is called in the second
line of the of the method status?

52
00:03:03,850 --> 00:03:08,820
So, how does the compiler know,
which one to call?

53
00:03:08,820 --> 00:03:12,820
So wouldn't it just freak out,
and stop, and be an error?

54
00:03:12,820 --> 00:03:17,700
>> I think it has something
to do with the this call.

55
00:03:17,700 --> 00:03:18,220
>> Oh.
>> So,

56
00:03:18,220 --> 00:03:23,419
maybe this this tells it
which method it's calling.

57
00:03:23,419 --> 00:03:27,477
And I guess since we can
have it be a student,

58
00:03:27,477 --> 00:03:31,664
it's probably calling students is asleep.

59
00:03:31,664 --> 00:03:32,942
>> Yeah, I think that's correct, yeah.

60
00:03:32,942 --> 00:03:37,843
>> What I was confused about
was within status [CROSSTALK]

61
00:03:37,843 --> 00:03:38,365
>> Yes.

62
00:03:38,365 --> 00:03:39,422
>> It calls is asleep.

63
00:03:39,422 --> 00:03:43,740
In this well,
it calls isAsleep when it's in person.

64
00:03:43,740 --> 00:03:45,057
So shouldn't this be a person?

65
00:03:48,157 --> 00:03:53,056
>> It's a good, it's pretty tricky.

66
00:03:53,056 --> 00:03:56,157
>> But we assigned person to be a student,
right?

67
00:03:56,157 --> 00:03:56,912
Oh.

68
00:03:56,912 --> 00:04:01,784
>> So at this point perhaps at compile
time maybe it'll call is asleep in

69
00:04:01,784 --> 00:04:04,724
the person class, but maybe at run time,

70
00:04:04,724 --> 00:04:09,810
it'll say this is a student, and
then call students is asleep.

71
00:04:09,810 --> 00:04:10,310
>> Okay.

72
00:04:11,662 --> 00:04:13,070
>> All right,
there's a lot going on here so

73
00:04:13,070 --> 00:04:14,510
let's trace through this very carefully.

74
00:04:14,510 --> 00:04:19,690
The first thing we have to
think about is even though P

75
00:04:19,690 --> 00:04:24,095
is a person reference, the actual
object it refers to is a student.

76
00:04:24,095 --> 00:04:28,740
So when we call p.status
at one in the morning,

77
00:04:28,740 --> 00:04:31,520
we're calling that dot
status on a student object.

78
00:04:31,520 --> 00:04:32,920
This is what Java does at run time.

79
00:04:32,920 --> 00:04:36,410
It determines that P refers
to a student object and

80
00:04:36,410 --> 00:04:39,760
that's the type that it's going
to call the status method on.

81
00:04:39,760 --> 00:04:42,520
So we're gonna look in the student
class for the status method.

82
00:04:43,530 --> 00:04:47,290
And so we look here,
well we don't see a status method.

83
00:04:47,290 --> 00:04:51,010
But that's no problem because student
extends person, so Java will just go ahead

84
00:04:51,010 --> 00:04:53,460
and look in the superclass to see
if there's a status method there.

85
00:04:53,460 --> 00:04:55,250
And it turns out there is.

86
00:04:55,250 --> 00:04:56,830
Here's our status method.

87
00:04:56,830 --> 00:05:00,300
So we can start tracing through the status
method to see what actually happens.

88
00:05:00,300 --> 00:05:04,110
The first thing we do is
we have an if statement.

89
00:05:04,110 --> 00:05:08,930
And that If statement asks this.isAsleep.

90
00:05:08,930 --> 00:05:14,170
So the question is,
is this asleep at the particular hour?

91
00:05:14,170 --> 00:05:14,990
Now what is this?

92
00:05:14,990 --> 00:05:19,007
Well even though we're currently in the
person class, that's where the code is.

93
00:05:19,007 --> 00:05:25,550
This is at run time determined
to be a student object.

94
00:05:25,550 --> 00:05:29,900
Because the student object is the one
that called this method originally.

95
00:05:29,900 --> 00:05:33,120
So this dynamically binds
to the student object.

96
00:05:33,120 --> 00:05:36,810
And that's the class where
there is asleep gets called.

97
00:05:36,810 --> 00:05:40,350
So we go back down here and
we use the student's version of is asleep

98
00:05:40,350 --> 00:05:43,810
to determine if the student is
asleep at one in the morning.

99
00:05:43,810 --> 00:05:46,295
Now I already said the student only
sleeps between two in the morning and

100
00:05:46,295 --> 00:05:47,090
eight in the morning.

101
00:05:47,090 --> 00:05:49,991
So the student is not asleep
at one o'clock and so

102
00:05:49,991 --> 00:05:52,750
we'll fall through to this else condition.

103
00:05:52,750 --> 00:05:57,455
And print out that this student is online,
says now online,

104
00:05:57,455 --> 00:06:00,335
this is what it'll print, now online.

105
00:06:01,955 --> 00:06:03,085
And the students name is Sally.

106
00:06:05,055 --> 00:06:05,555
That's it.