1
00:00:00,000 --> 00:00:03,676
[MUSIC]

2
00:00:03,676 --> 00:00:06,759
All right, in our first module you were
introduced to the project that you're

3
00:00:06,759 --> 00:00:08,450
going to be doing throughout this course.

4
00:00:08,450 --> 00:00:11,320
And we hope that you think
it's as exciting as we do,

5
00:00:11,320 --> 00:00:13,360
visualizing this geospatial data.

6
00:00:13,360 --> 00:00:16,330
In this module though, we're going to
be stepping a little bit away, and

7
00:00:16,330 --> 00:00:19,100
we're going to be talking
about some of the concepts

8
00:00:19,100 --> 00:00:21,300
that underly the code that
you're going to be writing.

9
00:00:22,650 --> 00:00:24,260
So, by the end of this module,

10
00:00:24,260 --> 00:00:28,120
you're going to be able to motivate the
use of classes and objects in programming.

11
00:00:28,120 --> 00:00:32,020
So, why do we want to use classes and
objects when we write our programs?

12
00:00:32,020 --> 00:00:35,120
You'll be able to write classes in Java,
and then create instances,

13
00:00:35,120 --> 00:00:37,420
or objects of those classes.

14
00:00:37,420 --> 00:00:39,750
And you'll be able to describe
the parts of a class,

15
00:00:39,750 --> 00:00:43,190
like member variables,
methods, and constructors.

16
00:00:43,190 --> 00:00:46,310
So in order to motivate the use of
classes and objects in programming,

17
00:00:46,310 --> 00:00:49,090
I want to go back to my favorite
definition of computer science.

18
00:00:49,090 --> 00:00:51,765
And of course, software engineering and
software development,

19
00:00:51,765 --> 00:00:53,625
which is what we're
focusing on this course and

20
00:00:53,625 --> 00:00:57,305
this specialization,
is a major part of computer science.

21
00:00:57,305 --> 00:00:59,495
So my favorite definition
of computer science is,

22
00:00:59,495 --> 00:01:02,945
that computer science is the science of
using and processing large amounts of

23
00:01:02,945 --> 00:01:06,885
information to automate useful tasks and
learn about the world around us.

24
00:01:06,885 --> 00:01:10,175
Of course, all using a computer,
because none of this would be possible

25
00:01:10,175 --> 00:01:14,330
if we didn't have the computational
power that the computer affords us.

26
00:01:14,330 --> 00:01:16,960
I'm gonna zero in on this
line in the definition,

27
00:01:16,960 --> 00:01:19,750
this idea of using large
amounts of information.

28
00:01:20,960 --> 00:01:24,270
These programs that you're going to be
writing and programs that people write, if

29
00:01:24,270 --> 00:01:29,250
you think about programs out in the world,
deal with huge amounts of information, so

30
00:01:29,250 --> 00:01:33,320
much information it's almost
impossible to get your mind around it.

31
00:01:33,320 --> 00:01:37,300
So one of the fundamental
questions in writing programs is,

32
00:01:37,300 --> 00:01:39,360
how do we organize this information?

33
00:01:39,360 --> 00:01:43,670
How do we organize it in a way such
that our programs are easy to write,

34
00:01:43,670 --> 00:01:46,030
easy to maintain, and easy to debug?

35
00:01:46,030 --> 00:01:51,930
Well the philosophy behind object oriented
program, object oriented programming, is

36
00:01:51,930 --> 00:01:56,190
to build our programs in a way that match
the problem that we're trying to solve.

37
00:01:56,190 --> 00:01:57,560
So if we go back to our project and

38
00:01:57,560 --> 00:02:01,860
the problem we're trying to solve, it's
to visualize geospatial data on a map.

39
00:02:01,860 --> 00:02:05,340
And if we think about what's
involved in solving that problem,

40
00:02:05,340 --> 00:02:08,190
we can think of lots of
real-world objects and

41
00:02:08,190 --> 00:02:12,230
entities that are part of this
problem that we're solving.

42
00:02:12,230 --> 00:02:14,890
So we can think of things
like the map itself.

43
00:02:14,890 --> 00:02:17,000
That's an object that
we're all familiar with.

44
00:02:17,000 --> 00:02:17,930
Shapes.

45
00:02:17,930 --> 00:02:19,620
Shapes are objects that have properties.

46
00:02:19,620 --> 00:02:23,480
We could talk about the shapes of
the countries, for example, in this map.

47
00:02:23,480 --> 00:02:26,990
Locations in the map,
colors of the objects in the map,

48
00:02:26,990 --> 00:02:29,640
even the window in which
the map is displayed.

49
00:02:29,640 --> 00:02:31,760
Plenty more objects as well, but

50
00:02:31,760 --> 00:02:35,090
these are all ideas that have
real world counterparts.

51
00:02:35,090 --> 00:02:38,140
And the idea behind writing
an object-oriented program to solve this

52
00:02:38,140 --> 00:02:43,490
problem, is that we're going to structure
our code around these real-world concepts.

53
00:02:43,490 --> 00:02:47,860
So in order to build our code in this way
that matches the real world, we're gonna

54
00:02:47,860 --> 00:02:52,570
design these things called classes, and
what classes are, are just custom data

55
00:02:52,570 --> 00:02:56,410
types that we get to define to match
the problem that we're trying to solve.

56
00:02:56,410 --> 00:02:58,260
Now of course you're
familiar with classes,

57
00:02:58,260 --> 00:03:00,700
cuz you've been working with Java for
some time now.

58
00:03:00,700 --> 00:03:05,160
But we're gonna talk about really
the details of creating and using classes.

59
00:03:05,160 --> 00:03:08,574
So a class is a new kind of data that
we the programmer get to define.

60
00:03:09,635 --> 00:03:11,515
And it's kind of like a factory.

61
00:03:11,515 --> 00:03:16,655
It can produce pieces of data with
a template that we get to define.

62
00:03:16,655 --> 00:03:21,195
So I'm gonna use this factory icon
when I talk about class definitions.

63
00:03:22,425 --> 00:03:25,985
On the other hand, an object is the thing
that comes out of this factory.

64
00:03:25,985 --> 00:03:29,935
It's a piece of this data with this
custom type that we've defined.

65
00:03:29,935 --> 00:03:33,620
And some associated functionality
that goes along with that data.

66
00:03:33,620 --> 00:03:38,130
And I'll represent the objects with this
little symbol here to represent the things

67
00:03:38,130 --> 00:03:42,020
that are coming out of the factory as
we create objects using our classes.

68
00:03:43,530 --> 00:03:46,280
So you can think of this like
a real-world factory, right?

69
00:03:46,280 --> 00:03:47,660
Like a car factory.

70
00:03:47,660 --> 00:03:51,520
A car factory knows how to produce,
say, one kind of car.

71
00:03:51,520 --> 00:03:54,120
And it can produce many
of that kind of car.

72
00:03:54,120 --> 00:03:56,490
And once the cars are out in
the real world, well, at first,

73
00:03:56,490 --> 00:03:58,620
they all kind of look the same, but

74
00:03:58,620 --> 00:04:03,410
then each individual car can be
customized and it can be changed

75
00:04:03,410 --> 00:04:07,010
in its own way without affecting all the
other cars that came out of the factory.

76
00:04:07,010 --> 00:04:09,470
The same thing's going to happen for
our classes and

77
00:04:09,470 --> 00:04:11,089
our objects in our Java programs.

78
00:04:12,470 --> 00:04:14,920
So we're gonna go through
an example of creating a class.

79
00:04:14,920 --> 00:04:18,370
And the class we're gonna
create has to do with this map

80
00:04:18,370 --> 00:04:20,250
example that we've been working with.

81
00:04:20,250 --> 00:04:21,590
So here's a map of the world.

82
00:04:21,590 --> 00:04:23,800
I'm gonna zoom in on one
particular place in the world,

83
00:04:23,800 --> 00:04:25,190
which is where this orange box is,

84
00:04:25,190 --> 00:04:29,140
which is approximately where I'm standing
right now on the campus of UC San Diego.

85
00:04:30,280 --> 00:04:31,730
So here's the University of California,

86
00:04:31,730 --> 00:04:36,050
San Diego campus, and
I'm about right here on this map.

87
00:04:37,150 --> 00:04:40,630
So what I want to do is,
I want to build a class that can represent

88
00:04:40,630 --> 00:04:45,940
my location in the world, or can
represent anyone's location in the world.

89
00:04:45,940 --> 00:04:47,910
So the question I have to ask myself is,

90
00:04:47,910 --> 00:04:50,729
what do I need to know in
order to represent a location?

91
00:04:51,930 --> 00:04:55,620
Well for this example, I'm going to
represent the concept of a location using

92
00:04:55,620 --> 00:05:00,320
two pieces of data, the latitude and
the longitude of this location.

93
00:05:00,320 --> 00:05:02,700
And in my case, for
this location right here,

94
00:05:02,700 --> 00:05:06,540
you can see these approximately my
latitude and longitude coordinates.

95
00:05:08,570 --> 00:05:12,139
So let's define a class that
represents this notion of a location.

96
00:05:13,450 --> 00:05:15,280
Here's my class definition.

97
00:05:15,280 --> 00:05:19,560
So I'm telling Java that I want
a new class called SimpleLocation.

98
00:05:19,560 --> 00:05:23,300
And you can see that on the top
line in this declaration.

99
00:05:23,300 --> 00:05:26,030
I say, public class SimpleLocation.

100
00:05:26,030 --> 00:05:28,070
SimpleLocation is the name of the class.

101
00:05:28,070 --> 00:05:31,130
The keyword class tells Java
that I'm creating a new class.

102
00:05:31,130 --> 00:05:34,430
And public, which we'll talk about
more in some of the next videos.

103
00:05:34,430 --> 00:05:36,780
Just means that my class
is public to the world.

104
00:05:36,780 --> 00:05:39,270
Anyone can use it.

105
00:05:39,270 --> 00:05:43,560
Inside, after that first curly brace,
is the definition of my class.

106
00:05:43,560 --> 00:05:46,340
Now before we look closely at
the definition, I wanna point out that

107
00:05:46,340 --> 00:05:50,740
all of this code has to exist in
a file called SimpleLocation.java.

108
00:05:50,740 --> 00:05:52,970
That's just a rule that Java enforces.

109
00:05:52,970 --> 00:05:57,420
That when you're creating a class, you
have to put it in a file that has the same

110
00:05:57,420 --> 00:06:01,210
name as the class, and that's if
the class is public, which our class is.

111
00:06:01,210 --> 00:06:05,180
So all this code is in a file
called SimpleLocation.java.

112
00:06:05,180 --> 00:06:08,900
So let's look a little closely at
the definition for this class.

113
00:06:08,900 --> 00:06:13,610
Up here you can see the data that I
have associated with my simple location.

114
00:06:13,610 --> 00:06:15,640
I had a latitude and a longitude.

115
00:06:15,640 --> 00:06:19,570
And I'll represent both of these
using double type variables.

116
00:06:19,570 --> 00:06:21,920
These are what are called
member variables.

117
00:06:21,920 --> 00:06:26,060
These are variables that exist throughout
the class that represent some essential

118
00:06:26,060 --> 00:06:32,030
pieces of data that I need to represent
my simple location in this case.

119
00:06:32,030 --> 00:06:34,820
And notice that they're declared
outside of any methods, but

120
00:06:34,820 --> 00:06:37,810
inside the declaration of the class.

121
00:06:37,810 --> 00:06:39,870
So, they come after that
open curly brace for

122
00:06:39,870 --> 00:06:42,430
the class, but
not inside any particular method.

123
00:06:44,260 --> 00:06:47,450
My class also has some
methods associated with it.

124
00:06:47,450 --> 00:06:50,620
So it has, for example, that method
that you see down there at the bottom.

125
00:06:50,620 --> 00:06:53,870
The distance method, and
what the distance method does is,

126
00:06:53,870 --> 00:06:59,120
it takes some other simple location out in
the world as a parameter, and it returns

127
00:06:59,120 --> 00:07:03,820
the distance between on simple location
and the simple location that's passed in.

128
00:07:03,820 --> 00:07:05,370
So that's something that my class can do.

129
00:07:07,000 --> 00:07:08,060
So these are the methods.

130
00:07:08,060 --> 00:07:09,590
These are the things that my class can do.

131
00:07:09,590 --> 00:07:14,390
And I want to zero in now on this
special method called the constructor.

132
00:07:14,390 --> 00:07:15,880
So this is the constructor, and

133
00:07:15,880 --> 00:07:21,230
this is a special method that gets
called when my objects get created.

134
00:07:21,230 --> 00:07:25,170
So when I ask Java to give me a new
object of type SimpleLocation,

135
00:07:25,170 --> 00:07:28,420
it's going to call this method here,
which is called the constructor.

136
00:07:28,420 --> 00:07:31,407
And the reason you know
it's the constructor,

137
00:07:31,407 --> 00:07:35,588
is that it doesn't have a return type,
so it simply says public and

138
00:07:35,588 --> 00:07:40,950
then next word in the declaration of this
method is just the name of the class.

139
00:07:40,950 --> 00:07:44,850
So public, SimpleLocation,
that's my constructor.

140
00:07:44,850 --> 00:07:47,430
This constructor happens
to take two arguments.

141
00:07:47,430 --> 00:07:50,410
And it takes the values of those
arguments that are passed in and

142
00:07:50,410 --> 00:07:54,550
stores them away in those member
variables, latitude and longitude.

143
00:07:54,550 --> 00:07:56,402
Now you might see this key word, this.

144
00:07:56,402 --> 00:07:57,270
This dot latitude.

145
00:07:57,270 --> 00:07:58,200
This dot longitude.

146
00:07:58,200 --> 00:07:59,640
You might be wondering what is is.

147
00:07:59,640 --> 00:08:01,820
We're gonna talk about that
in just a couple of minutes.

148
00:08:03,490 --> 00:08:08,050
So all of this together is my
class declaration, SimpleLocation.

149
00:08:08,050 --> 00:08:10,540
Class has two member variables and
couple of methods.

150
00:08:10,540 --> 00:08:14,300
And again,
it's in the file SimpleLocation.java.

151
00:08:14,300 --> 00:08:16,020
So now, how do I use this class?

152
00:08:16,020 --> 00:08:18,630
Let's take a look at some
code that actually creates

153
00:08:18,630 --> 00:08:21,200
objects of type simple locations and
does something with them.

154
00:08:22,630 --> 00:08:25,340
So now I'm gonna go over into
a totally different file.

155
00:08:25,340 --> 00:08:28,900
I'm gonna go into a file
called LocationTester.java.

156
00:08:28,900 --> 00:08:34,240
Inside a totally different class, because
everything in Java has to be in a class,

157
00:08:34,240 --> 00:08:36,960
and I'm gonna look at a main
method inside that class.

158
00:08:36,960 --> 00:08:38,400
This main method is fairly simple.

159
00:08:38,400 --> 00:08:40,480
It just has three lines of code.

160
00:08:40,480 --> 00:08:43,090
And the first two lines
of code are creating

161
00:08:43,090 --> 00:08:46,760
new objects of this type SimpleLocation,
the class that I just wrote.

162
00:08:47,830 --> 00:08:52,050
So, you can see here that I declare
two new variables, ucsd and lima.

163
00:08:52,050 --> 00:08:54,900
And I'm creating two new
SimpleLocation objects

164
00:08:54,900 --> 00:08:58,310
to represent the location of where
I'm standing here at UC San Diego.

165
00:08:58,310 --> 00:09:01,590
And then the location of Lima, Peru.

166
00:09:01,590 --> 00:09:05,370
When I call new, and
then say SimpleLocation, and

167
00:09:05,370 --> 00:09:08,220
then have the parentheses
in passing those arguments.

168
00:09:08,220 --> 00:09:12,770
What that's doing is, that's going over
into the SimpleLocation class definition

169
00:09:12,770 --> 00:09:14,390
and calling the constructor.

170
00:09:14,390 --> 00:09:18,166
So those arguments you saw being passed
in, those are gonna go in as arguments.

171
00:09:18,166 --> 00:09:20,060
To this constructor,

172
00:09:20,060 --> 00:09:26,840
which is going to store those values away
inside the object that just got created.

173
00:09:26,840 --> 00:09:30,750
So I call the constructor twice,
I get two new objects.

174
00:09:30,750 --> 00:09:35,070
Then I can use those objects in
some code like I do down here.

175
00:09:35,070 --> 00:09:39,420
So, what I'm doing here is,
I'm taking my ucsd SimpleLocation object.

176
00:09:39,420 --> 00:09:41,790
And I'm calling the distance method on it,

177
00:09:41,790 --> 00:09:45,920
passing it in the SimpleLocation object
that represents the location of Lima.

178
00:09:45,920 --> 00:09:48,360
So let's take a look at how that works.

179
00:09:48,360 --> 00:09:49,600
When I call that method,

180
00:09:49,600 --> 00:09:53,945
it's going to invoke this method distance
that's inside the class SimpleLocation.

181
00:09:55,430 --> 00:09:55,950
All right.
So

182
00:09:55,950 --> 00:09:58,500
let's look in a little bit more
detail what's going on here, so

183
00:09:58,500 --> 00:10:02,650
we can understand the difference
between UCSD and Lima.

184
00:10:02,650 --> 00:10:05,270
So when I call ucsd.distance and

185
00:10:05,270 --> 00:10:10,190
pass in the parameter lima, like I
mentioned before, it invokes that method

186
00:10:10,190 --> 00:10:14,520
called distance inside the SimpleLocation
class, which you can see right here.

187
00:10:14,520 --> 00:10:17,818
Now I'm showing you just a little bit of
what the body of that method might look

188
00:10:17,818 --> 00:10:20,750
like, so
that I can illustrate a couple of points.

189
00:10:20,750 --> 00:10:24,440
We're comparing the distance
between two SimpleLocation objects.

190
00:10:24,440 --> 00:10:28,800
One of those objects, lima, is past in
as an argument to the function, and

191
00:10:28,800 --> 00:10:31,570
that's gonna be stored in the parameter,
other.

192
00:10:31,570 --> 00:10:36,270
So I can see that other is used
inside the body of the method

193
00:10:36,270 --> 00:10:38,980
when I get its latitude and its longitude.

194
00:10:38,980 --> 00:10:41,230
But what happened to ucsd?

195
00:10:41,230 --> 00:10:43,690
How are we getting the latitude and
longitude of ucsd?

196
00:10:44,870 --> 00:10:47,640
That's where the keyword, this, comes in.

197
00:10:47,640 --> 00:10:52,380
This refers to the calling object, which
is the object that called the method,

198
00:10:52,380 --> 00:10:54,550
or on which the method was called.

199
00:10:54,550 --> 00:11:00,010
So in this line of code, ucsd dot
distance and then pass in lima UCSD

200
00:11:00,010 --> 00:11:04,930
is called the calling object because it's
the object that occurs before that dot.

201
00:11:06,020 --> 00:11:12,190
So when I'm inside this method,
this will refer to the location of UCSD.

202
00:11:13,230 --> 00:11:17,370
So that way I can get the latitude and
longitude of where I'm standing

203
00:11:17,370 --> 00:11:21,710
here at UCSD, and compare it to
the latitude and longitude of Lima, Peru.

204
00:11:21,710 --> 00:11:22,610
and return the distance.

205
00:11:24,080 --> 00:11:27,420
Putting it all together,
when I run this code by compiling it and

206
00:11:27,420 --> 00:11:32,410
running it, I see that distance between
where I'm standing now, and Lima, Peru,

207
00:11:32,410 --> 00:11:34,910
is approximately 6,568 kilometers.

208
00:11:34,910 --> 00:11:38,650
So those are some objects basics.

209
00:11:38,650 --> 00:11:42,500
In the next couple videos, we'll introduce
you to some more subtle details and

210
00:11:42,500 --> 00:11:45,260
interesting things you can do when
creating classes and objects.