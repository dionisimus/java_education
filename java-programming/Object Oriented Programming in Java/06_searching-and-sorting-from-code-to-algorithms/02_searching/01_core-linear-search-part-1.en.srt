1
00:00:00,076 --> 00:00:03,897
[MUSIC]

2
00:00:03,897 --> 00:00:07,004
All right, in this lesson we're
gonna learn some core algorithms for

3
00:00:07,004 --> 00:00:08,450
searching for data.

4
00:00:08,450 --> 00:00:12,490
Searching for data you probably
do every day, many times a day.

5
00:00:12,490 --> 00:00:15,910
And so we're gonna focus on some of the
fundamentals of how to search for data and

6
00:00:15,910 --> 00:00:17,410
how to do that quickly.

7
00:00:17,410 --> 00:00:18,490
So by the end of this video,

8
00:00:18,490 --> 00:00:22,470
you're going to be able to motivate
why we want to search for data.

9
00:00:22,470 --> 00:00:26,130
As well as to be able to write
code to perform linear search, and

10
00:00:26,130 --> 00:00:28,800
then we'll build on this
in subsequent videos.

11
00:00:28,800 --> 00:00:31,030
So let's start off with
a motivating example.

12
00:00:31,030 --> 00:00:33,310
Say I'm going on a trip, which I am.

13
00:00:33,310 --> 00:00:38,150
I'm going on a trip and I wanna plan my
airline travel, and in order to do so,

14
00:00:38,150 --> 00:00:39,850
if you've booked airline tickets online,

15
00:00:39,850 --> 00:00:43,320
you probably know that those
airline ticket booking sites

16
00:00:43,320 --> 00:00:47,450
use a three letter code for the airport
that you're trying to book from.

17
00:00:47,450 --> 00:00:49,840
So I'm coming from my
hometown of San Diego and

18
00:00:49,840 --> 00:00:53,920
I wanna figure out what is the three
letter code for the airport in San Diego.

19
00:00:53,920 --> 00:00:56,610
So there's a lot of ways I
can find this information.

20
00:00:56,610 --> 00:01:00,120
And probably one of the most popular ways
is I can go to my favorite search engine

21
00:01:00,120 --> 00:01:03,670
like Google and
type in this query into Google and

22
00:01:03,670 --> 00:01:06,440
Google will go off and
search the information that's on the web

23
00:01:06,440 --> 00:01:10,150
to find me a page that will
hopefully answer my question.

24
00:01:10,150 --> 00:01:12,890
Now, this is an example of search.

25
00:01:12,890 --> 00:01:15,410
In fact an Internet search
is a fairly complex search.

26
00:01:15,410 --> 00:01:18,980
So there's a lot going on here in
order to organize all the data and

27
00:01:18,980 --> 00:01:20,730
return me results quickly.

28
00:01:20,730 --> 00:01:23,240
Results that I find useful and
so on and so forth.

29
00:01:23,240 --> 00:01:27,290
So this kind of search is a little
bit beyond the scope of this course.

30
00:01:27,290 --> 00:01:28,970
But the idea is the same.

31
00:01:28,970 --> 00:01:33,490
We have a big repository of data and
I wanna find some information

32
00:01:33,490 --> 00:01:36,540
in that data in order to answer
some questions about it.

33
00:01:36,540 --> 00:01:40,630
This is kind of fundamental to almost
everything that we do in Computer Science.

34
00:01:40,630 --> 00:01:43,160
So, let's simplify the problem slightly.

35
00:01:43,160 --> 00:01:45,230
Instead of searching the entire Internet,

36
00:01:45,230 --> 00:01:49,150
I'm gonna take a subset of the data
on the Internet, a very small subset.

37
00:01:49,150 --> 00:01:52,490
That I can find in a file
called airports.dat,

38
00:01:52,490 --> 00:01:56,320
which is on the website,
whose url that you see here.

39
00:01:56,320 --> 00:01:58,390
And, this file has information about,

40
00:01:58,390 --> 00:02:02,390
almost, 7,000 different
airports around the world.

41
00:02:02,390 --> 00:02:05,680
And it's represented in terms
of a number of different fields.

42
00:02:05,680 --> 00:02:09,470
So each line in the file has a number
of different comma separated fields.

43
00:02:09,470 --> 00:02:13,960
Those fields include a unique ID inside
this database, the name of the airport,

44
00:02:13,960 --> 00:02:18,010
the name of the city that the airport is
located in, the name of the country, and

45
00:02:18,010 --> 00:02:20,520
that three letter airport code.

46
00:02:20,520 --> 00:02:23,280
And a bunch of other information
as well which you can find out by

47
00:02:23,280 --> 00:02:24,970
going to that URL.

48
00:02:24,970 --> 00:02:28,870
So I'm gonna be searching within
this lesson in only this data,

49
00:02:28,870 --> 00:02:30,015
not on the whole Internet.

50
00:02:30,015 --> 00:02:34,710
So, what I'm going to do is, I'm going
to read in all of this data into my Java

51
00:02:34,710 --> 00:02:39,430
program, and then I'll search for
a particular city that I care about, in

52
00:02:39,430 --> 00:02:43,500
order to find out some information about
its airport, like its three letter code.

53
00:02:43,500 --> 00:02:46,560
So here's the first step that I
need in order to read in this data

54
00:02:46,560 --> 00:02:48,080
into my program.

55
00:02:48,080 --> 00:02:49,940
I need some way to represent this data.

56
00:02:49,940 --> 00:02:50,990
So we know how to do that.

57
00:02:50,990 --> 00:02:53,930
We know how to write classes and
create instances of those classes, so

58
00:02:53,930 --> 00:02:55,010
let's do that.

59
00:02:55,010 --> 00:02:56,720
Let's write a class called Airport.

60
00:02:56,720 --> 00:02:58,090
And it's going to have a field for

61
00:02:58,090 --> 00:03:01,870
each piece of information we wanna
represent about a particular airport.

62
00:03:01,870 --> 00:03:06,690
In this case, we'll represent a city,
a country, and that three-letter code,

63
00:03:06,690 --> 00:03:11,260
as well as whatever information we
want to keep about our airport.

64
00:03:11,260 --> 00:03:13,280
Each of these fields is
going to be private.

65
00:03:13,280 --> 00:03:16,340
As I mentioned, a rule of thumb is
to keep all of our data private, but

66
00:03:16,340 --> 00:03:20,230
we'll provide getters, so we can access
each of those pieces of information.

67
00:03:20,230 --> 00:03:23,540
They'll get set in the constructor when
I read in the data from this file.

68
00:03:23,540 --> 00:03:26,646
And then I have access to all of
these pieces of information for

69
00:03:26,646 --> 00:03:29,810
each airport that's stored in my program.

70
00:03:29,810 --> 00:03:31,060
So let's imagine that I've done that.

71
00:03:31,060 --> 00:03:34,740
I've written some code that reads in this
file that has all this information about

72
00:03:34,740 --> 00:03:37,730
these airports into my
Java program by creating

73
00:03:37,730 --> 00:03:41,700
one instance of this airport class for
each airport in that file.

74
00:03:41,700 --> 00:03:43,850
I'm gonna simplify things a lot.

75
00:03:43,850 --> 00:03:48,370
And I'm gonna imagine that my entire
file only had eight airports in it.

76
00:03:48,370 --> 00:03:50,570
So I'll read those all into,

77
00:03:50,570 --> 00:03:54,710
each into an individual airport object
which I'm going to store in an array.

78
00:03:54,710 --> 00:03:57,380
So my array is going
to be called airports.

79
00:03:57,380 --> 00:04:00,840
It's an array of references
to airport objects.

80
00:04:00,840 --> 00:04:03,170
So one object for each airport.

81
00:04:03,170 --> 00:04:04,890
And what's stored in the array again,

82
00:04:04,890 --> 00:04:09,830
is a reference to this object which you
see depicted here in the blue boxes.

83
00:04:09,830 --> 00:04:13,940
And those objects exist somewhere in your
computers memory, somewhere in the heap.

84
00:04:13,940 --> 00:04:18,209
And again, what could store in the array
is the references to those objects.

85
00:04:18,209 --> 00:04:21,274
But this diagram is a little bit too
complicated for my needs for this lesson.

86
00:04:21,274 --> 00:04:25,099
So I'm gonna simplify things a little bit
by writing all of the information from

87
00:04:25,099 --> 00:04:28,250
each object directly in the box for
the array itself.

88
00:04:28,250 --> 00:04:31,100
So this is going to be my representation
of the data that I've now read

89
00:04:31,100 --> 00:04:35,700
into my computers memory from
that big airports.dat file.

90
00:04:35,700 --> 00:04:39,358
And again, there's a very simplified
version for the purpose of illustration.

91
00:04:39,358 --> 00:04:43,360
So now, I've got all the data about all
my airports right into my array and now,

92
00:04:43,360 --> 00:04:47,360
I can write a program to answer questions
about the airports in that array.

93
00:04:47,360 --> 00:04:50,700
And in order to answer a question
about a particular city's airport,

94
00:04:50,700 --> 00:04:53,390
I have to find that airport object first.

95
00:04:53,390 --> 00:04:54,520
So, let's look at how to do that.

96
00:04:56,180 --> 00:04:59,490
So let's say I'm looking for
information about the Beijing airport.

97
00:04:59,490 --> 00:05:04,140
And I wanna find out what is the three
letter city code of that airport Beijing.

98
00:05:04,140 --> 00:05:05,860
So, how am I gonna do this?

99
00:05:05,860 --> 00:05:07,840
Well, first I need to find it.

100
00:05:07,840 --> 00:05:11,820
One way I can do that is just basically by
starting at the beginning of my array and

101
00:05:11,820 --> 00:05:13,550
looking at each element in my array,

102
00:05:13,550 --> 00:05:17,930
one after the next until I come
across the airport I'm looking for.

103
00:05:17,930 --> 00:05:21,230
Or I get to the end of my array and
I haven't found it.

104
00:05:21,230 --> 00:05:23,150
And that's an algorithm
called Linear Search,

105
00:05:23,150 --> 00:05:25,160
which we're going to look at right now.

106
00:05:25,160 --> 00:05:27,670
The way it works, is I start at
the beginning of my array, so

107
00:05:27,670 --> 00:05:30,850
I start at index position zero,
which is the fist index in my array.

108
00:05:31,850 --> 00:05:34,238
And then I'm gonna look at
the element in that index.

109
00:05:34,238 --> 00:05:37,880
And I'm gonna ask is this a match for
the thing that I'm looking for?

110
00:05:37,880 --> 00:05:41,770
In this case I'll ask is the string to
find which is the name of the city I'm

111
00:05:41,770 --> 00:05:42,910
trying to find,

112
00:05:42,910 --> 00:05:47,830
equal to the city field in the objects
that's located in that array position?

113
00:05:47,830 --> 00:05:52,240
And in this case I'll see that Montreal is
city in the object at position zero and

114
00:05:52,240 --> 00:05:55,720
Beijing is the city I'm looking for,
those two strings are not the same, so

115
00:05:55,720 --> 00:05:57,150
there's no match.

116
00:05:57,150 --> 00:06:01,340
I'll go on to the next element in my
array by incrementing index by one, so

117
00:06:01,340 --> 00:06:04,590
now I look at the element in position one,
is that a match?

118
00:06:04,590 --> 00:06:08,690
Compare the cities, again I find
that's not a match, so I'll continue.

119
00:06:08,690 --> 00:06:11,120
Here's the index position two.

120
00:06:11,120 --> 00:06:11,880
Match?

121
00:06:11,880 --> 00:06:13,670
Nope.
Still not a match.

122
00:06:13,670 --> 00:06:15,110
Index position three.

123
00:06:15,110 --> 00:06:17,000
Still not match.

124
00:06:17,000 --> 00:06:18,540
Index position four.

125
00:06:18,540 --> 00:06:22,730
Finally, I look index position four and
I see that its city is Beijing,

126
00:06:22,730 --> 00:06:25,490
which exactly matches the city
that I'm looking for.

127
00:06:25,490 --> 00:06:28,710
So now I've found the airport
object in question.

128
00:06:28,710 --> 00:06:33,300
And I can use it to answer the question of
what is a three letter code for Beijing?

129
00:06:33,300 --> 00:06:36,380
So I read that out of the entry and
I can return it to my user.

130
00:06:38,130 --> 00:06:39,762
So this is a match and we're done.

131
00:06:42,303 --> 00:06:45,580
That in a nutshell is
the algorithm called LinearSearch.

132
00:06:45,580 --> 00:06:48,120
And here's how it looks
like in Pseudocode.

133
00:06:48,120 --> 00:06:52,488
So in the beginning we initialize the
index variable to the start of our array,

134
00:06:52,488 --> 00:06:56,630
and then we're gonna have a loop that
keeps going as long as we haven't found

135
00:06:56,630 --> 00:06:59,380
what we're looking for,
in which case we'd just return it.

136
00:06:59,380 --> 00:07:02,930
Or we get to the end of the array in which
case we conclude that the element is not

137
00:07:02,930 --> 00:07:04,230
in our array.

138
00:07:04,230 --> 00:07:07,460
So while our index is not equal
to the length of our array,

139
00:07:07,460 --> 00:07:10,030
while it's less than
the length of our array.

140
00:07:10,030 --> 00:07:13,500
We'll look at the element in
the particular position where index is

141
00:07:13,500 --> 00:07:15,930
referencing, where index
says we should look,

142
00:07:15,930 --> 00:07:19,390
see if the city in that element
matches the city we're trying to find.

143
00:07:20,470 --> 00:07:24,470
If it does, we'll return the three-letter
code, thus breaking the loop and

144
00:07:24,470 --> 00:07:27,870
breaking the whole method,
basically returning out of that method.

145
00:07:27,870 --> 00:07:31,720
Otherwise we'll keep going by incrementing
our index variable by one and

146
00:07:31,720 --> 00:07:33,670
going back to the top of the loop.

147
00:07:33,670 --> 00:07:37,010
When the loop ends we can conclude that
the city we were looking for was not in

148
00:07:37,010 --> 00:07:40,510
the array at all and we return some value
to indicate that we didn't find it.

149
00:07:42,300 --> 00:07:42,890
Okay.

150
00:07:42,890 --> 00:07:44,910
So now it's your turn.

151
00:07:44,910 --> 00:07:47,350
This is an interactive piece of the video.

152
00:07:47,350 --> 00:07:48,971
I want you to pause the video.

153
00:07:48,971 --> 00:07:53,270
And I want you to get out either
a piece of paper and a pencil, or

154
00:07:53,270 --> 00:07:57,819
better yet, just open up a clips and
go ahead and write the code for

155
00:07:57,819 --> 00:08:00,998
LinearSearch before you unpause the video.

156
00:08:00,998 --> 00:08:03,540
Once you unpause the video,
we'll go back over it.

157
00:08:03,540 --> 00:08:07,170
But I really do want you to take a shot
at going back to the algorithm that

158
00:08:07,170 --> 00:08:10,500
you just saw, going back to
the example and writing out this code.

159
00:08:10,500 --> 00:08:11,260
See if you can do it.

160
00:08:11,260 --> 00:08:11,760
I bet you can.