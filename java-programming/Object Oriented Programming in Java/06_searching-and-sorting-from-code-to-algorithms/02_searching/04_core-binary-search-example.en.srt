1
00:00:00,000 --> 00:00:03,793
[MUSIC]

2
00:00:03,793 --> 00:00:07,228
So let's trace through an example of
a city that's not actually in this list

3
00:00:07,228 --> 00:00:09,160
to see when we should
stop the while loop and

4
00:00:09,160 --> 00:00:12,350
conclude that the city is not
actually in the list at all.

5
00:00:12,350 --> 00:00:14,560
And the city I'm going to use is Istanbul.

6
00:00:14,560 --> 00:00:18,100
So let's go ahead and run the algorithm
looking for that city, Istanbul.

7
00:00:18,100 --> 00:00:22,260
I start with a low of zero, high of seven,
and that midpoint is three.

8
00:00:22,260 --> 00:00:23,670
So I look in position three.

9
00:00:23,670 --> 00:00:26,000
I see the city Essen, not Istanbul.

10
00:00:26,000 --> 00:00:28,670
Istanbul comes alphabetically after Essen.

11
00:00:28,670 --> 00:00:33,160
So I look in the greater half of the list,
by moving my low up to be mid plus one.

12
00:00:33,160 --> 00:00:37,670
I'm gonna calculate a new mid value,
look in the middle of that list.

13
00:00:37,670 --> 00:00:38,800
I see Montreal.

14
00:00:38,800 --> 00:00:40,480
Montreal is not equal to Istanbul.

15
00:00:40,480 --> 00:00:43,070
Istanbul is alphabetically
less than Montreal.

16
00:00:43,070 --> 00:00:45,060
So I will again adjust
my range appropriately.

17
00:00:46,360 --> 00:00:47,830
Now I am down to just one element.

18
00:00:47,830 --> 00:00:51,490
I have a range that includes only one
element so high and low are the same.

19
00:00:51,490 --> 00:00:52,850
But that's okay, that's no problem.

20
00:00:52,850 --> 00:00:55,660
This is still a valid
element that we can look at.

21
00:00:55,660 --> 00:00:57,400
This element is Lagos.

22
00:00:57,400 --> 00:00:59,650
And it is not equal to Istanbul, so

23
00:00:59,650 --> 00:01:03,590
I again conclude that I
need to move my range.

24
00:01:03,590 --> 00:01:07,350
And in this case Istanbul is
alphabetically before Lagos, so

25
00:01:07,350 --> 00:01:11,440
I'll change my high value to be one less
than mid, in this case making it three.

26
00:01:13,100 --> 00:01:14,630
But now I'm kind of stuck.

27
00:01:14,630 --> 00:01:17,910
If you look at the array,
all the elements are grayed out, so

28
00:01:17,910 --> 00:01:21,530
I've effectively ruled out every
single element in this array.

29
00:01:21,530 --> 00:01:23,510
So how can the computer know this?

30
00:01:23,510 --> 00:01:25,810
Well, let's look down at our low and
our high values.

31
00:01:25,810 --> 00:01:28,300
And something kind of funny has happened.

32
00:01:28,300 --> 00:01:30,420
Low is four, but high is three.

33
00:01:30,420 --> 00:01:34,060
So our low has actually gotten to
be greater than our high value,

34
00:01:34,060 --> 00:01:37,010
which indicates to our algorithm,
essentially,

35
00:01:37,010 --> 00:01:40,190
that we've exhausted all of
the range that we can look at.

36
00:01:40,190 --> 00:01:43,040
So we've squeezed our range so
tightly, the high and

37
00:01:43,040 --> 00:01:46,210
low have actually switched places and
we're out of places to look.

38
00:01:46,210 --> 00:01:49,170
So at that point, we can conclude that
the element that we're looking for

39
00:01:49,170 --> 00:01:52,720
is not actually in the array and
we can simply return this null value,

40
00:01:52,720 --> 00:01:57,150
indicating we didn't find it.

41
00:01:57,150 --> 00:01:58,540
Now it's your turn again.

42
00:01:58,540 --> 00:02:01,130
Go ahead and finish off this code.

43
00:02:01,130 --> 00:02:04,380
I'm showing you a skeleton code here for
that binary search algorithm,

44
00:02:04,380 --> 00:02:07,490
and you can go back to the algorithm and
compare it to this code.

45
00:02:07,490 --> 00:02:09,300
One thing I'll point out is this method,

46
00:02:09,300 --> 00:02:12,490
compareTo, that you might
not have seen before.

47
00:02:12,490 --> 00:02:17,210
What compareTo does is, it compares
a parameter object to a calling object.

48
00:02:17,210 --> 00:02:20,340
In this case, it will compare
the city name that we're looking

49
00:02:20,340 --> 00:02:24,170
at in that airport object
to the toFind city name.

50
00:02:25,260 --> 00:02:30,940
And it will return negative
one if the calling object,

51
00:02:30,940 --> 00:02:35,540
so in this case toFind or
Istanbul is less than,

52
00:02:35,540 --> 00:02:42,070
alphabetically less than the city object
in the airport, so the parameter object.

53
00:02:42,070 --> 00:02:45,750
And we'll return zero if
they're the same string and

54
00:02:45,750 --> 00:02:50,200
it will return positive one if the city
we're looking for, the toFind is

55
00:02:50,200 --> 00:02:53,710
alphabetically greater than the city
that we passed in as the parameter.

56
00:02:54,960 --> 00:02:58,740
So we can use that to make our
choice about whether we should go

57
00:02:58,740 --> 00:03:00,660
look at the smaller end of the array or

58
00:03:00,660 --> 00:03:04,380
the larger end of the array, or
If in fact were actually done.

59
00:03:04,380 --> 00:03:06,880
So use that information
to complete this code,

60
00:03:06,880 --> 00:03:09,540
pause the video and I'll pick up
with you again in just a minute.

61
00:03:12,280 --> 00:03:13,530
All right, welcome back.

62
00:03:13,530 --> 00:03:14,640
Let's fill in this code.

63
00:03:14,640 --> 00:03:18,335
There's not too much you have to write,
just have to write what happens in those

64
00:03:18,335 --> 00:03:21,840
three conditions, depending on where
the thing you're trying to find is,

65
00:03:21,840 --> 00:03:25,070
relative to that mid location
that you're looking at.

66
00:03:25,070 --> 00:03:28,780
So, in the first case there,
that if compares less then zero.

67
00:03:28,780 --> 00:03:31,800
What that's saying is that the element
we're trying to find, the city name we're

68
00:03:31,800 --> 00:03:36,840
trying to find is alphabetically less then
the element we're looking at in our array.

69
00:03:36,840 --> 00:03:38,500
So we need to adjust our range, so

70
00:03:38,500 --> 00:03:42,080
it's in the lower half of the range
we were previously looking at.

71
00:03:42,080 --> 00:03:44,860
That means we need to bring high down.

72
00:03:44,860 --> 00:03:49,910
So let's change our variable high so
that it's down at mid.

73
00:03:49,910 --> 00:03:50,960
But not just at mid,

74
00:03:50,960 --> 00:03:54,780
it actually needs to be one less than
mid because we already looked at mid.

75
00:03:54,780 --> 00:03:57,470
So we'll subtract one from mid and
that's our new value of high,

76
00:03:57,470 --> 00:03:59,220
and then the loop's ready to start again.

77
00:04:00,450 --> 00:04:03,800
But if compare is greater than zero, that
means the thing we're trying to find is

78
00:04:03,800 --> 00:04:07,140
alphabetically greater than
the thing we're looking at at mid.

79
00:04:07,140 --> 00:04:09,260
So we need to adjust our range up.

80
00:04:09,260 --> 00:04:11,870
In that case,
we need to change our low variable.

81
00:04:11,870 --> 00:04:15,688
So we'll change it to be equal to mid + 1.

82
00:04:15,688 --> 00:04:21,370
And if neither those things are true that
means that compare is equal to zero.

83
00:04:21,370 --> 00:04:24,190
Which means we've found th
element that we're looking for.

84
00:04:24,190 --> 00:04:27,530
In which case, we can just return
that three letter airport code.

85
00:04:27,530 --> 00:04:34,044
That's all we need to do here
in the else statement is

86
00:04:34,044 --> 00:04:42,966
return airports[mid].getcode().

87
00:04:42,966 --> 00:04:44,070
And that's it.

88
00:04:44,070 --> 00:04:46,820
That's the complete code, and there you
can see it a little bit cleaned up.

89
00:04:47,890 --> 00:04:51,290
Now I just want to make one
small comment about this code.

90
00:04:51,290 --> 00:04:54,840
Most people if you show them this code
if they're sophisticated programmers,

91
00:04:54,840 --> 00:04:55,870
they kind of cringe.

92
00:04:55,870 --> 00:04:57,810
They'd say, ooh,
there's kind of a problem here.

93
00:04:57,810 --> 00:04:59,440
It's not really a functional problem.

94
00:04:59,440 --> 00:05:04,450
It's going to work correctly most of
the time except when your data is very,

95
00:05:04,450 --> 00:05:08,070
very large and your numbers for
high and low get very,

96
00:05:08,070 --> 00:05:10,980
very large if your array is really,
really big.

97
00:05:10,980 --> 00:05:12,870
What's gonna happen is
when you add high and

98
00:05:12,870 --> 00:05:16,070
low together,
it's gonna do something called overflow.

99
00:05:16,070 --> 00:05:21,050
You're gonna get a number that's so big
that you can't represent it, essentially,

100
00:05:21,050 --> 00:05:23,690
in Java in an integer value.

101
00:05:23,690 --> 00:05:28,090
So we can help guard against that
situation by instead of adding high and

102
00:05:28,090 --> 00:05:32,510
low together and then dividing by two,
what we really should be doing instead

103
00:05:32,510 --> 00:05:37,480
is subtracting low from high to get the
range we're talking about, dividing that

104
00:05:37,480 --> 00:05:42,360
value by two and then adding it to our low
to get it back into the correct range.

105
00:05:42,360 --> 00:05:44,730
So that's a better way to write this code.

106
00:05:44,730 --> 00:05:47,830
The other way will work as long as
your numbers don't get too big but,

107
00:05:47,830 --> 00:05:50,670
to be a sophisticated programmer
start getting in the habit of

108
00:05:50,670 --> 00:05:51,860
thinking about things like this.

109
00:05:51,860 --> 00:05:55,510
You don't ever want your integer values
to get too big, when you can help it.

110
00:05:57,640 --> 00:06:01,580
So let's end going back to
these same thought questions.

111
00:06:01,580 --> 00:06:05,110
So, we said before,
in a linear search if we get unlucky

112
00:06:05,110 --> 00:06:10,040
we're gonna have to look through
every single element in our array and

113
00:06:10,040 --> 00:06:12,650
if there are a lot of elements in
our array, like there are a lot of

114
00:06:12,650 --> 00:06:17,500
words in the dictionary, that can be
a very, very slow, cumbersome process.

115
00:06:17,500 --> 00:06:20,000
So, binary search is going
to improve on that a lot.

116
00:06:20,000 --> 00:06:22,450
So, you notice when we were
tracing through the algorithm, and

117
00:06:22,450 --> 00:06:26,050
when I was looking through the dictionary,
that I could eliminate essentially half of

118
00:06:26,050 --> 00:06:29,410
the remaining choices,
without even looking at them.

119
00:06:29,410 --> 00:06:33,230
Every step through the loop,
that was great.

120
00:06:33,230 --> 00:06:37,460
And if I do this process repeatedly, what
I'm doing is I'm dividing the number of

121
00:06:37,460 --> 00:06:40,340
things I have to look
at in half every time.

122
00:06:40,340 --> 00:06:44,490
So I divide my original numbers in half,
I have half as many.

123
00:06:44,490 --> 00:06:46,590
I divide that in half, half as many again.

124
00:06:46,590 --> 00:06:47,460
And half and half and

125
00:06:47,460 --> 00:06:52,070
half and half until I get down to just
a single element that I'm looking at.

126
00:06:52,070 --> 00:06:55,500
And, it turns that the way
the function that expresses,

127
00:06:55,500 --> 00:06:59,710
that half-half-half-half
function is the logarithm.

128
00:06:59,710 --> 00:07:01,730
It's the logarithm base two.

129
00:07:01,730 --> 00:07:06,280
So, if I compare the function that
represents the number of elements that I

130
00:07:06,280 --> 00:07:09,620
have to look at in linear search
which is just equal to n,

131
00:07:09,620 --> 00:07:14,530
the number of elements that I have in
my ray to that log base to n function.

132
00:07:14,530 --> 00:07:18,870
I can see that these two
functions behave very differently.

133
00:07:18,870 --> 00:07:25,950
So when my n is fairly small, say two,
32, 1024 my log is also quite small.

134
00:07:25,950 --> 00:07:29,710
But you know the two values
aren't horribly different.

135
00:07:29,710 --> 00:07:32,530
But as n gets very, very large,

136
00:07:32,530 --> 00:07:37,490
you can see that a huge difference
emerges between these two values.

137
00:07:37,490 --> 00:07:39,870
N grows, and it can get pretty darn big.

138
00:07:39,870 --> 00:07:41,190
So it can get into the billions.

139
00:07:41,190 --> 00:07:44,270
There are about 7.2, 7.4,

140
00:07:44,270 --> 00:07:49,170
depending on when you're watching this
video, billion people on the planet.

141
00:07:50,220 --> 00:07:54,280
So, if you think about that in terms of N,
7.2 billion.

142
00:07:54,280 --> 00:08:01,850
And log N, which really isn't that much
more than 30, that's a huge difference.

143
00:08:01,850 --> 00:08:04,730
And so, these numbers are really gonna
make a difference when we're talking

144
00:08:04,730 --> 00:08:06,820
about extremely large data.

145
00:08:06,820 --> 00:08:11,705
So that's our first taste of comparing
basically how long these algorithms

146
00:08:11,705 --> 00:08:12,772
take to run, and

147
00:08:12,772 --> 00:08:17,517
you're gonna see much more of that in
the next couple lessons on sorting.