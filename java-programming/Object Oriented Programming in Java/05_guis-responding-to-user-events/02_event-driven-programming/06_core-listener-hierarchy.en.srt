1
00:00:00,050 --> 00:00:06,602
[SOUND] In this video, we're going to
tie together the notions of events and

2
00:00:06,602 --> 00:00:10,762
listening for
user inputs with the inheritance

3
00:00:10,762 --> 00:00:15,030
hierarchy in class design
in a close-knit way.

4
00:00:15,030 --> 00:00:18,530
So by the end of the video, what you'll
be able to do is use the language of UML

5
00:00:18,530 --> 00:00:21,434
diagrams to talk about the classes
that we're working with for

6
00:00:21,434 --> 00:00:22,940
the event driven programming.

7
00:00:24,530 --> 00:00:29,160
When we think about the PApplet listening
for user input, like most clicks and

8
00:00:29,160 --> 00:00:31,030
keyboard input,

9
00:00:31,030 --> 00:00:36,410
what we're doing actually is saying
the PApplet implements two interfaces.

10
00:00:36,410 --> 00:00:37,417
PApplet is a class.

11
00:00:37,417 --> 00:00:41,527
And it implements the interface which
means that it implements the methods that

12
00:00:41,527 --> 00:00:43,991
are required by
the interface MouseListener.

13
00:00:43,991 --> 00:00:48,780
And it also, implements the methods that
are required by the interface KeyListener.

14
00:00:48,780 --> 00:00:52,080
It's fulfilling the promises
made by those interfaces.

15
00:00:52,080 --> 00:00:55,800
So let's specifically think about
MouseListener as an interface.

16
00:00:55,800 --> 00:01:01,370
The MouseListener makes a promise
that methods like mousePressed,

17
00:01:01,370 --> 00:01:04,920
mouseClicked, and
mouseReleased will be implemented.

18
00:01:04,920 --> 00:01:10,600
That we will specify what action we want
our program to take on these events and

19
00:01:10,600 --> 00:01:12,790
when these methods are called.

20
00:01:12,790 --> 00:01:18,080
And so our PApplet class implements
them in some default fashion.

21
00:01:18,080 --> 00:01:22,490
But then when we go ahead and
create a MapWithButton class,

22
00:01:22,490 --> 00:01:26,560
then we can override some of
these method implementations.

23
00:01:26,560 --> 00:01:32,330
And say, not only do we want
a mouseReleased event to react in

24
00:01:32,330 --> 00:01:37,280
a default way like zooming the map,
we also want to build in a functionality.

25
00:01:37,280 --> 00:01:40,960
So that if the mouse is released in
a particular location in the map

26
00:01:40,960 --> 00:01:43,320
we do some additional steps.

27
00:01:43,320 --> 00:01:46,550
And so what we're doing here
is we're building in yet

28
00:01:46,550 --> 00:01:48,330
another level of the class hierarchy.

29
00:01:49,660 --> 00:01:54,620
In a similar way, PApplet implements
the KeyListener interface.

30
00:01:54,620 --> 00:01:59,110
And so that means that it has to
fill in some default behaviour for

31
00:01:59,110 --> 00:02:02,940
each of the methods that are promised
by the KeyListener interface.

32
00:02:02,940 --> 00:02:04,270
So, are there other events?

33
00:02:04,270 --> 00:02:05,880
We've been talking about mouse clicks.

34
00:02:05,880 --> 00:02:07,900
We've been talking about keyboard events.

35
00:02:07,900 --> 00:02:08,874
Is that all there is?

36
00:02:08,874 --> 00:02:13,290
Well, we know there's still
a few other user interfaces.

37
00:02:13,290 --> 00:02:16,570
For example, there's multi touch
now with touch screen displays.

38
00:02:16,570 --> 00:02:20,370
But so far, that's all about the users
saying something to the program.

39
00:02:20,370 --> 00:02:23,525
There are also qualitatively
different events and

40
00:02:23,525 --> 00:02:25,790
qualitatively different listeners.

41
00:02:25,790 --> 00:02:31,205
So for example, it turns out that, the Map
object itself can act as a listener.

42
00:02:31,205 --> 00:02:34,780
Just slightly different kind of listener,
there's this

43
00:02:34,780 --> 00:02:39,290
other interface called EventListener and
the UnfoldingMap implements it.

44
00:02:39,290 --> 00:02:42,780
And what the UnfoldingMap listens for
is for

45
00:02:42,780 --> 00:02:47,350
events to do with the map itself,
like zoom and pan.

46
00:02:47,350 --> 00:02:50,940
The point of this is that
the notion of event driven program

47
00:02:52,280 --> 00:02:56,430
can be used very generally, and
can help us design programs

48
00:02:56,430 --> 00:02:59,630
that makes sense in the particular
context that we're working with.

49
00:02:59,630 --> 00:03:03,950
Sometimes it's for UI, user interface,
but other times, it's for

50
00:03:03,950 --> 00:03:06,060
interacting with more complicated objects.