1
00:00:03,103 --> 00:00:05,524
Hi, I'm Jeff Forbes.

2
00:00:05,524 --> 00:00:09,054
A computer science professor
at Duke University and

3
00:00:09,054 --> 00:00:12,030
a friend of Susan, Owen, Robert and Drew.

4
00:00:13,140 --> 00:00:17,214
I do research in computer science
education and learning analytics, but

5
00:00:17,214 --> 00:00:20,971
I also teach the data structures and
algorithms course using Java.

6
00:00:20,971 --> 00:00:25,697
I'm really excited to be able to
give guest lecture about using

7
00:00:25,697 --> 00:00:28,827
arrays to break or crack a Caesar cipher.

8
00:00:28,827 --> 00:00:31,070
A method of encryption I
know you've been studying.

9
00:00:32,580 --> 00:00:33,680
You or

10
00:00:33,680 --> 00:00:39,480
someone else has implemented a program
to encrypt text using a Caesar cipher.

11
00:00:41,880 --> 00:00:46,230
This is a very basic and historically
interesting form of decryption though,

12
00:00:46,230 --> 00:00:50,030
it's not secure giving patients or
access to a computer and

13
00:00:50,030 --> 00:00:52,040
your skills at programming.

14
00:00:52,040 --> 00:00:56,150
The concepts in cracking decipher
are useful in solving other problems too.

15
00:00:57,920 --> 00:01:02,260
A key is used to encrypt,
to shift all letters in a message.

16
00:01:02,260 --> 00:01:03,340
But how do we decrypt?

17
00:01:04,930 --> 00:01:10,347
We know that decryption must be
possible since the intended recipient

18
00:01:10,347 --> 00:01:15,503
must be able to decrypt and
read the encrypted message being sent.

19
00:01:15,503 --> 00:01:19,556
Because a shift of 26 is
the same as a shift of 0,

20
00:01:19,556 --> 00:01:24,963
encrypting with the shift of 7
followed by decrypting with a shift

21
00:01:24,963 --> 00:01:30,388
of 19 will result in a regional
message just like a shift of 26.

22
00:01:30,388 --> 00:01:32,790
How does knowing this
help us crack decipher?

23
00:01:34,650 --> 00:01:39,580
A thief or a hacker could find the key,
which is a number.

24
00:01:39,580 --> 00:01:45,220
Keys are often numbers both in the Caesar
cipher and in other forms of encryption.

25
00:01:46,310 --> 00:01:51,040
The hacker simply subtracts from 26 and
will be able to decrypt the message.

26
00:01:52,630 --> 00:01:56,630
If the hacker or
thief doesn't have the key,

27
00:01:56,630 --> 00:02:02,747
is it possible to use brute force or
some other way to crack decipher?

28
00:02:02,747 --> 00:02:05,915
Brute force means trying
every possible key.

29
00:02:05,915 --> 00:02:10,454
With a human helping, using brute force
with a Cesar cipher makes it relatively

30
00:02:10,454 --> 00:02:12,020
easy to decrypt a message.

31
00:02:13,240 --> 00:02:18,012
Suppose we intercept this message,
which is too difficult to pronounce.

32
00:02:18,012 --> 00:02:20,313
Can we tell what this message says?

33
00:02:20,313 --> 00:02:22,923
Simply by looking at it,
that seems unlikely.

34
00:02:24,775 --> 00:02:31,030
If we know the key used to encrypt this
message, we could easily decrypt it.

35
00:02:32,200 --> 00:02:34,090
But how many keys are there?

36
00:02:34,090 --> 00:02:38,030
Perhaps we can simply try them all,
that's what a brute force approach is.

37
00:02:39,480 --> 00:02:41,600
The basic idea is to try every key.

38
00:02:43,140 --> 00:02:48,418
We already have the code to encrypt
the message, we'll use every key

39
00:02:48,418 --> 00:02:53,984
from one to 26 or 25 to encrypt
the message we're trying to decrypt.

40
00:02:53,984 --> 00:02:59,498
Since the decryption shift is just 26
minus the original encryption shift,

41
00:02:59,498 --> 00:03:03,850
if we try all 26 shifts,
we'll find the original message.

42
00:03:05,805 --> 00:03:09,027
We can try every key using
this brute force approach,

43
00:03:09,027 --> 00:03:13,190
because the number of keys is small and
trying each key is fast.

44
00:03:13,190 --> 00:03:14,930
The same approach won't work for

45
00:03:14,930 --> 00:03:18,930
other forms of encryption,
because there might be too many keys.

46
00:03:18,930 --> 00:03:24,340
It's also possible that using each key
to encrypt could take a long time.

47
00:03:26,970 --> 00:03:31,770
Before we talk about an approach that's
more sophisticated than brute force,

48
00:03:31,770 --> 00:03:36,830
let's work to understand brute force
in what we call eyeball decryption.

49
00:03:38,170 --> 00:03:43,127
Our goal is to unlock or
decrypt an encrypted message.

50
00:03:43,127 --> 00:03:45,549
We don't have the key used to decrypt.

51
00:03:45,549 --> 00:03:47,608
We're not that fortunate.

52
00:03:47,608 --> 00:03:53,861
However, we do have the key used to
encrypt from the class Caesar cipher.

53
00:03:53,861 --> 00:03:57,651
Using that, we can try all 26 keys.

54
00:03:57,651 --> 00:04:01,104
To decrypt using a human or
eyeball approach,

55
00:04:01,104 --> 00:04:04,031
we'll create a CaesarCipher object.

56
00:04:04,031 --> 00:04:08,874
We'll try all 26 keys from 0 to 25.

57
00:04:08,874 --> 00:04:14,395
We'll use our CaesarCipher object,
named cipher to shift the message

58
00:04:14,395 --> 00:04:19,836
with each of the 26 keys,
then we'll print the result of the shift.

59
00:04:19,836 --> 00:04:24,020
As we'll see, we can decrypt
the message if we recognize words.

60
00:04:25,970 --> 00:04:28,114
How do we find the original message?

61
00:04:28,114 --> 00:04:32,444
When we run the code we just discussed,
we'll be able to view or

62
00:04:32,444 --> 00:04:35,647
eyeball the result of encrypting 26 times.

63
00:04:36,891 --> 00:04:41,546
We'll scan all 26 strings
produced by 26 different keys and

64
00:04:41,546 --> 00:04:43,970
we'll do this, methodically.

65
00:04:46,170 --> 00:04:50,810
As we eyeball each string,
we look carefully to see if the string

66
00:04:50,810 --> 00:04:55,200
is recognizable as English since we're
looking for an English language message.

67
00:04:57,560 --> 00:04:59,270
This line in unrecognizable.

68
00:05:01,720 --> 00:05:04,790
This line doesn't look like English,
but let's look closely.

69
00:05:06,500 --> 00:05:07,890
No, it's not English.

70
00:05:09,280 --> 00:05:11,080
We'll look at the next line.

71
00:05:11,080 --> 00:05:12,889
Let's examine this line closely.

72
00:05:14,080 --> 00:05:18,010
This line is easily recognized as English
text and we see that encryption, and

73
00:05:18,010 --> 00:05:20,720
security are fundamental
parts of today's internet.