Hi, I'm Jeff Forbes. A computer science professor
at Duke University and a friend of Susan, Owen, Robert and Drew. I do research in computer science
education and learning analytics, but I also teach the data structures and
algorithms course using Java. I'm really excited to be able to
give guest lecture about using arrays to break or crack a Caesar cipher. A method of encryption I
know you've been studying. You or someone else has implemented a program
to encrypt text using a Caesar cipher. This is a very basic and historically
interesting form of decryption though, it's not secure giving patients or
access to a computer and your skills at programming. The concepts in cracking decipher
are useful in solving other problems too. A key is used to encrypt,
to shift all letters in a message. But how do we decrypt? We know that decryption must be
possible since the intended recipient must be able to decrypt and
read the encrypted message being sent. Because a shift of 26 is
the same as a shift of 0, encrypting with the shift of 7
followed by decrypting with a shift of 19 will result in a regional
message just like a shift of 26. How does knowing this
help us crack decipher? A thief or a hacker could find the key,
which is a number. Keys are often numbers both in the Caesar
cipher and in other forms of encryption. The hacker simply subtracts from 26 and
will be able to decrypt the message. If the hacker or
thief doesn't have the key, is it possible to use brute force or
some other way to crack decipher? Brute force means trying
every possible key. With a human helping, using brute force
with a Cesar cipher makes it relatively easy to decrypt a message. Suppose we intercept this message,
which is too difficult to pronounce. Can we tell what this message says? Simply by looking at it,
that seems unlikely. If we know the key used to encrypt this
message, we could easily decrypt it. But how many keys are there? Perhaps we can simply try them all,
that's what a brute force approach is. The basic idea is to try every key. We already have the code to encrypt
the message, we'll use every key from one to 26 or 25 to encrypt
the message we're trying to decrypt. Since the decryption shift is just 26
minus the original encryption shift, if we try all 26 shifts,
we'll find the original message. We can try every key using
this brute force approach, because the number of keys is small and
trying each key is fast. The same approach won't work for other forms of encryption,
because there might be too many keys. It's also possible that using each key
to encrypt could take a long time. Before we talk about an approach that's
more sophisticated than brute force, let's work to understand brute force
in what we call eyeball decryption. Our goal is to unlock or
decrypt an encrypted message. We don't have the key used to decrypt. We're not that fortunate. However, we do have the key used to
encrypt from the class Caesar cipher. Using that, we can try all 26 keys. To decrypt using a human or
eyeball approach, we'll create a CaesarCipher object. We'll try all 26 keys from 0 to 25. We'll use our CaesarCipher object,
named cipher to shift the message with each of the 26 keys,
then we'll print the result of the shift. As we'll see, we can decrypt
the message if we recognize words. How do we find the original message? When we run the code we just discussed,
we'll be able to view or eyeball the result of encrypting 26 times. We'll scan all 26 strings
produced by 26 different keys and we'll do this, methodically. As we eyeball each string,
we look carefully to see if the string is recognizable as English since we're
looking for an English language message. This line in unrecognizable. This line doesn't look like English,
but let's look closely. No, it's not English. We'll look at the next line. Let's examine this line closely. This line is easily recognized as English
text and we see that encryption, and security are fundamental
parts of today's internet.