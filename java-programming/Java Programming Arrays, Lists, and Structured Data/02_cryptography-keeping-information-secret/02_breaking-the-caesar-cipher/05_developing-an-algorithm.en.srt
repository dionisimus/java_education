1
00:00:03,238 --> 00:00:08,040
We'd like to automate the cracking,
or breaking, of the Caesar Cipher.

2
00:00:08,040 --> 00:00:13,150
To do this, we'll rely on frequencies
of letters in English text.

3
00:00:14,530 --> 00:00:17,990
If you're encrypting a message in
another language, you'll need to use

4
00:00:17,990 --> 00:00:20,960
the frequencies from that language,
but the approach will be the same.

5
00:00:22,550 --> 00:00:26,970
We'll write code to find the character
that occurs most frequently in the message

6
00:00:26,970 --> 00:00:27,650
being decrypted.

7
00:00:29,250 --> 00:00:33,220
We'll assume this is the letter
e since e occurs more frequently

8
00:00:33,220 --> 00:00:35,580
than any other letter in English text.

9
00:00:35,580 --> 00:00:40,980
In Russian, for example, the letter
o occurs more frequently than e.

10
00:00:40,980 --> 00:00:45,060
If our assumption about e is wrong,
we won't decrypt the original message.

11
00:00:45,060 --> 00:00:48,820
It's possible to use more than just e,
but to rely on the frequencies of

12
00:00:48,820 --> 00:00:53,070
all the letters and use statistical
approaches to break the CaesarCipher.

13
00:00:53,070 --> 00:00:57,813
In some cases, these approaches will break
other encryption methods, though not

14
00:00:57,813 --> 00:01:02,364
the methods used to encrypt data for
online shopping and secure transactions.

15
00:01:04,568 --> 00:01:08,500
Let's look at the code for
decryption in two steps.

16
00:01:08,500 --> 00:01:12,460
We need to count the occurrences
of each letter, a through z,

17
00:01:12,460 --> 00:01:14,208
in the message we're encrypting.

18
00:01:15,660 --> 00:01:19,880
We'll have code to scan each letter
of the text, an increment counter for

19
00:01:19,880 --> 00:01:21,469
each of the 26 different letters.

20
00:01:23,050 --> 00:01:25,570
Initially all the counters are zero

21
00:01:25,570 --> 00:01:28,280
since we haven't started scanning
the text letter by letter.

22
00:01:29,780 --> 00:01:35,410
Each counter is numbered from 0 to 25
because the counters are array elements.

23
00:01:37,055 --> 00:01:42,880
The index from a string of 26 letters
will help us find the right index for

24
00:01:42,880 --> 00:01:45,109
the counter we'll increment
as we scan the text.

25
00:01:46,820 --> 00:01:48,340
As we scan the message,

26
00:01:48,340 --> 00:01:53,521
looking at each character, we'll
increment the counter at index 7 for H.

27
00:01:54,630 --> 00:01:57,740
Then as we scan,
I will increment the counter index 8,

28
00:01:57,740 --> 00:02:00,600
which is the index of I
in our alphabet string.

29
00:02:02,030 --> 00:02:06,150
We won't increment for
the comma, or for the space.

30
00:02:06,150 --> 00:02:09,250
Then we'll increment the calendar
at index 3 for the D.

31
00:02:10,410 --> 00:02:13,310
The counter at index 14 for the O,

32
00:02:13,310 --> 00:02:19,260
we won't increment for the space because
space doesn't occur in the alphabet.

33
00:02:21,010 --> 00:02:25,012
Then, we'll increment
the counter at index 24 for Y.

34
00:02:27,058 --> 00:02:33,650
And we'll set the counter at index 14 to 2
when we scan the second O in the message.

35
00:02:35,210 --> 00:02:40,830
When we're done scanning every character,
we'll have these values for each counter.

36
00:02:40,830 --> 00:02:42,550
If you look carefully at these values,

37
00:02:42,550 --> 00:02:45,740
you see that our decryption
method is likely to fail.

38
00:02:45,740 --> 00:02:47,890
The value of the counter
with index 4 is 0,

39
00:02:47,890 --> 00:02:53,280
there are no Es in this message,
but this is a very unusual message.

40
00:02:53,280 --> 00:02:56,900
Now we'll look at the code for this idea.

41
00:02:56,900 --> 00:03:00,040
We scan the message character by
character using a standard for loop.

42
00:03:01,480 --> 00:03:06,350
We find where the character occurs in a
string of each letter in the alphabet, so

43
00:03:06,350 --> 00:03:08,620
that E will be found at index 4.

44
00:03:08,620 --> 00:03:13,100
Notice that we converted the characters in
the message being decrypted to lower case.

45
00:03:14,270 --> 00:03:18,420
We use the index in the alphabet to
increment the corresponding counter

46
00:03:18,420 --> 00:03:20,890
as part of decrypting the message.

47
00:03:20,890 --> 00:03:23,255
If the character wasn't in
the letters of the alphabet,

48
00:03:23,255 --> 00:03:29,060
the .indexOf method returned -1,
and we don't increment any counter.

49
00:03:30,700 --> 00:03:35,229
The code that uses the idea of e occurring
most frequently, is straightforward

50
00:03:35,229 --> 00:03:39,190
developed from the ideas, algorithm,
and code you've just seen.

51
00:03:39,190 --> 00:03:43,570
As you can see, the code isn't very long
but we've created two helpful methods and

52
00:03:43,570 --> 00:03:45,880
relied on the CeasarCipher class to help.

53
00:03:47,480 --> 00:03:51,160
We've called the method countLetters,
which we just discussed.

54
00:03:51,160 --> 00:03:55,500
This method will count the occurrences of
every character in the string encrypted,

55
00:03:55,500 --> 00:03:59,860
with a being stored in the first,
or index 0, location of the array

56
00:04:00,950 --> 00:04:05,129
returned by the function, and
referenced here by the variable freqs.

57
00:04:06,420 --> 00:04:08,880
Then we call a method maxIndex,

58
00:04:08,880 --> 00:04:13,920
which will return the index of their
entry in freqs that is the largest.

59
00:04:13,920 --> 00:04:19,110
The location we will assume
is where the e was shifted.

60
00:04:20,590 --> 00:04:24,910
We'll find the distance from this
location to E, E has index 4,

61
00:04:24,910 --> 00:04:32,218
since we start with 0 for A, and then get
B, C, D, E, for 1, 2, 3, 4, respectively.

62
00:04:33,450 --> 00:04:36,050
If the maximal index is less than 4,

63
00:04:36,050 --> 00:04:40,140
we'll need to wrap around from
26 to find the shift use for E.

64
00:04:41,580 --> 00:04:47,110
If the value dkey was used to encrypt,
then 26- dkey

65
00:04:47,110 --> 00:04:51,560
is used to decrypt, and
we return the decrypted string.

66
00:04:53,490 --> 00:04:56,510
You'll be ready to use your programming
knowledge to finish the task of

67
00:04:56,510 --> 00:04:57,570
decrypting, and

68
00:04:57,570 --> 00:05:01,460
then apply this knowledge in the mini
project with a different cypher.

69
00:05:01,460 --> 00:05:04,050
But there's some details
we want to highlight.

70
00:05:04,050 --> 00:05:09,190
The array freqs in the code we've just saw
has a relationship between the index and

71
00:05:09,190 --> 00:05:10,510
the value in the array.

72
00:05:10,510 --> 00:05:13,320
For example, freqs of 8 is how often

73
00:05:14,350 --> 00:05:19,010
I occurs since I is the ninth letter and
has index 8.

74
00:05:19,010 --> 00:05:22,210
Remember, we start with index 0.

75
00:05:22,210 --> 00:05:26,930
When looking for a maximal value, as with
the method maxIndex that we called, and

76
00:05:26,930 --> 00:05:31,840
whose implementation you see here, we
returned the index of the largest value,

77
00:05:31,840 --> 00:05:33,630
not the largest value itself.

78
00:05:33,630 --> 00:05:36,040
We use the index to find
the distance from e.

79
00:05:37,310 --> 00:05:42,349
Using the existing CaesarCipher class made
decryption much more straightforward.

80
00:05:43,730 --> 00:05:47,640
In general it is a good idea to use
code that has already been developed and

81
00:05:47,640 --> 00:05:50,010
tested, rather than reinventing it.

82
00:05:50,010 --> 00:05:50,830
Have fun coding.