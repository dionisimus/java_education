1
00:00:03,191 --> 00:00:07,047
Okay, now that you've developed
the algorithm for Caesar Cipher,

2
00:00:07,047 --> 00:00:08,849
it's time to turn it into code.

3
00:00:08,849 --> 00:00:13,580
We've started here with the CaesarCipher
class, which has an encrypt method which

4
00:00:13,580 --> 00:00:17,793
takes the input to encrypt, and an integer
for the key to use to encrypt it.

5
00:00:17,793 --> 00:00:19,493
I've written here the comments,

6
00:00:19,493 --> 00:00:22,940
with the pseudo code that we
just developed in our algorithm.

7
00:00:22,940 --> 00:00:25,950
And I've gone ahead and
written the first two lines of code.

8
00:00:25,950 --> 00:00:29,270
The first step is to make a new
StringBuilder with the input.

9
00:00:29,270 --> 00:00:30,140
And call it encrypted.

10
00:00:30,140 --> 00:00:33,770
And the second is to write down
the alphabet, which is a string.

11
00:00:35,050 --> 00:00:37,630
The next thing is to compute
the shifted alphabet.

12
00:00:37,630 --> 00:00:42,090
So we're going to make a string,
shiftedAlphabet.

13
00:00:42,090 --> 00:00:47,260
And remember, we saw in previous videos,
that we can use substring to do that.

14
00:00:47,260 --> 00:00:51,466
lphabet.substring(key) +,

15
00:00:51,466 --> 00:00:56,106
that's what plus means for strings,

16
00:00:56,106 --> 00:01:01,660
alphabet.substring(0,key).

17
00:01:01,660 --> 00:01:04,260
That will slice the alphabet
up into two pieces and

18
00:01:04,260 --> 00:01:07,270
can concatenate them back together to
give us the shifted alphabet we want.

19
00:01:08,750 --> 00:01:13,420
Now we can count from zero to being
less than the length of encrypted.

20
00:01:13,420 --> 00:01:16,140
And we want to call each
number that we count i.

21
00:01:16,140 --> 00:01:20,290
So this is going to be a counting for
loop, for

22
00:01:20,290 --> 00:01:27,650
( int i = 0 i < encrypted.length(),
the length of encrypted, i++).

23
00:01:27,650 --> 00:01:28,910
And what do we want to do?

24
00:01:28,910 --> 00:01:34,356
Well, we want to look at the ith
character, and call it currChar.

25
00:01:34,356 --> 00:01:43,590
char currChar = encrypted.charAt(i).

26
00:01:43,590 --> 00:01:47,950
Then we want to find the index
of currChar in the alphabet.

27
00:01:47,950 --> 00:01:52,031
int idx, we said over here call it idx,

28
00:01:52,031 --> 00:01:56,490
= alphabet.indexOf( currChar), and

29
00:01:56,490 --> 00:02:01,640
then we want to see if
that's in the alphabet.

30
00:02:01,640 --> 00:02:06,840
As you've seen before, indexOf will return
a negative one if something is not there

31
00:02:06,840 --> 00:02:08,620
and some other number if it is.

32
00:02:08,620 --> 00:02:13,880
So if would not be there if idx is index,
or is negative one.

33
00:02:13,880 --> 00:02:17,180
We want != -1 to mean it is there.

34
00:02:19,000 --> 00:02:25,210
Now we want the idxth
char of shifted alphabet,

35
00:02:25,210 --> 00:02:34,234
and we want to call that newChar
= shiftedAlphabet.charAt(idx).

36
00:02:34,234 --> 00:02:38,713
And now I want to replace
the ith character of

37
00:02:38,713 --> 00:02:44,162
encrypted with newChar so
encrypted.setCharAt and

38
00:02:44,162 --> 00:02:48,650
then I want the ith
character to be newChar.

39
00:02:51,290 --> 00:02:55,260
That's everything I want to do inside
of that if, otherwise, do nothing.

40
00:02:55,260 --> 00:02:58,199
I don't need to write an alt if I
don't want to do anything otherwise.

41
00:02:59,230 --> 00:03:03,640
This curly braces closes my counting for
loop, and at the end here,

42
00:03:03,640 --> 00:03:08,040
I said I want my answer, so
I want to return something,

43
00:03:08,040 --> 00:03:12,355
to be this string inside of encrypted,
so encrypted.toString.

44
00:03:15,200 --> 00:03:19,400
I'm gonna compile that,
it says no syntax errors.

45
00:03:19,400 --> 00:03:22,860
And I've written here already
this method testCaesar,

46
00:03:22,860 --> 00:03:27,690
which is going to make a new file
resource, so it'll prompt us for a file.

47
00:03:27,690 --> 00:03:30,560
Read it all in is a string encrypt it.

48
00:03:30,560 --> 00:03:35,180
It will print out the encrypted message,
and then it will also decrypt it and print

49
00:03:35,180 --> 00:03:39,200
out the decrypted message, because if we
just saw a jumble of random characters,

50
00:03:39,200 --> 00:03:42,000
we wouldn't really be able
to tell if we did it right.

51
00:03:42,000 --> 00:03:45,110
But being able to tell that
we got the original back

52
00:03:45,110 --> 00:03:47,200
makes us more confident that
what we did was correct.

53
00:03:48,310 --> 00:03:51,090
I'm gonna go over here to BlueJ.

54
00:03:51,090 --> 00:03:52,770
I'm gonna say new CaesarCipher.

55
00:03:54,100 --> 00:04:01,750
I'm gonna say Test Caesar, and
it's gonna prompt me for a file.

56
00:04:01,750 --> 00:04:07,890
And I have here this message in
a file called message1.txt that says,

57
00:04:07,890 --> 00:04:09,720
free cake in the conference room.

58
00:04:09,720 --> 00:04:13,200
Maybe I want to send this to
Robert without Owen seeing it and

59
00:04:13,200 --> 00:04:18,450
being able to get all the cake, and
so I'm gonna choose message1.txt.

60
00:04:18,450 --> 00:04:23,982
And we can see the encrypted message here,
WIVV, etc., etc.

61
00:04:23,982 --> 00:04:27,339
It's been made more difficult to read.

62
00:04:27,339 --> 00:04:30,970
And then we can see down here,
where it decrypted it correctly.

63
00:04:30,970 --> 00:04:33,249
So I'd be a little more confident in this.

64
00:04:33,249 --> 00:04:34,927
I'd want to go through and

65
00:04:34,927 --> 00:04:39,582
check by hand that this actually came
out with the correct key before I'd

66
00:04:39,582 --> 00:04:43,570
be completely certain that this
test case worked correctly.