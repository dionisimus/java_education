1
00:00:04,060 --> 00:00:08,880
You've already written code to read in
the entire contents of a web server log.

2
00:00:08,880 --> 00:00:12,810
And now you wanna find out how many
unique IP addresses it contains.

3
00:00:12,810 --> 00:00:15,880
As always, you're going to want
to approach this problem with

4
00:00:15,880 --> 00:00:18,660
the seven steps you use for every problem.

5
00:00:18,660 --> 00:00:21,390
We're going to walk through this problem,
starting at step one.

6
00:00:21,390 --> 00:00:25,290
And we're gonna use color
names instead of IP addresses.

7
00:00:25,290 --> 00:00:27,860
This problem is really the same problem.

8
00:00:27,860 --> 00:00:32,382
You're finding out how many unique values
there are in an array list of strings, but

9
00:00:32,382 --> 00:00:36,282
color names are easier to say and
to see which ones we're talking about.

10
00:00:38,407 --> 00:00:41,410
When we look at this list of ten values.

11
00:00:41,410 --> 00:00:44,150
You might be able to tell
just by looking at it that

12
00:00:44,150 --> 00:00:46,250
there are only four unique values.

13
00:00:46,250 --> 00:00:48,760
But if this list had
a million elements in it,

14
00:00:48,760 --> 00:00:51,210
we'd like to develop a method
that would still work.

15
00:00:52,420 --> 00:00:54,870
There are many ways of
solving problems in general.

16
00:00:54,870 --> 00:00:57,990
And in this case,
there are a couple that I'll mention and

17
00:00:57,990 --> 00:01:00,020
one that we'll realize in code.

18
00:01:00,020 --> 00:01:03,770
One method that we won't do is
to as we look down the list,

19
00:01:03,770 --> 00:01:06,800
cross out values that we've seen before.

20
00:01:06,800 --> 00:01:12,870
Crossing out values in a list is a problem
in Java programming because if we

21
00:01:12,870 --> 00:01:17,650
replace the values in our parameter with
other values we've caused a side effect,

22
00:01:17,650 --> 00:01:21,940
something we've spoken about before
as a thing to avoid if you can.

23
00:01:21,940 --> 00:01:27,510
So instead we'll use an idea of visiting
every value in the list in turn,

24
00:01:27,510 --> 00:01:29,830
which is typical for array problems, and

25
00:01:29,830 --> 00:01:34,440
if we've haven't seen a value before
we'll copy it into a new list.

26
00:01:34,440 --> 00:01:36,800
So first I'm copying the value pink,

27
00:01:36,800 --> 00:01:39,980
because I haven't seen it before,
in my new list.

28
00:01:39,980 --> 00:01:41,840
Then I'm gonna visit green.

29
00:01:41,840 --> 00:01:43,410
I haven't seen it before.

30
00:01:43,410 --> 00:01:46,770
So I'll copy it over into my new list.

31
00:01:46,770 --> 00:01:48,630
Now I'm gonna visit pink.

32
00:01:48,630 --> 00:01:50,490
I've already seen it, so I don't copy it.

33
00:01:50,490 --> 00:01:51,090
Then green.

34
00:01:51,090 --> 00:01:53,910
I have seen it, so I don't copy it.

35
00:01:53,910 --> 00:01:56,920
Pink, pink, pink, I've seen them all.

36
00:01:56,920 --> 00:02:00,450
Orange I haven't seen before, so
I'll copy that into my new list.

37
00:02:02,170 --> 00:02:03,260
The next value's blue.

38
00:02:03,260 --> 00:02:04,730
I haven't seen.

39
00:02:06,000 --> 00:02:07,390
So I'm copying it into my list.

40
00:02:08,870 --> 00:02:12,260
Finally, I get to pink,
the last value in my original list.

41
00:02:12,260 --> 00:02:15,630
I have seen it before,
so I don't copy it over.

42
00:02:15,630 --> 00:02:18,120
Now, I look at my list that I've created.

43
00:02:18,120 --> 00:02:22,930
It has four values, and so I'm gonna
return the value, four, for my method that

44
00:02:22,930 --> 00:02:27,230
I'm writing that determines the number
of unique values in the array parameter.

45
00:02:29,230 --> 00:02:32,960
Developing this algorithm follows a lot
of the same patterns you've seen before.

46
00:02:32,960 --> 00:02:37,420
You'll see that sometimes you add an
element to the copy, and sometimes you do

47
00:02:37,420 --> 00:02:42,090
not, and you'll want to think through
the conditions under which you add.

48
00:02:42,090 --> 00:02:45,700
Once you've done that, you can express
the main portion of the algorithm

49
00:02:45,700 --> 00:02:50,040
in terms of steps to do for
each element of the input.

50
00:02:50,040 --> 00:02:52,450
We'll let you work through steps two and
three.

51
00:02:54,450 --> 00:02:57,459
Hopefully, you came up with
pseudocode that looks like this.

52
00:02:59,190 --> 00:03:00,670
Now for this particular problem,

53
00:03:00,670 --> 00:03:03,310
you'll want to do things just
a little bit differently.

54
00:03:03,310 --> 00:03:07,110
Remember that you have log
entries in the field records.

55
00:03:07,110 --> 00:03:10,090
And you want to use
the get IP address method

56
00:03:10,090 --> 00:03:13,000
to get the string out of
the log entry object.

57
00:03:13,000 --> 00:03:15,400
There are a couple ways to
deal with this difference.

58
00:03:15,400 --> 00:03:20,130
The simplest is to just use the same
algorithm but adjust it slightly to

59
00:03:20,130 --> 00:03:25,290
reflect the fact that you want to use
records, the fields in the class and

60
00:03:25,290 --> 00:03:30,152
you want to get the IP address out of
each element of records, check to see if

61
00:03:30,152 --> 00:03:35,220
that IP address is in copy, and
if not, add the IP address to copy.

62
00:03:36,260 --> 00:03:39,670
At this point,
you'd wanna test out your pseudo code,

63
00:03:39,670 --> 00:03:42,000
then you're ready to
turn it into Java code.