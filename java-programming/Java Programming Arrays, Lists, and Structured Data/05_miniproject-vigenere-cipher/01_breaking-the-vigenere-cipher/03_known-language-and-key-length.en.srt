1
00:00:03,331 --> 00:00:04,510
Hi.

2
00:00:04,510 --> 00:00:08,310
The first step of your Vigenere breaker
is gonna be to write code which

3
00:00:08,310 --> 00:00:11,750
only handles the case when
you know the key length and

4
00:00:11,750 --> 00:00:14,650
are working with a single
language like English.

5
00:00:14,650 --> 00:00:18,240
Whenever you're developing software,
it's a great idea to implement one feature

6
00:00:18,240 --> 00:00:23,030
first to test it thoroughly before you
build more features into your program and

7
00:00:23,030 --> 00:00:24,756
that's exactly what we're
gonna be doing here.

8
00:00:24,756 --> 00:00:29,665
Remember that the vigenere cypher
acts like several Caesar cyphers for

9
00:00:29,665 --> 00:00:32,670
different slices of the message.

10
00:00:32,670 --> 00:00:37,430
Here you see a message which was encrypted
with a vigenere cypher whose key length

11
00:00:37,430 --> 00:00:37,993
is four.

12
00:00:37,993 --> 00:00:40,900
We've colored the letters based on
the part of the key that was used.

13
00:00:41,920 --> 00:00:45,430
If you take only the blue letters,
you can use the Caesar cipher

14
00:00:45,430 --> 00:00:49,120
cracker that you wrote previously
to find that part of the key.

15
00:00:49,120 --> 00:00:53,130
These letters are basically just a message
encrypted with a Caesar cipher but

16
00:00:53,130 --> 00:00:55,480
they're spread out through
the total message.

17
00:00:55,480 --> 00:00:59,970
Then you can do the same thing with the
red letters to crack that part of the key

18
00:00:59,970 --> 00:01:03,400
and similarly for the green and
the purple letters.

19
00:01:03,400 --> 00:01:06,850
This is the conceptual idea
of how to break Vigenere.

20
00:01:06,850 --> 00:01:10,470
If you know the key length,
you slice the string up, and

21
00:01:10,470 --> 00:01:13,310
you break each slice
using a Caesar cipher.

22
00:01:14,400 --> 00:01:16,770
So, what should you
write to implement this?

23
00:01:16,770 --> 00:01:20,160
The first method you'd want
to write is slice string.

24
00:01:20,160 --> 00:01:23,290
Which takes three parameters,
the message to slice up,

25
00:01:24,440 --> 00:01:29,070
which slice you want and
the total number of slices.

26
00:01:29,070 --> 00:01:34,790
For example, if you call this method with
four total slices and which slice equals

27
00:01:34,790 --> 00:01:39,778
zero, you would get the blue letters
put together into a string like this.

28
00:01:39,778 --> 00:01:45,380
Similarly, whichSlice = 1 would get
the red letters as you see here.

29
00:01:45,380 --> 00:01:50,240
The new line character counts
as a string and whichSlice = 2,

30
00:01:50,240 --> 00:01:53,451
you'll get the green letters
in the string and finally,

31
00:01:53,451 --> 00:01:56,490
whichSlice = 3 would give
you the purple letters.

32
00:01:56,490 --> 00:01:57,950
Again, you see the new line character.

33
00:01:59,280 --> 00:02:02,780
We have some advice for
you to help you write sliceString.

34
00:02:02,780 --> 00:02:06,950
First, remember the StringBuilder
class you learned about earlier.

35
00:02:06,950 --> 00:02:10,320
It would be useful as you build up
the resulting string to return.

36
00:02:10,320 --> 00:02:13,790
You'll want to append characters
to a StringBuilder object.

37
00:02:13,790 --> 00:02:17,970
Second, you will likely want to
make use of counting for loops.

38
00:02:17,970 --> 00:02:21,280
In ways that are slightly
different than you've seen before.

39
00:02:21,280 --> 00:02:26,470
You've typically had four loops start at
zero but they can start at any number.

40
00:02:26,470 --> 00:02:29,310
Here you see an example of a counting
four loop that starts at four.

41
00:02:29,310 --> 00:02:32,620
Of course, you could use a variable or

42
00:02:32,620 --> 00:02:35,660
a parameter to indicate
where you start counting.

43
00:02:35,660 --> 00:02:37,800
That will prove quite
useful in this method.

44
00:02:38,830 --> 00:02:43,000
You can also have counting for loops
that count by something other than one.

45
00:02:43,000 --> 00:02:47,670
This loop counts by seven so, it would
print the values of four, 11, 18, and 25.

46
00:02:47,670 --> 00:02:51,540
Of course, you can count by a variable or

47
00:02:51,540 --> 00:02:54,680
a parameter instead of
the constant seven you see here.

48
00:02:54,680 --> 00:02:57,999
That may be very useful
as you write sliceString.

49
00:02:59,400 --> 00:03:04,850
Once you've written slice string, you will
want to write the method try key length.

50
00:03:04,850 --> 00:03:07,700
This method finds the visionary key for

51
00:03:07,700 --> 00:03:12,710
an encrypted message, assuming the key
length is klength the parameter.

52
00:03:12,710 --> 00:03:16,520
It also takes a parameter if the most
common character in the language

53
00:03:16,520 --> 00:03:18,080
this parameter is for later.

54
00:03:18,080 --> 00:03:21,350
For right now, you'll just pass it e.

55
00:03:21,350 --> 00:03:25,440
When you write this method,
you'll want to make use of sliceString

56
00:03:25,440 --> 00:03:30,500
that we just discussed, and you'll
want to use the CaesarCracker class.

57
00:03:30,500 --> 00:03:33,120
We've provided you with
a version of CaesarCracker

58
00:03:33,120 --> 00:03:37,420
that's similar to the one you wrote
before, but with a few changes.

59
00:03:37,420 --> 00:03:40,670
First, we separated out
the code that finds the key

60
00:03:41,750 --> 00:03:46,410
from the code that decrypts the message
and second, we've made a constructor

61
00:03:46,410 --> 00:03:50,270
which takes the most common letter in
the language that you're working with.

62
00:03:50,270 --> 00:03:54,620
In this part of your program, you'll
just pass the most common parameter.

63
00:03:54,620 --> 00:03:57,020
This method should return an int array.

64
00:03:57,020 --> 00:04:00,150
Of length keylength, which holds each

65
00:04:00,150 --> 00:04:05,070
of the shifts that the CeasarCracker
found for each slice of the message.

66
00:04:06,540 --> 00:04:10,570
After you've written trykeylength,
you have one more method to write for

67
00:04:10,570 --> 00:04:13,970
this part of your program, breakVigenere.

68
00:04:13,970 --> 00:04:16,620
This is the method you'll
want to call from BlueJ.

69
00:04:16,620 --> 00:04:20,990
It will set everything up and
will call the method tryKeyLength.

70
00:04:20,990 --> 00:04:23,560
You'll want to use a FileResource object

71
00:04:23,560 --> 00:04:26,430
to read in the file that
you want to decrypt.

72
00:04:26,430 --> 00:04:30,410
FileResource has a useful method,
asString,

73
00:04:30,410 --> 00:04:34,200
which reads the entire file
into a string for you.

74
00:04:34,200 --> 00:04:39,360
Once you've read the entire file,
you'll want to call tryKeyLength.

75
00:04:39,360 --> 00:04:41,870
Passing the message you just read.

76
00:04:41,870 --> 00:04:45,290
The keyLength which is given
to you at this stage and

77
00:04:45,290 --> 00:04:47,950
the letter e which is
the most common letter.

78
00:04:47,950 --> 00:04:51,700
Trykeylength will return
the key as an array of ints.

79
00:04:51,700 --> 00:04:56,110
You'll simply pass this to
the constructor VigenereCipher and

80
00:04:56,110 --> 00:05:01,400
you'll make use of it's .decrypt method
to decrypt the encrypted message.

81
00:05:01,400 --> 00:05:05,860
Finally you'll print out the result,
voila, you are done.