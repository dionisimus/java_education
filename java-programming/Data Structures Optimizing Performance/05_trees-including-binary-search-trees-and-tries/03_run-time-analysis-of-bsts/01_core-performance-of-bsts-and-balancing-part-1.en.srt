1
00:00:03,960 --> 00:00:07,010
So Leo introduced binary search
trees in the previous video, and

2
00:00:07,010 --> 00:00:10,726
what we'd like to do now is really focus
in on the performance of algorithms that

3
00:00:10,726 --> 00:00:11,946
use binary search trees,

4
00:00:11,946 --> 00:00:15,827
because with all of these data structures
that we're talking about, one of the big

5
00:00:15,827 --> 00:00:19,453
motivations for introducing a data
structure is to get better performance.

6
00:00:19,453 --> 00:00:22,182
So let's see if we do that
with binary search trees.

7
00:00:22,182 --> 00:00:24,553
So in particular,
by the end of this video,

8
00:00:24,553 --> 00:00:28,335
you'll be able to explain the running
time performance of looking for

9
00:00:28,335 --> 00:00:32,438
a word in a binary search tree and
comparing this performance with other data

10
00:00:32,438 --> 00:00:36,100
structures that we have where we
might want to search for words.

11
00:00:36,100 --> 00:00:38,460
So, in particular, for linked lists.

12
00:00:38,460 --> 00:00:41,823
All right, so let's think back to
binary search trees and, in particular,

13
00:00:41,823 --> 00:00:45,137
in the programming assignment that you
were working through we'll be using

14
00:00:45,137 --> 00:00:47,127
binary search trees to store dictionaries.

15
00:00:47,127 --> 00:00:51,929
So we are storing lists of words and we
like to be able to lookup and search for

16
00:00:51,929 --> 00:00:53,921
words in this data structure.

17
00:00:53,921 --> 00:00:58,039
So we're gonna do just a small
example with these words, and

18
00:00:58,039 --> 00:01:01,594
let's think about what
binary search trees we might

19
00:01:01,594 --> 00:01:05,910
get if we start building
a tree using these words.

20
00:01:05,910 --> 00:01:09,190
So it turns out that it's not just
a single binary search tree that

21
00:01:09,190 --> 00:01:10,010
might result.

22
00:01:10,010 --> 00:01:13,030
We could get any of these three or
others potentially.

23
00:01:13,030 --> 00:01:16,510
Depending on the order in which
we insert words into the tree.

24
00:01:16,510 --> 00:01:21,190
And so you can follow along and
each one of these trees and confirm that,

25
00:01:21,190 --> 00:01:24,940
in fact, when you look at a node
that's to the left of a node,

26
00:01:24,940 --> 00:01:28,830
and a node that's on its right,
each time you're going to get the one

27
00:01:28,830 --> 00:01:32,780
that's on the left is alphabetically
before the one that's on the right.

28
00:01:32,780 --> 00:01:34,400
Whether it be in the green,

29
00:01:34,400 --> 00:01:38,120
binary search tree where we all have
just a single path going down or

30
00:01:38,120 --> 00:01:42,410
in one of the bushier trees that you
see on the right hand side as well.

31
00:01:42,410 --> 00:01:45,290
All right, so we have these three
different binary search trees.

32
00:01:45,290 --> 00:01:50,660
All try to capture that same set
of words that form our dictionary.

33
00:01:50,660 --> 00:01:53,510
And that's going to be interesting when
we think about performance because we

34
00:01:53,510 --> 00:01:56,010
have to think about each
of these different possible

35
00:01:56,010 --> 00:01:58,910
binary search trees that
we might be working with.

36
00:01:58,910 --> 00:02:03,640
So let's think about the isWord method for
looking up a word

37
00:02:03,640 --> 00:02:06,650
in the binary search tree, so
looking up a word in the dictionary.

38
00:02:06,650 --> 00:02:11,290
You can think about an application where
we were just building the tree and

39
00:02:11,290 --> 00:02:13,530
we're trying to add new words to it.

40
00:02:13,530 --> 00:02:16,410
And so every time we're looking up
to see if it's already in there and

41
00:02:16,410 --> 00:02:17,880
then perhaps adding to it.

42
00:02:17,880 --> 00:02:21,590
Or you can think about searching
through a big collection of data and

43
00:02:21,590 --> 00:02:24,980
trying to find some particular
piece that we care about.

44
00:02:24,980 --> 00:02:28,210
In either situation what we want to
do is we want to start at the root

45
00:02:28,210 --> 00:02:29,320
of the tree, and

46
00:02:29,320 --> 00:02:33,260
we want to compare the word that we care
about to the value at the current node.

47
00:02:33,260 --> 00:02:39,860
Now, if at the current node we actually
don't have a word, if the current is null,

48
00:02:39,860 --> 00:02:43,660
then that means that we haven't
found our word that we care about.

49
00:02:43,660 --> 00:02:46,530
It's not in the tree and
so we return false.

50
00:02:46,530 --> 00:02:49,240
On the other hand,
what we want to do is we wanna compare

51
00:02:49,240 --> 00:02:54,470
the word that we care about to the current
word, and if it actually agrees with it.

52
00:02:54,470 --> 00:02:56,020
Then we wanna return true.

53
00:02:56,020 --> 00:03:00,060
And so if we found the word,
then we're happy, and we can return true.

54
00:03:00,060 --> 00:03:04,150
On the other hand, we have two
possibilities for what happens if our node

55
00:03:04,150 --> 00:03:09,890
isn't null and if the current word doesn't
agree with the word that we want to find.

56
00:03:09,890 --> 00:03:13,680
Either the word that we want to find is
alphabetically before the current word, or

57
00:03:13,680 --> 00:03:15,860
it's alphabetically
after the current word.

58
00:03:15,860 --> 00:03:18,040
And if it's alphabetically
before the current word,

59
00:03:18,040 --> 00:03:21,950
then we only need to look at the sub
tree to the left of the current word.

60
00:03:21,950 --> 00:03:25,210
If the word that we care about is
alphabetically greater than or

61
00:03:25,210 --> 00:03:27,690
after the word that we're
looking at right now,

62
00:03:27,690 --> 00:03:31,870
then we need to look at the right
sub tree of the binary search tree.

63
00:03:31,870 --> 00:03:34,300
All right, so, let's think about
what that might look like and

64
00:03:34,300 --> 00:03:37,980
remember when we're analyzing performance
we want to think about best case and

65
00:03:37,980 --> 00:03:40,880
worst case performance,
you want to think about average case.

66
00:03:40,880 --> 00:03:44,600
And with each situation it's useful
to work through some examples and

67
00:03:44,600 --> 00:03:49,200
see what does it mean to get lucky
when we're running this method on

68
00:03:49,200 --> 00:03:52,590
particular inputs, and
what does it mean to get unlucky?

69
00:03:52,590 --> 00:03:56,520
And also we need to think about
what size of input do we,

70
00:03:56,520 --> 00:03:59,090
what does it mean to talk
about the size of the input?

71
00:03:59,090 --> 00:04:01,750
What input do we have to this method?

72
00:04:01,750 --> 00:04:04,201
And when you think about
this isWord method,

73
00:04:04,201 --> 00:04:07,180
what we're doing is searching
through a collection.

74
00:04:07,180 --> 00:04:11,980
And so the relevant input size,
is the size of the dictionary.

75
00:04:11,980 --> 00:04:14,300
The number of words we're looking through.

76
00:04:14,300 --> 00:04:17,980
It's not so
much the length of the current word.

77
00:04:17,980 --> 00:04:20,780
It's not so
much how many words we're looking for but,

78
00:04:20,780 --> 00:04:25,560
it's the size of the dictionary,
the number of words

79
00:04:25,560 --> 00:04:30,340
that we're storing that we're looking
through in order to find the word to find.

80
00:04:30,340 --> 00:04:35,270
Okay, so our input size, or n,
is the number of words in our dictionary.

81
00:04:35,270 --> 00:04:38,600
And what we'd like to think about is how
to relate the performance of this method

82
00:04:38,600 --> 00:04:40,930
is word, to that size.

83
00:04:40,930 --> 00:04:46,570
How does our performance change as the
number of words in the dictionary changes?

84
00:04:46,570 --> 00:04:47,760
So let's, for example,

85
00:04:47,760 --> 00:04:52,010
look at what happens when we
run isWord on the word east.

86
00:04:52,010 --> 00:04:56,490
And what we have to do using our
algorithm is look first at the root

87
00:04:56,490 --> 00:04:57,820
of the binary search tree.

88
00:04:57,820 --> 00:05:03,920
And oh yay, we're lucky,
we hit our desired word, east, right away.

89
00:05:03,920 --> 00:05:08,860
And so that means that for this particular
run of the algorithm, we've got just

90
00:05:08,860 --> 00:05:14,290
a single comparison that we make between
the argument and a value of the tree.

91
00:05:14,290 --> 00:05:19,680
And so, well that comparison
might take a few operations, but

92
00:05:19,680 --> 00:05:24,090
if we are lucky in the very first probe
of the binary search tree, the very first

93
00:05:24,090 --> 00:05:27,840
comparison we make, that's going to
take a constant number of operations.

94
00:05:27,840 --> 00:05:31,610
It's not going to depend on how
big the tree was if we already

95
00:05:31,610 --> 00:05:33,570
were successful when
we looked at the root.

96
00:05:33,570 --> 00:05:38,220
So in the best case, the case
where we find our word right away,

97
00:05:38,220 --> 00:05:42,850
the performance of this algorithm
is big O(1), constant time.

98
00:05:42,850 --> 00:05:44,450
But, we're not always lucky.

99
00:05:44,450 --> 00:05:48,130
So, let's look at another case where
the word that we're looking for

100
00:05:48,130 --> 00:05:49,370
isn't at the root.

101
00:05:49,370 --> 00:05:52,380
So let's think about what happens
when we look for the word, a.

102
00:05:52,380 --> 00:05:54,390
So we start at the root.

103
00:05:54,390 --> 00:05:58,178
And we compare east and a, and we notice
that a happens alphabetically before east.

104
00:05:58,178 --> 00:06:01,800
So we have to look at that left
sub-tree of the binary search tree.

105
00:06:01,800 --> 00:06:05,248
Now we're looking at comparing a with at.

106
00:06:05,248 --> 00:06:08,243
All right,
a is still alphabetically at at.

107
00:06:08,243 --> 00:06:09,485
It's a prefix of at so it comes earlier.

108
00:06:09,485 --> 00:06:11,990
So we look to the left.

109
00:06:11,990 --> 00:06:13,480
And now we're comparing a with am.

110
00:06:13,480 --> 00:06:17,650
All right, now again a is
alphabetically before am, and so

111
00:06:17,650 --> 00:06:21,350
we have to look to the left, but
we didn't find anything there.

112
00:06:21,350 --> 00:06:23,440
The children of am are null.

113
00:06:23,440 --> 00:06:26,860
And so what we notice is
we've fallen off the tree.

114
00:06:26,860 --> 00:06:28,900
A does not occur in our dictionary.

115
00:06:28,900 --> 00:06:34,149
And so we can return an answer that says
It is not a word in our dictionary so

116
00:06:34,149 --> 00:06:34,760
false.

117
00:06:34,760 --> 00:06:37,504
Now that's okay, it's okay if we
don't always find the word, but

118
00:06:37,504 --> 00:06:39,587
what we are curious about
here is the performance.

119
00:06:39,587 --> 00:06:41,817
How long did it take us to
come to this conclusion?

120
00:06:41,817 --> 00:06:46,349
And notice that we compared here our words
to find a with three out of a seven words

121
00:06:46,349 --> 00:06:51,086
in the dictionary and so we're working
through examples, but we really care about

122
00:06:51,086 --> 00:06:55,483
the general case so can we extrapolate
what it means to think about three out of

123
00:06:55,483 --> 00:07:00,300
the seven words to a general case
as the dictionary gets really big.

124
00:07:00,300 --> 00:07:01,860
Well, that seems hard.

125
00:07:01,860 --> 00:07:06,300
So, let's think about maybe some
more examples that will give us

126
00:07:06,300 --> 00:07:08,170
insight into the general case.

127
00:07:08,170 --> 00:07:11,190
And in particular we have to
remember that our binary search tree

128
00:07:11,190 --> 00:07:13,080
might be organized
a little bit differently.

129
00:07:13,080 --> 00:07:17,600
So let's think about the exact
same input a but with a different

130
00:07:17,600 --> 00:07:23,610
characterization of the binary search
tree so a different organization of it.

131
00:07:23,610 --> 00:07:29,350
And so if we had that linear version
of the binary search tree what happens,

132
00:07:29,350 --> 00:07:33,760
how many comparisons we need to do as we
look for the word a amongst the seven

133
00:07:33,760 --> 00:07:37,100
words in the dictionary that we
populated the search tree with.

134
00:07:37,100 --> 00:07:40,730
So again, we compare first to the root and
we see that a comes before e, so

135
00:07:40,730 --> 00:07:42,000
we go to the left.

136
00:07:42,000 --> 00:07:43,670
We compare with the next word.

137
00:07:43,670 --> 00:07:46,730
A is still before e and
so we go to the left.

138
00:07:46,730 --> 00:07:51,190
We compared a with e here, and
we see that we still have to go left.

139
00:07:51,190 --> 00:07:54,390
We compare a with ate,
we still have to go left.

140
00:07:54,390 --> 00:07:56,870
We compare a with at,
we still have to go left.

141
00:07:56,870 --> 00:08:00,470
We compare a with m, and we notice
that now we fall off the tree, and

142
00:08:00,470 --> 00:08:02,150
we see that a is not in there.

143
00:08:02,150 --> 00:08:05,330
But we have to compare with every single
one of the words in our dictionary

144
00:08:05,330 --> 00:08:07,410
in order to come to this conclusion.

145
00:08:07,410 --> 00:08:11,310
So notice that this was
even worse than before

146
00:08:11,310 --> 00:08:14,050
in terms of the number of
comparisons that we had to do.

147
00:08:14,050 --> 00:08:16,660
And so if we're doing worst case analysis,

148
00:08:16,660 --> 00:08:19,240
then this is the kind of tree
that we need to think about.

149
00:08:19,240 --> 00:08:24,020
So, not only did we have to think about
the number of elements in the dictionary,

150
00:08:24,020 --> 00:08:28,950
so here, n was seven, we also had to
think about how the tree was organized,

151
00:08:28,950 --> 00:08:32,250
and what organization would lead
us to the worst case behavior,

152
00:08:32,250 --> 00:08:34,120
the worst possible behavior.

153
00:08:34,120 --> 00:08:39,920
And, so, we see that in this linear tree,
when we're looking for a word

154
00:08:39,920 --> 00:08:43,810
that's not on the tree, in the worst
case we have to make o of n comparisons.

155
00:08:43,810 --> 00:08:48,800
We had to compare our word with every
single one of the words in the dictionary.

156
00:08:48,800 --> 00:08:56,100
Okay, so, that leads us to this analysis
of how can we avoid the worst case?

157
00:08:56,100 --> 00:08:59,730
So in the worse case we
had this linear tree.

158
00:08:59,730 --> 00:09:03,500
And we had to go all the way to
the bottom to the first time that we fell

159
00:09:03,500 --> 00:09:04,450
off the tree.

160
00:09:04,450 --> 00:09:07,690
And then we're only then we'll
be able to return false.

161
00:09:07,690 --> 00:09:11,660
But maybe we can think of
a modification of our data structure,

162
00:09:11,660 --> 00:09:14,090
that will help us avoid the situation.

163
00:09:14,090 --> 00:09:18,772
And so what we'd like to do is think
about how the path that we have

164
00:09:18,772 --> 00:09:22,786
to travel until we fall off
the tree can be controlled.

165
00:09:22,786 --> 00:09:26,559
Or if there is a property of the tree that
we can impose that will make sure that we

166
00:09:26,559 --> 00:09:27,829
don't have to go too far.