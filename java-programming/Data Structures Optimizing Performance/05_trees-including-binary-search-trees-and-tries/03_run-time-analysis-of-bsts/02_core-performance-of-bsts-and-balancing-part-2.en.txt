[MUSIC] So let's think about what
the maximum distance in the tree, what is the maximum distance
between the root and a leaf? Because when we fall off the tree,
that means that we've reached a leaf node in the tree, one that doesn't have
any children, and then when we try to go to a child we get that the node is null,
and so then we return false. Okay, so in these three different
examples of binary search trees, with the same dictionary, we notice that we have very different
maximum distances from root to leaf. So the green tree is the worst,
in terms of how far we have to go down. It contains all seven nodes in a single
path, and so the distance in the tree is the number of nodes in a single
path from the root to the leaf. On the other hand,
if we look at the tree with yellow nodes, we notice that there's always really
short paths from the root to the leaf. And so if we look at each of the leaves,
there's three leaves, each of those are accessible using
only paths that have three nodes. So to get to the leaf that's labelled a,
we go from the root ate to the node at, and then to its child node a,
and a is a leaf node. And similarly to each one of
the leaf nodes we can hop with only three nodes in our path. Now, we can have a binary search tree just
sort of in between, and the blue one has a path that has four nodes on it, and so
its maximum distance until a leaf is four. So this maximum distance notion is
called the height of the tree, and we notice that we can have trees that have
the same number of nodes all together but have different heights. And now thinking back to our example, we notice that the height
really impacts the performance. And so what we'd like to do
is to control the height. We want to keep the height
down as much as we can while still maintaining
the same number of nodes. And this is where balanced binary
search trees get their motivation. This is why we have balanced
binary search trees. The idea is that we want to maintain
roughly the heights of the left and right sub-trees of our trees, so
that we never have these really long, long paths that we might have
to traverse while looking for a single element that
might not be on the tree. And so, a tree, a binary search tree
is called balanced if at every node in the binary search tree,
the height of the left sub-tree and the height of the right sub-tree
differ by no more than one. All right, so
let's work through some examples and here are a few that you can think
about with an in-video quiz. So in the in-video quiz, you noticed that this particular tree
is balanced, and so let's think about what the performance implications are of
having balanced binary search trees. We don't want to just add a whole
bunch of terminology and new data structures just because
they're fun. Well, I kinda do, because I like theory. But, typically,
when you introduce a new data structure, you do it for a reason, and
often that reason is performance. We want to improve the brunt
time of our performance. So let's think about whether
we've accomplished anything with Balanced Binary Search Trees. And you can do some calculations
to see that approximately when you look at a balanced
binary search tree, its height is going to be around log(n) where
(n) is the number of nodes in the tree. And so,
if we can make sure that our left and right sub-trees are always not too
different from each other in terms of height, then we have a control
over the overall height of the tree. And basically, what we're doing here is
making the tree as bushy as possible. We don't want these spindly branches. And what that means is that when we
do the Big O analysis for looking for isWord in this tree is, we see that
in the worst case, even if we have to go until a trial node and run off the
tree, the balance binary search tree in the worst case is still going to only have
to make on the order of log n comparisons, because it only has to go down
the maximum length path in the tree, which has as many nodes as the height and
the height is going to be about log n. So now we can compare the performance
of this single method as we run it on different data structures. And this is a really useful table for
thinking about why we even bother with all the data structures, and the reason is so
that we can optimize our performance. Now for all of these data structures,
if we're really lucky and we find our word right away,
in the best case, they're all going to take
a constant number of operations. So that's not really where we
see the distinctions come in. Where we see the big payoffs are in
the average case and in the worst case. And we see that linked list really both
average case and worst case takes Big O of n times, which can get really slow
if you have really big dictionaries. Binary search trees and balanced binary search trees in
the average case are pretty okay. They're pretty similar I mean, sorry. They're both logarithmic. They're both log n, but the worst case is where really balanced
binary search trees pay off for us. Now it might seem like we might be able
to just avoid the worst case of binary search trees. Why do we need balance? We don't really even
want to think about it. But it turns out that the worst case for binary search trees is actually
something that comes up pretty often. If we have a dictionary that's
already organized almost in order and we try to build a binary search tree
based on that, then what we're going to get is that really spindly,
linear looking binary search tree. So, we're going to get the worst
case performance almost every time. If we think that we're helping ourselves
in pre-processing the data and kind of sorting it, and
then try to build a binary search tree, that's going to be really bad for
performance. And so, it turns out that balanced binary
search trees are really useful, and they're a little bit more complicated,
but they're worth it. And they're especially worth it because
someone else did the work for us. Java already has a built in implementation
of balanced binary search trees. So if you use the TreeSet
class in the Java API, which you'll be doing in the programming
assignment, you can get all the benefits of the balanced binary search trees and
their associated performance payoffs. And so I encourage you to go play with
balanced binary search trees by delving into that programming assignment.