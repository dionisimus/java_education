1
00:00:00,000 --> 00:00:03,749
[MUSIC]

2
00:00:03,749 --> 00:00:08,587
So finally in this video, we're gonna look
at the implementation details of Tries,

3
00:00:08,587 --> 00:00:12,320
and we'll also look at the algorithm for
doing auto-complete.

4
00:00:12,320 --> 00:00:15,050
So by the end of this video,
you'll be able to implement these Tries.

5
00:00:15,050 --> 00:00:17,110
So you'll be all set to go for
your project, and

6
00:00:17,110 --> 00:00:21,812
you'll also be able to implement
that auto-complete algorithm.

7
00:00:21,812 --> 00:00:25,590
So going back to our Trie,
we'll see that just like

8
00:00:25,590 --> 00:00:28,910
the link structures we looked at before,
just like trees.

9
00:00:28,910 --> 00:00:32,790
The key structural piece of the Trie
implementation is going to be

10
00:00:32,790 --> 00:00:34,260
the node class.

11
00:00:34,260 --> 00:00:38,260
We're gonna implement a class called
TrieNode, and let's focus on that first.

12
00:00:39,470 --> 00:00:43,280
So the TrieNode has a number of
things it needs to represent.

13
00:00:43,280 --> 00:00:48,000
One of the things it needs to keep
track of is, does this node end a word?

14
00:00:48,000 --> 00:00:51,730
Because some of the nodes in the Trie
end words, while others do not.

15
00:00:51,730 --> 00:00:56,250
So we'll keep a boolean flag to indicate
whether this particular node represents

16
00:00:56,250 --> 00:00:57,620
a complete word or not.

17
00:00:59,120 --> 00:01:01,670
Another thing that we wanna
store in these nodes,

18
00:01:01,670 --> 00:01:06,830
is the actual text representing the word
that is represented by this node.

19
00:01:06,830 --> 00:01:10,740
We only really need to represent this
text if it actually does end a word.

20
00:01:10,740 --> 00:01:13,010
So otherwise, it'll just be empty.

21
00:01:13,010 --> 00:01:15,800
And again as I mentioned before,
this is an optional field.

22
00:01:15,800 --> 00:01:17,790
You don't have to maintain this field,

23
00:01:17,790 --> 00:01:21,060
because you can always recover
it by tracing down the Trie.

24
00:01:21,060 --> 00:01:25,210
But it makes things a little bit easier to
implement if you do maintain this field.

25
00:01:25,210 --> 00:01:28,110
So, we'll recommend in your implementation
that you do keep this field.

26
00:01:29,600 --> 00:01:31,490
The last piece of the TrieNode,

27
00:01:31,490 --> 00:01:35,240
the most important piece are the links
to the children of this node.

28
00:01:35,240 --> 00:01:36,640
Now, in a binary search tree,

29
00:01:36,640 --> 00:01:40,110
you could represent these links as just
a left pointer and a right pointer.

30
00:01:40,110 --> 00:01:43,410
But in a Trie we have more than
two children, potentially.

31
00:01:43,410 --> 00:01:46,820
So one way we can
represent this is an array.

32
00:01:46,820 --> 00:01:48,090
So we might have an array of,

33
00:01:48,090 --> 00:01:52,530
in this case, length five, because we
have five characters we're dealing with.

34
00:01:52,530 --> 00:01:56,630
But if we were using the whole
alphabet we might have 26 characters.

35
00:01:56,630 --> 00:01:59,080
Or if we wanted to use both lower case and

36
00:01:59,080 --> 00:02:02,050
upper case letters,
we might have twice that many.

37
00:02:02,050 --> 00:02:06,840
And in every single node,
we would want that big array

38
00:02:06,840 --> 00:02:10,201
to have a potential pointer to
a child coming from that character.

39
00:02:10,201 --> 00:02:15,490
So, we might represent that just
like this using an array list.

40
00:02:16,590 --> 00:02:20,460
But if we go back and look at the tribe,
what we can see is that

41
00:02:20,460 --> 00:02:25,000
most of the time a lot of these
entries are going to be empty.

42
00:02:25,000 --> 00:02:28,900
So even in a complete dictionary
we're gonna have a very sparse usage

43
00:02:28,900 --> 00:02:31,820
of this array of pointers
to the next level down.

44
00:02:31,820 --> 00:02:35,870
So that's a lot of wasted space, because
an arrays have to be declared to be

45
00:02:35,870 --> 00:02:38,770
a certain length in order to
access each element in that array.

46
00:02:38,770 --> 00:02:41,780
And we don't necessarily want
to waste all that space.

47
00:02:42,860 --> 00:02:45,390
So at this point, you may be thinking aha,
I know what we can use.

48
00:02:45,390 --> 00:02:48,630
We can use a linked list,
because linked lists grow dynamically,

49
00:02:48,630 --> 00:02:50,450
to accommodate the number
of elements in them.

50
00:02:51,570 --> 00:02:52,700
Well that's true, but

51
00:02:52,700 --> 00:02:56,740
the problem with using a linked list is
that then we don't have that association.

52
00:02:56,740 --> 00:03:01,530
Between a particular position in the list
and the character that it represents.

53
00:03:01,530 --> 00:03:05,250
Here, we're really relying on that
association in order to do those links.

54
00:03:05,250 --> 00:03:06,020
So for these reasons,

55
00:03:06,020 --> 00:03:09,640
we're not going to use an array
list to represent the children.

56
00:03:09,640 --> 00:03:11,920
And we're not going to
use a linked list either,

57
00:03:11,920 --> 00:03:14,100
what we're going to use is
something called a hash map.

58
00:03:15,100 --> 00:03:17,430
Now, we'll go into much more
detail about hash maps and

59
00:03:17,430 --> 00:03:20,280
hash tables in the next
module in this course.

60
00:03:20,280 --> 00:03:24,350
But if you took our course one then you're
already familiar with the concept of

61
00:03:24,350 --> 00:03:24,960
a hash map.

62
00:03:24,960 --> 00:03:28,370
We used then back in our course
one in this specialization.

63
00:03:29,560 --> 00:03:32,440
The idea behind a hash map
is it's going to associate

64
00:03:32,440 --> 00:03:34,950
a key with a particular value.

65
00:03:34,950 --> 00:03:39,030
And in this case, our keys are gonna to
be the characters that are in our words.

66
00:03:39,030 --> 00:03:42,570
And the values are going to be
the children nodes in our tribe.

67
00:03:43,920 --> 00:03:46,990
So you have here
the documentation page for

68
00:03:46,990 --> 00:03:49,870
the hash map class that's built into java.

69
00:03:49,870 --> 00:03:51,720
And we encourage you to look around and

70
00:03:51,720 --> 00:03:54,160
figure out which methods you want
to use in your implementation.

71
00:03:54,160 --> 00:03:59,180
And pay particular attention to
the methods put, which associates a key

72
00:03:59,180 --> 00:04:05,190
with the value, and get which gets
back a value for a particular key.

73
00:04:05,190 --> 00:04:07,630
They'll be a couple more
methods you want to use.

74
00:04:07,630 --> 00:04:11,790
Those are gonna be the main ones you'll
be using when you implement the find and

75
00:04:11,790 --> 00:04:15,630
insert methods in your Trie.

76
00:04:15,630 --> 00:04:17,850
So that's the gist of a TrieNode.

77
00:04:17,850 --> 00:04:22,580
Now let's bring that back to
the trie data structure itself.

78
00:04:22,580 --> 00:04:25,180
Of course,
a trie consists of a bunch of trie nodes,

79
00:04:25,180 --> 00:04:28,040
which are all linked together
via these children links.

80
00:04:28,040 --> 00:04:31,310
So in order to store the entire trie,

81
00:04:31,310 --> 00:04:35,986
all you really need to do is store
a point or a reference to the root node.

82
00:04:35,986 --> 00:04:39,830
So your overall trie data structure,
your dictionary trie,

83
00:04:39,830 --> 00:04:44,660
is really just gonna have one main
pointer, which is the pointer to the root.

84
00:04:44,660 --> 00:04:47,870
And then it's going to implement all the
functionality that we just talked about,

85
00:04:47,870 --> 00:04:52,370
so finding a word in the trie,
inserting a word into the trie.

86
00:04:52,370 --> 00:04:55,360
And then for the last piece of
functionality you'll need for

87
00:04:55,360 --> 00:05:00,450
your project, it's going to implement
this auto-complete functionality.

88
00:05:00,450 --> 00:05:04,317
So let's take a look at how we can
do auto-complete using the trie

89
00:05:04,317 --> 00:05:05,510
data structure.

90
00:05:05,510 --> 00:05:10,220
So we have our partial word,
our word stem ea, and

91
00:05:10,220 --> 00:05:12,000
we want to auto-complete that word.

92
00:05:12,000 --> 00:05:17,800
So what are all the possible completions
that could result from the stem ea?

93
00:05:17,800 --> 00:05:22,370
Well the first step to
solving this problem is to

94
00:05:22,370 --> 00:05:24,212
first find the stem in the trie.

95
00:05:24,212 --> 00:05:27,590
So to do that you use the same
algorithm that we talked about before.

96
00:05:27,590 --> 00:05:31,880
You start at the root and navigate down by
following the appropriate child pointers,

97
00:05:31,880 --> 00:05:33,290
given the characters in the stem.

98
00:05:33,290 --> 00:05:37,430
And maybe you'll find yourself at that
bottom most highlighted yellow node.

99
00:05:38,440 --> 00:05:40,840
And from there you're out of stem words,
so

100
00:05:40,840 --> 00:05:43,402
now you're ready to generate
the auto complete options.

101
00:05:43,402 --> 00:05:47,560
Now notice that you may end up may
be a word and may not be a word,

102
00:05:47,560 --> 00:05:50,440
depending on whether the stem is a word or
not.

103
00:05:50,440 --> 00:05:54,940
But from there, all you need to do
is explore downward from that node.

104
00:05:54,940 --> 00:05:58,890
Finding all the words that you can
find down from that particular node.

105
00:05:58,890 --> 00:06:03,740
And this is just a tree traversal, which
Leo talked to you about in the first or

106
00:06:03,740 --> 00:06:06,550
second lesson in this module.

107
00:06:06,550 --> 00:06:08,410
You can do any kind of tree traversal, and

108
00:06:08,410 --> 00:06:10,910
that will give you a number
of auto-complete options.

109
00:06:10,910 --> 00:06:15,900
But if you want to generate the auto
completions from shortest to longest,

110
00:06:15,900 --> 00:06:20,230
then what you're going to want to do is
perform a level order tree traversal.

111
00:06:20,230 --> 00:06:24,040
Or as Leo explained,
a breath first search,

112
00:06:24,040 --> 00:06:28,330
starting from the node you found when
you navigated based on your stem.

113
00:06:28,330 --> 00:06:31,470
All the way down either to
the bottom of your trie or

114
00:06:31,470 --> 00:06:35,460
until you've generated enough words for
the auto-complete.

115
00:06:35,460 --> 00:06:38,323
So that's it, that's all you
need to know about Tries and

116
00:06:38,323 --> 00:06:40,023
you're ready to do your project.