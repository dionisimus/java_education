1
00:00:00,000 --> 00:00:04,546
[MUSIC]

2
00:00:04,546 --> 00:00:08,171
At this point we have a pretty good
idea of how to traverse trees.

3
00:00:08,171 --> 00:00:11,920
What we're going to do next is dive
into the details of one of these trees.

4
00:00:11,920 --> 00:00:16,030
The truth is, with most trees,
the data's organized in some way.

5
00:00:16,030 --> 00:00:19,504
You're gonna have the highest
priority elements in your tree,

6
00:00:19,504 --> 00:00:22,087
say the top maybe the shortest
words at the top.

7
00:00:22,087 --> 00:00:26,660
You might have them sorted essentially
in terms of their ordering.

8
00:00:26,660 --> 00:00:28,800
There's lots of ways you
can organize the tree.

9
00:00:28,800 --> 00:00:31,253
So as we go forward it makes
sense to do an ordering.

10
00:00:31,253 --> 00:00:35,504
In this case we're gonna look at
an ordering based on a binary search tree.

11
00:00:35,504 --> 00:00:39,310
So by the end of this video' you should
be able to define a Binary Search Tree.

12
00:00:39,310 --> 00:00:43,671
And be able to identify with trees that
are actually valid Binary Search Trees.

13
00:00:45,587 --> 00:00:48,952
So as a quick review of binary search,
we introduced binary search back in course

14
00:00:48,952 --> 00:00:51,919
one, but if you didn't take that
course with us that's totally okay,

15
00:00:51,919 --> 00:00:55,297
I'm just gonna give you a really quick
highlight of what binary search is again.

16
00:00:55,297 --> 00:00:58,391
What we're trying to do is if I
have an array of elements and

17
00:00:58,391 --> 00:01:00,950
I wanna find an element, say Chicago.

18
00:01:00,950 --> 00:01:03,580
In this array how would I do that?

19
00:01:03,580 --> 00:01:06,480
Well if they're sorted,
I can do this really quickly.

20
00:01:06,480 --> 00:01:10,920
I can search a sorted array much
faster than an unsorted array.

21
00:01:10,920 --> 00:01:13,760
So what I can do here,
is essentially start at the middle.

22
00:01:14,810 --> 00:01:20,240
Look at Essen and say what's the
relationship between Chicago and Essen?

23
00:01:20,240 --> 00:01:22,230
Well first off, is Chicago Essen?

24
00:01:22,230 --> 00:01:24,150
No, the words are the same.

25
00:01:24,150 --> 00:01:25,380
But now I can just compare them, and

26
00:01:25,380 --> 00:01:29,760
say well Chicago appears earlier
in the alphabet than Essen does.

27
00:01:29,760 --> 00:01:34,510
So I can essentially now ignore Essen,
and everything to the right of Essen.

28
00:01:34,510 --> 00:01:38,500
Because I know all of those are gonna be
words that start with letters greater

29
00:01:38,500 --> 00:01:39,839
than E, E or greater.

30
00:01:41,270 --> 00:01:43,048
And now I can just look at
the other half of the array.

31
00:01:43,048 --> 00:01:45,870
So I've actually gotten rid of half
of the elements just with one check,

32
00:01:45,870 --> 00:01:47,640
that's why this is so powerful.

33
00:01:47,640 --> 00:01:51,580
So now I'm gonna look at Beijing, that's
the middle of the other half of the array.

34
00:01:51,580 --> 00:01:54,962
And now I'm gonna ask it what's the
difference between Beijing and Chicago.

35
00:01:54,962 --> 00:01:58,425
Well, they're not the same, so
I'm gonna do the same comparison,

36
00:01:58,425 --> 00:02:01,648
Beijing is now less than Chicago,
so I can eliminate Beijing and

37
00:02:01,648 --> 00:02:04,410
everything to the left of Beijing.

38
00:02:04,410 --> 00:02:06,590
And now we can go to the middle
of the remaining array,

39
00:02:06,590 --> 00:02:11,510
which at this point is just Chicago, and
check, and I've actually found Chicago.

40
00:02:11,510 --> 00:02:13,896
So this is why Binary Search is so
powerful is that again,

41
00:02:13,896 --> 00:02:16,546
we get rid of half of the elements
every time we do a comparison.

42
00:02:16,546 --> 00:02:21,713
So we can find things in O(log n) time.

43
00:02:21,713 --> 00:02:26,726
So sorted arrays are fantastic, then,
for search, because of that run time but

44
00:02:26,726 --> 00:02:30,796
where sorted arrays are bad is in
terms of insertion and removal.

45
00:02:30,796 --> 00:02:35,586
If I try to insert a city into this,
say San Diego, well that's gonna be not so

46
00:02:35,586 --> 00:02:38,630
bad because I can just
insert it right at the end.

47
00:02:38,630 --> 00:02:41,690
But if I want to insert another city,
say Pullman where I grew up,

48
00:02:41,690 --> 00:02:45,700
now I'm gonna have to move some around
to be able to make room for that.

49
00:02:45,700 --> 00:02:48,720
And we know that arrays cannot be
dynamically resized either, so

50
00:02:48,720 --> 00:02:51,440
we're gonna have to always make
copies into bigger arrays.

51
00:02:51,440 --> 00:02:52,462
It gets really messy.

52
00:02:52,462 --> 00:02:56,408
What we want are all the nice features
of a linked list in terms of insertion,

53
00:02:56,408 --> 00:02:59,379
but all the benefits in terms
of search of a sorted array.

54
00:02:59,379 --> 00:03:03,046
And we're gonna get that
from a Binary Search Tree.

55
00:03:03,046 --> 00:03:07,402
Say the idea behind a binary search tree
is take all these elements in this array

56
00:03:07,402 --> 00:03:11,956
and just organize them as a tree, so all I
have to do is essentially pull these out,

57
00:03:11,956 --> 00:03:17,200
make them tree nodes, connect them as a
tree, and now I have a Binary Search Tree.

58
00:03:17,200 --> 00:03:20,450
So now I can do the same kind of searching
I did within an array, but I can also

59
00:03:20,450 --> 00:03:24,930
get the benefit of a fast insert and
a fast removal that a tree provides.

60
00:03:27,480 --> 00:03:31,750
So, what do I have to have to make
this a quote binary Search Tree.

61
00:03:31,750 --> 00:03:34,945
So a Binary Search Tree has to,
first of all, be a binary tree.

62
00:03:34,945 --> 00:03:37,200
So each node can have
at most two children.

63
00:03:38,590 --> 00:03:45,540
On top of that, the left subtree has
to be strictly less than the parent.

64
00:03:45,540 --> 00:03:47,860
So everything in the left
subtree must be lesser and

65
00:03:47,860 --> 00:03:51,600
everything in the right subtree must
be greater than that parent element.

66
00:03:53,520 --> 00:03:56,630
So now that we have an idea of
the definition of a Binary Search Tree,

67
00:03:56,630 --> 00:04:00,510
what I wanted to do is give you a number
of trees and ask you which of these,

68
00:04:00,510 --> 00:04:02,770
essentially are Binary Search Trees.

69
00:04:02,770 --> 00:04:05,436
So what you do go into the in-video quiz,
answer the question and

70
00:04:05,436 --> 00:04:07,337
we'll come back and
talk through all of them.

71
00:04:09,254 --> 00:04:09,940
Welcome back.

72
00:04:09,940 --> 00:04:13,060
I hope that the in-video quiz helped and
you're starting to get a better feel for

73
00:04:13,060 --> 00:04:15,310
what is a Binary Search Tree.

74
00:04:15,310 --> 00:04:16,710
So let's look at these one by one.

75
00:04:16,710 --> 00:04:20,962
First off,
A is in fact a Binary Search Tree, right?

76
00:04:20,962 --> 00:04:24,210
42 is greater than 32,
32 is greater than 12.

77
00:04:24,210 --> 00:04:31,510
So the ordering is preserved, and
no node has more than two children.

78
00:04:31,510 --> 00:04:34,297
So this is a Binary Search Tree.

79
00:04:34,297 --> 00:04:39,937
B was not a binary search tree because if
you noticed, 42 is greater than 32 but

80
00:04:39,937 --> 00:04:44,462
32 is part of the right sub tree of 42,
so it has to be greater.

81
00:04:44,462 --> 00:04:46,799
So that's not allowed,
this isn't a binary search tree.

82
00:04:48,950 --> 00:04:50,950
C is also not a binary search tree,
but for

83
00:04:50,950 --> 00:04:55,200
a different reason,
42 here has 3 children.

84
00:04:55,200 --> 00:04:59,120
Three children make it not a binary tree,
and hence not a binary search tree.

85
00:05:00,130 --> 00:05:05,720
And lastly, you notice that in D,
this was actually the trickiest of them,

86
00:05:05,720 --> 00:05:09,190
42 is less than 45.

87
00:05:09,190 --> 00:05:10,020
You can't have this.

88
00:05:10,020 --> 00:05:15,505
You can't have an element in the left sub
tree which is greater than the parent.

89
00:05:15,505 --> 00:05:20,686
So this would not be allowed 45 should
actually be on the right side of 42 so

90
00:05:20,686 --> 00:05:25,087
at this point we have a good feel for
what binary search trees are.

91
00:05:25,087 --> 00:05:28,523
What we're gonna do next is find out how
do we perform a search within that binary

92
00:05:28,523 --> 00:05:29,150
search tree.