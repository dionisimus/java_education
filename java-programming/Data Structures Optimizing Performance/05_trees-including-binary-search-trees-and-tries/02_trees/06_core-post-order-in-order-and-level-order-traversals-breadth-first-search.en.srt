1
00:00:04,370 --> 00:00:05,046
[SOUND] Welcome back.

2
00:00:05,046 --> 00:00:08,150
In this video we're gonna continue
our work with traversals.

3
00:00:08,150 --> 00:00:11,425
Specifically, we're gonna learn
how to perform an in-order,

4
00:00:11,425 --> 00:00:14,290
a post-order, and
a level-order traversal on a tree.

5
00:00:16,700 --> 00:00:21,020
So remember from the last video
that we had a preorder traversal.

6
00:00:21,020 --> 00:00:24,059
And the idea for the preorder
traversal was to visit a node itself,

7
00:00:24,059 --> 00:00:28,200
then visit all that's left subtree and
then visit all that's right subtree.

8
00:00:28,200 --> 00:00:31,630
And that produced this order of nodes
being visited, as you can see there.

9
00:00:32,880 --> 00:00:35,212
Our goal here is to come up
with some different orderings.

10
00:00:35,212 --> 00:00:39,423
So the first is,
this is called PostOrder, and

11
00:00:39,423 --> 00:00:44,940
the idea here is to visit in the order D,
E, B, F, G, C, A.

12
00:00:44,940 --> 00:00:48,260
And is essentially going very deep and
kinda coming back.

13
00:00:49,330 --> 00:00:55,060
So we can actually do this just by
rearranging this steps of visit yourself,

14
00:00:55,060 --> 00:00:57,490
visit all your left subtree and
visit all your right subtree.

15
00:00:57,490 --> 00:00:58,700
If you just done with this order,

16
00:00:58,700 --> 00:01:01,200
you could actually produce
a postorder traversal.

17
00:01:01,200 --> 00:01:05,583
So what's you gonna do is to take
a moment, pause, think about it and

18
00:01:05,583 --> 00:01:08,080
I will come back in just a moment.

19
00:01:08,080 --> 00:01:10,280
So hopefully you saw that
the current ordering won't work.

20
00:01:10,280 --> 00:01:12,980
This ordering is, again,
a preorder traversal.

21
00:01:12,980 --> 00:01:14,200
So I need to rearrange this.

22
00:01:14,200 --> 00:01:17,750
And the very first thing you probably
saw is that I can't visit myself first.

23
00:01:17,750 --> 00:01:21,970
If I visited myself first and I start
with the root, I'd be visiting A, and

24
00:01:21,970 --> 00:01:24,450
A's the very end, not the very beginning.

25
00:01:24,450 --> 00:01:25,850
So I can't visit myself first.

26
00:01:25,850 --> 00:01:29,030
I'm gonna have to push visit yourself
down at least one step to make this work.

27
00:01:30,430 --> 00:01:33,170
So now at least I can visit
my left subtree first.

28
00:01:33,170 --> 00:01:35,110
I'm gonna go visit my left subtree for

29
00:01:35,110 --> 00:01:40,020
A, then visit my left subtree for B, visit
my left subtree for D, which is nothing.

30
00:01:40,020 --> 00:01:43,910
And then finally, I visit D and
when I do that I wanna print D.

31
00:01:43,910 --> 00:01:45,754
Then I'm gonna come back up to B.

32
00:01:45,754 --> 00:01:47,830
I'm gonna print B.

33
00:01:47,830 --> 00:01:51,410
Oh, wait, that's not what we wanted.

34
00:01:53,290 --> 00:01:57,380
What we want is to essentially
print E before we print B.

35
00:01:57,380 --> 00:02:00,630
So to do that, I just have to
flip the order one more time.

36
00:02:00,630 --> 00:02:04,922
So all I have to do is swap, and
now I have the ordering that I want.

37
00:02:04,922 --> 00:02:06,160
We'll trace through this again.

38
00:02:06,160 --> 00:02:08,310
So I'm gonna visit all my left subtree.

39
00:02:08,310 --> 00:02:09,090
Start at A.

40
00:02:09,090 --> 00:02:12,320
Then I move down to B,
visit all B subtree.

41
00:02:12,320 --> 00:02:12,850
Go to D.

42
00:02:12,850 --> 00:02:17,710
Visit all of D subtree,
and now I come back, and

43
00:02:17,710 --> 00:02:21,130
I visit all of these right subtree, and
then I come back, and now I print D.

44
00:02:22,390 --> 00:02:23,360
Come back up for B, and

45
00:02:23,360 --> 00:02:28,130
we'll visit all of B's right subtree,
which is gonna print me E, and

46
00:02:28,130 --> 00:02:31,850
then I'm gonna come back to B and print B
and now we've got the ordering we want.

47
00:02:31,850 --> 00:02:35,070
So just rearranging these steps
gave us the PostOrder Traversal.

48
00:02:36,170 --> 00:02:40,220
So I want you to do next, we have one more
ordering of these which is interesting,

49
00:02:40,220 --> 00:02:44,230
and I want you to think about what
order will these nodes be visited.

50
00:02:44,230 --> 00:02:47,600
So now, I'm gonna visit my left subtree
first, then I'm gonna visit myself,

51
00:02:47,600 --> 00:02:49,530
and then I'm gonna visit
all my right subtree.

52
00:02:49,530 --> 00:02:51,810
This is commonly called
an InOrder Traversal.

53
00:02:51,810 --> 00:02:54,650
So go ahead and take the end video quiz,
see which one you think is gonna

54
00:02:54,650 --> 00:02:57,710
be the right ordering, and
we'll come back in a moment.

55
00:02:57,710 --> 00:02:58,740
Welcome back.

56
00:02:58,740 --> 00:03:00,788
I'm hoping that one wasn't too tricky.

57
00:03:00,788 --> 00:03:04,410
So if you're starting to get a good feel
for recursion this probably wasn't to bad.

58
00:03:04,410 --> 00:03:05,890
If your struggling with recursion though,
again,

59
00:03:05,890 --> 00:03:08,890
we are gonna have some support
videos in the next few videos.

60
00:03:09,970 --> 00:03:14,278
So what does this do, you are gonna
visit all of your subtree first, so

61
00:03:14,278 --> 00:03:17,490
I'm gonna go all of B,
I'm sorry, from A I'm gonna

62
00:03:17,490 --> 00:03:22,510
all of B subtree then I'm gonna do
all of D, and then I'm gonna visit.

63
00:03:22,510 --> 00:03:26,020
Now, all of D's subtree,
which will give me nothing.

64
00:03:26,020 --> 00:03:29,087
And then I come back to D, and
I visit it, and I print D.

65
00:03:29,087 --> 00:03:32,864
And then, I come back and I print B,
and then I'm gonna go down and

66
00:03:32,864 --> 00:03:34,530
I'm gonna print E.

67
00:03:34,530 --> 00:03:37,650
So this is actually the one that we first
started exploring when we were talking

68
00:03:37,650 --> 00:03:42,230
about the postorder traversal.

69
00:03:42,230 --> 00:03:43,690
So this ordering gives us InOrder.

70
00:03:43,690 --> 00:03:45,680
So just again,
we're rearranging these steps,

71
00:03:45,680 --> 00:03:48,480
all you need to do to get
these different traversals.

72
00:03:48,480 --> 00:03:51,150
There's one more traversal
that I'd like to do, and

73
00:03:51,150 --> 00:03:52,450
that's known as a Level Order Traversal.

74
00:03:53,490 --> 00:03:59,250
In the level order traversal here,
we do A, B, C, D, E, F, G.

75
00:04:00,540 --> 00:04:04,560
And I wanna point out that this is
essentially a breadth first traversal.

76
00:04:04,560 --> 00:04:06,490
In the previous ones we've been
looking at, the preorder and

77
00:04:06,490 --> 00:04:08,720
the post order,
those are depth first traversals.

78
00:04:10,130 --> 00:04:12,790
So let's explore how to do
this breadth first traversal.

79
00:04:12,790 --> 00:04:15,440
And the first thing to note is that this
is gonna be a little more challenging.

80
00:04:16,690 --> 00:04:19,230
The reason it's gonna be more
challenging is that I wanna

81
00:04:19,230 --> 00:04:22,660
hone in on the scenario where
you're looking at node B.

82
00:04:24,270 --> 00:04:24,980
So you visited A,

83
00:04:24,980 --> 00:04:29,660
you visited B, and the next thing
you're supposed to visit is node C.

84
00:04:30,720 --> 00:04:33,460
But you'll notice, B isn't connected to C.

85
00:04:33,460 --> 00:04:36,320
B only has a connection to A, D, or E.

86
00:04:37,380 --> 00:04:40,100
How is it gonna know to go to C next?

87
00:04:40,100 --> 00:04:42,580
For doing this through recursion,
the ways that we just showed.

88
00:04:42,580 --> 00:04:44,410
This is gonna be really hard.

89
00:04:44,410 --> 00:04:47,337
We need essentially something to
keep track of the things we've seen.

90
00:04:47,337 --> 00:04:49,530
The way we're gonna do
this is by keeping a list.

91
00:04:51,260 --> 00:04:55,180
And if I keep a list I can essentially
add to it whenever I see new nodes, and

92
00:04:55,180 --> 00:04:56,700
I can remove from the start.

93
00:04:56,700 --> 00:04:58,390
That may not make to much sense just yet,
so

94
00:04:58,390 --> 00:05:00,180
lets just walk through
what I mean by that.

95
00:05:01,600 --> 00:05:05,730
So I've got my list and I'm gonna start
it just by putting A onto the list.

96
00:05:07,218 --> 00:05:10,421
I'm not gonna count A as visited yet,
I'm just putting it on the list.

97
00:05:10,421 --> 00:05:14,330
And then, I'm gonna look at my list and
remove the first element on my list.

98
00:05:14,330 --> 00:05:16,980
As long as the list has elements,
I'm gonna keep removing.

99
00:05:16,980 --> 00:05:19,210
So I'm gonna find it,
it has elements, I'm gonna remove A.

100
00:05:20,720 --> 00:05:22,360
When I remove A, I mark it as visited.

101
00:05:23,470 --> 00:05:27,932
And then, I'm gonna take all
the children of A, both B and C, and

102
00:05:27,932 --> 00:05:30,296
I'm gonna put them onto the list.

103
00:05:30,296 --> 00:05:32,180
I'm gonna pen them at
the back of the list.

104
00:05:33,540 --> 00:05:37,255
My next step, is I'm gonna remove B.

105
00:05:37,255 --> 00:05:39,627
And I'm gonna put B in my visited list.

106
00:05:39,627 --> 00:05:44,580
The last thing I have to
do is add B's children,

107
00:05:44,580 --> 00:05:46,670
which are D and E, to my main list.

108
00:05:49,810 --> 00:05:51,462
Next step proceeding
just like the last one.

109
00:05:51,462 --> 00:05:54,352
I'm gonna remove C from
the front of the list.

110
00:05:54,352 --> 00:05:57,504
I'm gonna add C's children F and
G to the list.

111
00:05:57,504 --> 00:05:58,711
I'm gonna do it all over again.

112
00:05:58,711 --> 00:05:59,879
I'm gonna remove D.

113
00:05:59,879 --> 00:06:02,570
I'm gonna add D as visited.

114
00:06:02,570 --> 00:06:04,740
And then,
I wanna add these children to the list.

115
00:06:04,740 --> 00:06:09,243
So I could actually add null here or I
could just check to see if they're null or

116
00:06:09,243 --> 00:06:11,336
not and then choose not to add them.

117
00:06:11,336 --> 00:06:12,296
You could do it either way.

118
00:06:12,296 --> 00:06:14,640
I'll talk about it when we get
to the code here in a moment.

119
00:06:16,090 --> 00:06:18,790
So then I'm gonna check E, again,

120
00:06:18,790 --> 00:06:23,296
I don't have any children to
push on the list, so I won't.

121
00:06:23,296 --> 00:06:26,546
Gonna check F and then we'll move to G.

122
00:06:26,546 --> 00:06:29,190
Now, if I've done those steps,
I've done exactly what we wanted.

123
00:06:29,190 --> 00:06:33,050
This is the level order traversal or
breath first traversal of this tree.

124
00:06:34,360 --> 00:06:35,670
Nice, so

125
00:06:35,670 --> 00:06:40,230
what I want you to realize is that we were
using this list kind of like a queue.

126
00:06:40,230 --> 00:06:41,510
Or a line at a grocery store.

127
00:06:42,570 --> 00:06:47,810
So if you think about it, a queue,
just like a line, works like this.

128
00:06:47,810 --> 00:06:51,770
If you're at the very, if you come
up to a new line, if you're polite,

129
00:06:51,770 --> 00:06:54,570
what you're gonna do is add
yourself to the end of the list.

130
00:06:56,580 --> 00:06:59,100
Who gets to go next when the ATM is open?

131
00:06:59,100 --> 00:07:00,419
Well, the person at the front of the line.

132
00:07:02,280 --> 00:07:03,390
So you remove from the front.

133
00:07:05,450 --> 00:07:06,510
This kind of data structure,

134
00:07:06,510 --> 00:07:09,290
this interaction with
a list is known as a queue.

135
00:07:09,290 --> 00:07:12,970
And it's also sometimes called first in,
first out, or FIFO.

136
00:07:15,090 --> 00:07:19,296
So now that we have this notion
of a queue, queues exist in Java.

137
00:07:19,296 --> 00:07:22,760
So you'll notice that there's an interface
called Queue that has Insert,

138
00:07:22,760 --> 00:07:25,046
which is insert at the end and
that's called add.

139
00:07:25,046 --> 00:07:25,925
It also has Remove,

140
00:07:25,925 --> 00:07:29,200
which is remove from the front which
is exactly the behavior we want.

141
00:07:29,200 --> 00:07:31,480
You can also look at the first
element by doing Examine.

142
00:07:33,220 --> 00:07:37,420
Turns out that now we can
code this using this queue.

143
00:07:37,420 --> 00:07:40,020
So what I'm gonna do is have
this in the BinaryTree class.

144
00:07:40,020 --> 00:07:42,600
I'm gonna call this
a level order traversal.

145
00:07:42,600 --> 00:07:45,740
And I'm gonna start by
creating one of these cubes.

146
00:07:45,740 --> 00:07:47,330
I'm gonna create Queue of TreeNodes.

147
00:07:48,340 --> 00:07:51,180
And it turns out I can actually
use LinkedList for this.

148
00:07:51,180 --> 00:07:55,618
Because LinkedList implements Queue, nice.

149
00:07:55,618 --> 00:07:58,930
So I'm gonna create a list of this
TreeNodes or Queue of these TreeNodes.

150
00:07:58,930 --> 00:08:02,250
And I'm gonna add root at the start,
and that's gonna get things going.

151
00:08:03,310 --> 00:08:08,054
Now, as long as the queue isn't empty,
I'm gonna keep removing elements

152
00:08:08,054 --> 00:08:11,463
from the queue and
adding their children to the list.

153
00:08:11,463 --> 00:08:17,629
So the first step within my loop is gonna
be to remove the front node in the list.

154
00:08:17,629 --> 00:08:19,530
And then I'm going to check
to see if it's null or not.

155
00:08:20,680 --> 00:08:23,280
If it's null, there was an empty tree,
I shouldn't do anything with it.

156
00:08:25,160 --> 00:08:29,675
If it isn't null, then I'm gonna visit it,
and then I'm gonna add its LeftChild and

157
00:08:29,675 --> 00:08:31,760
its RightChild to the list.

158
00:08:31,760 --> 00:08:35,620
But I do wanna note, I don't necessarily
have to add the LeftChild, if it's null.

159
00:08:35,620 --> 00:08:38,140
I could check if it's
null before I add it.

160
00:08:38,140 --> 00:08:39,004
This is a choice you could make.

161
00:08:41,587 --> 00:08:44,880
And the last thing, again,
is I'm gonna add that RightChild.

162
00:08:44,880 --> 00:08:48,754
So at this point we have a good idea
of how to do a level order traversal.

163
00:08:48,754 --> 00:08:52,750
And you're gonna actually use this idea in
this week's project, working with tries.