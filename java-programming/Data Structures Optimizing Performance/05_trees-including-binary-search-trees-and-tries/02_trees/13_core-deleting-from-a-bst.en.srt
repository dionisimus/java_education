1
00:00:00,000 --> 00:00:04,254
[MUSIC]

2
00:00:04,254 --> 00:00:08,010
>> In the last video we saw how to
insert into a binary search tree.

3
00:00:08,010 --> 00:00:08,860
In this video we're gonna

4
00:00:08,860 --> 00:00:11,160
start looking at how to remove
an element from a binary search tree.

5
00:00:11,160 --> 00:00:13,610
And you won't have to do removal for
your project, so

6
00:00:13,610 --> 00:00:15,420
we're gonna look at this
really at just a high level.

7
00:00:15,420 --> 00:00:17,930
So by the end of this video

8
00:00:17,930 --> 00:00:19,969
you should be able to delete
an object from a binary search tree.

9
00:00:21,680 --> 00:00:23,560
So let's think about deletion
in a couple of scenarios.

10
00:00:24,810 --> 00:00:28,350
The first is what do I wanna do if I
have this binary search tree here and

11
00:00:28,350 --> 00:00:29,100
I wanna delete seven?

12
00:00:30,270 --> 00:00:31,620
That's actually gonna be really clean.

13
00:00:31,620 --> 00:00:33,270
Right?
Seven is a leaf node.

14
00:00:33,270 --> 00:00:38,140
I can essentially just remove the link
from five to seven and I'm done.

15
00:00:38,140 --> 00:00:43,280
So by setting five's
right pointer to be null,

16
00:00:43,280 --> 00:00:45,880
the garbage collector will
clean this up for us.

17
00:00:45,880 --> 00:00:47,240
So this one's nice and clean.

18
00:00:47,240 --> 00:00:50,860
Leaf nodes, easy to remove.

19
00:00:50,860 --> 00:00:51,980
Let's look at another example.

20
00:00:51,980 --> 00:00:54,250
So I've changed the tree
around a little bit.

21
00:00:54,250 --> 00:00:55,720
And let's say now I wanna remove five.

22
00:00:55,720 --> 00:00:57,670
So this one's little bit more difficult,
right?

23
00:00:57,670 --> 00:01:00,190
Because I can't just cut
the link from ten to five,

24
00:01:00,190 --> 00:01:02,570
because if I did that I'd lose seven.

25
00:01:02,570 --> 00:01:04,840
And I want seven to remain in my tree.

26
00:01:04,840 --> 00:01:09,850
But if I only have one element below me,
I can actually just hoist that element up.

27
00:01:09,850 --> 00:01:13,240
And what I mean by that is
essentially just take the pointer

28
00:01:13,240 --> 00:01:18,810
that's going from ten to five and
make it now point to seven.

29
00:01:18,810 --> 00:01:24,130
And just by changing that reference, so
ten's left reference to seven, again,

30
00:01:24,130 --> 00:01:26,920
the garbage collector will
clean up five for us.

31
00:01:26,920 --> 00:01:30,650
So these two scenarios are fairly
clean and aren't too hard to coat.

32
00:01:30,650 --> 00:01:32,690
There is gonna be one scenario that's
gonna be a little bit trickier.

33
00:01:33,870 --> 00:01:36,120
So let's look at a whole other tree here.

34
00:01:36,120 --> 00:01:37,850
I made some changes to the tree.

35
00:01:37,850 --> 00:01:39,510
And the idea here is to delete ten.

36
00:01:39,510 --> 00:01:43,005
And what I want you to do is just pause
for a few seconds, think about it, and

37
00:01:43,005 --> 00:01:44,129
then we'll come back.

38
00:01:46,671 --> 00:01:47,360
All right.

39
00:01:47,360 --> 00:01:48,820
As you were working through that one,

40
00:01:48,820 --> 00:01:51,210
you almost instantly saw
that this is tricky, right?

41
00:01:51,210 --> 00:01:53,580
Trying to remove an element
that has two children?

42
00:01:53,580 --> 00:01:55,920
There aren't really clean ways to do this.

43
00:01:55,920 --> 00:02:00,306
I can't hoist up fifteen because then I've
got problems with both five and twelve,

44
00:02:00,306 --> 00:02:02,424
are supposed to be children of fifteen.

45
00:02:02,424 --> 00:02:03,961
And there's just, this gets really messy.

46
00:02:03,961 --> 00:02:06,717
So I want to tell you is essentially
the algorithm to solve this in

47
00:02:06,717 --> 00:02:08,010
the general case.

48
00:02:08,010 --> 00:02:11,430
The way to do this is to essentially
realize that I could replace ten

49
00:02:11,430 --> 00:02:13,580
with something else.

50
00:02:13,580 --> 00:02:18,230
They way that I'm gonna do that is I'm
gonna look through, again this is tricky,

51
00:02:18,230 --> 00:02:21,909
I'm gonna look through my right
subtree to find the smallest element.

52
00:02:23,350 --> 00:02:25,820
The smallest element on my right
sub tree is gonna be twelve.

53
00:02:25,820 --> 00:02:29,740
Now I wanna point out something really
important about finding the smallest

54
00:02:29,740 --> 00:02:31,010
element in your right sub tree.

55
00:02:31,010 --> 00:02:37,395
If it's the smallest element, you know
that it's left reference is null, right?

56
00:02:37,395 --> 00:02:41,040
Twelve's left reference has to be null
because if it were anything else,

57
00:02:41,040 --> 00:02:42,010
that thing would be smaller.

58
00:02:43,170 --> 00:02:46,420
So we know that there's only,
at most, one child of twelve, and

59
00:02:46,420 --> 00:02:47,820
that's going to be important
here in just a moment.

60
00:02:49,000 --> 00:02:52,690
So let's find the smallest value in the
right sub tree, and then what I'm going to

61
00:02:52,690 --> 00:02:55,580
do is hoist that value up, but
just the value, not the node.

62
00:02:55,580 --> 00:02:58,910
So what I'm going to do is take ten,
remove the value ten,

63
00:02:58,910 --> 00:03:01,030
and replace it with twelve.

64
00:03:01,030 --> 00:03:03,890
And then you're gonna say,
well, wait a second.

65
00:03:03,890 --> 00:03:05,320
Now you've got duplicates in your tree.

66
00:03:05,320 --> 00:03:07,260
I absolutely do.

67
00:03:07,260 --> 00:03:11,937
And the way that I'm gonna
handle this is I'm going to now

68
00:03:11,937 --> 00:03:16,920
perform a delete on twelve on
the sub tree rooted at fifteen.

69
00:03:16,920 --> 00:03:21,380
So I'm gonna delete this duplicate.

70
00:03:21,380 --> 00:03:23,010
And you might say, well, wait a second,

71
00:03:23,010 --> 00:03:25,310
that could be complex,
deleting this one, too.

72
00:03:25,310 --> 00:03:30,400
But it won't be because we know that
at least, at most, it has one child.

73
00:03:30,400 --> 00:03:34,230
And from the earlier examples we saw,
deleting a leaf node is easy and

74
00:03:34,230 --> 00:03:36,900
deleting a node that has just
one child is actually easy.

75
00:03:36,900 --> 00:03:39,660
So removing this duplicate
isn't going to be too bad.

76
00:03:39,660 --> 00:03:43,090
The hard part, which is recognizing
where you can find the element and

77
00:03:43,090 --> 00:03:44,950
how to bring that up in.

78
00:03:44,950 --> 00:03:47,220
So, now that you have a good
idea of how to delete,

79
00:03:47,220 --> 00:03:48,880
you could potentially
code this on your own.

80
00:03:48,880 --> 00:03:49,830
I encourage you to do so.

81
00:03:51,420 --> 00:03:53,900
So, in this lesson,
you've actually learned a great deal.

82
00:03:53,900 --> 00:03:57,000
You've learned how to create trees and
what trees are in computer science.

83
00:03:57,000 --> 00:04:00,570
And that trees play a large
role in a number of

84
00:04:00,570 --> 00:04:02,690
things that we do as computer scientists.

85
00:04:02,690 --> 00:04:06,510
We have explored different ways of
traversing these trees, and we have

86
00:04:06,510 --> 00:04:10,620
looked really closely at binary search
trees doing search, insert, and delete.

87
00:04:10,620 --> 00:04:15,110
There are a number of trees, again,
in the field of Computer Science and

88
00:04:15,110 --> 00:04:17,960
I encourage you to look at more of
these for more details on your own.

89
00:04:17,960 --> 00:04:21,390
Next what we will do is look
at the run time analysis for

90
00:04:21,390 --> 00:04:25,280
binary search trees to see, really,
are these better than other approaches?