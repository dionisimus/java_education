1
00:00:00,000 --> 00:00:03,687
[MUSIC]

2
00:00:03,687 --> 00:00:07,801
All right, in that last video you saw the
idea behind how we're going to generate

3
00:00:07,801 --> 00:00:10,177
spelling suggestions for misspelled words.

4
00:00:10,177 --> 00:00:13,950
In this video we'll get into a little bit
more details of the algorithm, and this

5
00:00:13,950 --> 00:00:17,629
will help you with your implementation for
part of the project in this module.

6
00:00:18,740 --> 00:00:21,830
So by the end of this video you'll be able
to describe the details of the algorithm

7
00:00:21,830 --> 00:00:25,320
that your gonna to implement in order
to generate these spelling suggestions.

8
00:00:27,170 --> 00:00:32,100
So here is the algorithm, in a little
bit more detail than you saw last time.

9
00:00:32,100 --> 00:00:36,110
It's actually going to generate
the list of suggested words for

10
00:00:36,110 --> 00:00:39,180
a misspelled word that the user types.

11
00:00:39,180 --> 00:00:41,830
And I'm gonna walk you through
this algorithm step by step.

12
00:00:42,870 --> 00:00:45,744
What you can see, at the top,
is the algorithm and

13
00:00:45,744 --> 00:00:49,388
then at the bottom I'm going to
maintain two data structures.

14
00:00:49,388 --> 00:00:54,495
A queue, which Leo has talked to you
about before, in which you've used

15
00:00:54,495 --> 00:00:59,533
in the auto completion component of
the assignment in the last module.

16
00:00:59,533 --> 00:01:03,885
And then the list of suggestions
that you ultimately the functions

17
00:01:03,885 --> 00:01:07,857
gonna return back as suggestions for
this misspelled word.

18
00:01:07,857 --> 00:01:11,350
And you'll see how those get filled
in as the algorithm progresses.

19
00:01:11,350 --> 00:01:13,430
So, first step in the algorithm.

20
00:01:13,430 --> 00:01:16,560
I'm going to take that misspelled word,
that string and

21
00:01:16,560 --> 00:01:17,729
I'm going to add it to my queue.

22
00:01:18,850 --> 00:01:20,850
Then, I'm going to enter a loop.

23
00:01:20,850 --> 00:01:25,160
So, this loop says, while I don't have
enough suggestions, right now I have none,

24
00:01:25,160 --> 00:01:26,960
so I definitely don't have enough.

25
00:01:26,960 --> 00:01:30,530
And my queue still has more
elements in it, it's not empty,

26
00:01:30,530 --> 00:01:32,774
I'll proceed to the body of the loop.

27
00:01:32,774 --> 00:01:33,856
So in the body of the loop,

28
00:01:33,856 --> 00:01:36,920
the first thing we do, is we take
that first string off of the queue.

29
00:01:36,920 --> 00:01:40,140
So in this case,
it's my original misspelled word, speel.

30
00:01:40,140 --> 00:01:41,780
So I'll take that off of the queue, and

31
00:01:41,780 --> 00:01:43,937
I'll set it aside because
I'm gonna work with it.

32
00:01:43,937 --> 00:01:45,500
So you can see it off to the side there.

33
00:01:46,940 --> 00:01:51,790
Then I'm going to generate all of
the strings that are one step away

34
00:01:51,790 --> 00:01:57,070
from that thing I removed from my
queue as we saw in the last video.

35
00:01:57,070 --> 00:02:02,480
So, all of the strings that have
produced with substitutions, insertions,

36
00:02:02,480 --> 00:02:03,680
or deletions.

37
00:02:03,680 --> 00:02:05,090
And I'll put those into the queue.

38
00:02:06,810 --> 00:02:07,640
Then what I'll do,

39
00:02:07,640 --> 00:02:13,055
is I'll take, of those, the things
that actually represent real words.

40
00:02:13,055 --> 00:02:15,120
And I'll add them to my
list of suggestions.

41
00:02:16,790 --> 00:02:18,880
Then I'm going to go back
to the top of the loop and

42
00:02:18,880 --> 00:02:23,350
check, am I done, do I have enough
suggestions, and is my queue empty?

43
00:02:23,350 --> 00:02:24,550
Well my queue is not empty,

44
00:02:24,550 --> 00:02:28,990
and let's say I don't have enough
suggestions yet, I want to keep going.

45
00:02:28,990 --> 00:02:30,690
So, what do I do?

46
00:02:30,690 --> 00:02:32,230
I repeat the process.

47
00:02:32,230 --> 00:02:33,710
I go into the loop.

48
00:02:33,710 --> 00:02:35,720
I remove the first string from the queue.

49
00:02:35,720 --> 00:02:37,030
I set it aside.

50
00:02:37,030 --> 00:02:40,330
It's going to be a special word that
I'm going to use in the next few steps.

51
00:02:40,330 --> 00:02:43,830
And then I'll generate all
the strings that are one step away

52
00:02:43,830 --> 00:02:47,650
from that new word that I've removed, and
I'll add those to the queue at the end.

53
00:02:49,430 --> 00:02:53,450
From there, I just repeat the process
of what I did originally.

54
00:02:53,450 --> 00:02:57,557
From that new list of words I generated,
or strings I generated, I take the ones

55
00:02:57,557 --> 00:03:01,936
that are actually words, and I move them
down into the suggestions list, and so on.

56
00:03:01,936 --> 00:03:07,004
And this process is just going to repeat,
taking new words off the queue,

57
00:03:07,004 --> 00:03:10,270
generating potential words to explore.

58
00:03:10,270 --> 00:03:14,160
And adding the real words we found
to the list of spelling suggestions.

59
00:03:14,160 --> 00:03:18,550
When I've got enough suggestions,
I'll return that list of suggestions.

60
00:03:18,550 --> 00:03:19,530
That's really it.

61
00:03:19,530 --> 00:03:22,020
That's the algorithm that you're
going to be implementing.

62
00:03:22,020 --> 00:03:24,290
See, I told you,
it's not really that complicated.

63
00:03:25,330 --> 00:03:28,920
There is one optimization that you can do.

64
00:03:28,920 --> 00:03:31,450
You may have noticed that in this process

65
00:03:31,450 --> 00:03:36,120
of doing this generation of possible
words, we're gonna see some repeats.

66
00:03:36,120 --> 00:03:40,250
So for example, from apeel,
we can get right back to speel,

67
00:03:40,250 --> 00:03:42,890
which was the original
misspelled word we started with.

68
00:03:42,890 --> 00:03:46,400
So, an optimization you can do,
is you can keep track of the words or

69
00:03:46,400 --> 00:03:50,620
strings you've already generated and
not revisit those strings,

70
00:03:50,620 --> 00:03:52,850
so don't add them back into the queue.

71
00:03:52,850 --> 00:03:56,700
You have to be a little bit careful about
how you implement this optimization,

72
00:03:56,700 --> 00:04:00,820
because if you don't implement it well,
you could end up doing more work to

73
00:04:00,820 --> 00:04:06,340
optimize than you would do if you just let
those strings exist in the queue again.

74
00:04:07,950 --> 00:04:12,870
And the last thing that we need to think
about is, now that we have this list of

75
00:04:12,870 --> 00:04:17,910
suggestions, in what order should
we present these to the user?

76
00:04:17,910 --> 00:04:22,820
Now this is kind of a subtle question and
one that we're not going to

77
00:04:22,820 --> 00:04:25,560
ask you to explore for
the required part of the project but

78
00:04:25,560 --> 00:04:29,080
that you can explore in
extension if you're interested.

79
00:04:29,080 --> 00:04:32,910
So, if you were to turn these words in
the order that they were to appear in

80
00:04:32,910 --> 00:04:38,040
the suggestions list, what order they're
going to be in, is just ordered from

81
00:04:38,040 --> 00:04:42,980
close to the original word typed, to
farther away to the original word typed.

82
00:04:42,980 --> 00:04:46,370
In terms of those number
of transformations applied.

83
00:04:46,370 --> 00:04:49,020
Now that may be the right thing to do, but

84
00:04:49,020 --> 00:04:51,080
you also might want to
get a little bit smarter.

85
00:04:51,080 --> 00:04:55,410
Because some of those words are going to
be more likely to appear in the English

86
00:04:55,410 --> 00:04:57,070
language than others.

87
00:04:57,070 --> 00:05:01,010
So you might want to do something like,
take the more commonly occurring words and

88
00:05:01,010 --> 00:05:04,300
move them to the front
of the suggestions list.

89
00:05:04,300 --> 00:05:05,700
That's something you could explore doing.

90
00:05:06,710 --> 00:05:08,820
Another thing you might
want to think about is,

91
00:05:08,820 --> 00:05:11,640
some transformations
are more likely than others.

92
00:05:11,640 --> 00:05:12,370
For example,

93
00:05:12,370 --> 00:05:17,200
it's pretty likely that you accidentally
type two letters in the reverse order.

94
00:05:17,200 --> 00:05:19,580
Well, in order to
generate that suggestion,

95
00:05:19,580 --> 00:05:22,760
you would need to go two steps
away from your original word because

96
00:05:22,760 --> 00:05:26,500
you need to transform both
of the transpose letters.

97
00:05:26,500 --> 00:05:30,140
But you may decide that that
transposition is actually

98
00:05:30,140 --> 00:05:33,560
more likely to occur than one
of your one step away words.

99
00:05:33,560 --> 00:05:37,790
So you might decide to move that sort of
transformation up in the list as well.

100
00:05:37,790 --> 00:05:39,677
So those are just two ideas for

101
00:05:39,677 --> 00:05:44,524
optimizations on the list of spelling
suggestions that you could explore.

102
00:05:44,524 --> 00:05:49,364
And those kinds of optimizations
are some of the things that are built in

103
00:05:49,364 --> 00:05:52,925
to real world spell checkers and
spell suggesters.

104
00:05:52,925 --> 00:05:56,500
So with this in mind, you can
implement this piece of the project.

105
00:05:56,500 --> 00:06:00,410
And next, we'll talk about the very
last piece of the project, which is

106
00:06:00,410 --> 00:06:05,110
to implement, to extend on these ideas,
to find paths between two different words.