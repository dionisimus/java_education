1
00:00:00,000 --> 00:00:04,525
[MUSIC]

2
00:00:04,525 --> 00:00:07,500
In the last video,
we began working with hash tables.

3
00:00:07,500 --> 00:00:10,640
Now one of the hardest parts to hash
tables is dealing with collisions.

4
00:00:10,640 --> 00:00:13,704
So in this video,
we're gonna do two things.

5
00:00:13,704 --> 00:00:16,111
You should be able to describe
alternative methods for

6
00:00:16,111 --> 00:00:17,795
handling collisions in a hash table.

7
00:00:17,795 --> 00:00:20,769
And you should be able to identify
some other challenges associated with

8
00:00:20,769 --> 00:00:21,360
hash tables.

9
00:00:23,370 --> 00:00:26,230
So, first off, let's talk about
where these collisions happen.

10
00:00:26,230 --> 00:00:29,082
So I'm trying to do a hash table insert,
and I've got the value 9.

11
00:00:29,082 --> 00:00:30,917
I'm gonna run it through my hash function.

12
00:00:30,917 --> 00:00:33,098
We'll assume my hash function is K mod 7,

13
00:00:33,098 --> 00:00:35,351
just like we talked
about in the last video.

14
00:00:35,351 --> 00:00:36,966
I'm gonna run that through and, again,

15
00:00:36,966 --> 00:00:39,690
I had 7 because I have 7
elements in the array.

16
00:00:39,690 --> 00:00:42,403
I'm gonna run it through the hash
function, and it produces an index or

17
00:00:42,403 --> 00:00:43,090
a hash code of 2.

18
00:00:43,090 --> 00:00:48,501
That's gonna allow me now to
insert 9 into the hash table.

19
00:00:48,501 --> 00:00:50,915
Next thing I want to insert is 16.

20
00:00:50,915 --> 00:00:53,539
So I run 16 through my hash function.

21
00:00:53,539 --> 00:00:59,360
That also produces a hash code of 2,
and now what do I do?

22
00:00:59,360 --> 00:01:00,070
This is a collision.

23
00:01:01,100 --> 00:01:04,432
I already have 9 in there at
the place I wanna put 16, and

24
00:01:04,432 --> 00:01:06,882
I can't keep both in
one spot in the array.

25
00:01:06,882 --> 00:01:09,590
So what we're gonna do is talk about
really two solutions for this.

26
00:01:09,590 --> 00:01:11,920
And the first of these
solutions is linear probing.

27
00:01:12,920 --> 00:01:17,100
And the idea behind linear probing is
just look for the next open spot and

28
00:01:17,100 --> 00:01:18,630
put the value there.

29
00:01:18,630 --> 00:01:22,270
So what we do here is we have a collision
at location two or index two, and

30
00:01:22,270 --> 00:01:25,928
what I'm gonna do is look at the very
next location and see, is it open?

31
00:01:25,928 --> 00:01:29,519
And because it is open,
I'm just gonna put 16 there.

32
00:01:29,519 --> 00:01:31,880
So that's essentially how we're
gonna work with linear probing.

33
00:01:32,940 --> 00:01:34,380
So let's do a couple more examples.

34
00:01:34,380 --> 00:01:36,940
So now I try to insert 3.

35
00:01:36,940 --> 00:01:39,089
I do K mod 7 again on 3.

36
00:01:39,089 --> 00:01:40,770
That's gonna produce the index 3.

37
00:01:40,770 --> 00:01:42,030
I go to index 3, and

38
00:01:42,030 --> 00:01:45,510
I get another collision, right,
because now 16's in my way.

39
00:01:45,510 --> 00:01:48,800
So, I'm gonna look for
the next open element and place 3 there.

40
00:01:50,860 --> 00:01:52,060
Let's do one more of these.

41
00:01:52,060 --> 00:01:53,290
Now, I'm gonna try to do a search.

42
00:01:53,290 --> 00:01:56,720
I'm gonna check to see whether or
not 2 is in my hash table.

43
00:01:56,720 --> 00:01:59,520
So I'm gonna run 2 through my has
function to give me the hash code 2.

44
00:01:59,520 --> 00:02:02,920
And I'm gonna look at the next two,
and I find nine there.

45
00:02:02,920 --> 00:02:03,820
But I can't stop there,

46
00:02:03,820 --> 00:02:08,910
right, because I may have put 2 in a later
location because of linear probing.

47
00:02:08,910 --> 00:02:12,720
So now I have to look at the next element
to see, is there something there?

48
00:02:12,720 --> 00:02:15,569
So, first I look at 9, then I look at 16.

49
00:02:16,720 --> 00:02:20,290
And 16's not 2, but there's still more
valid data, so I have to keep looking.

50
00:02:20,290 --> 00:02:21,962
So now I'm gonna look at 3.

51
00:02:21,962 --> 00:02:24,620
3 is not 2 either, but
I have to keep looking.

52
00:02:24,620 --> 00:02:28,066
And I finally find an open spot,
and that tells me 2's not in there.

53
00:02:28,066 --> 00:02:31,629
Now you'll notice that I just had to look
at a number of spots just to find out

54
00:02:31,629 --> 00:02:33,453
whether or not 2 was in my hash table.

55
00:02:33,453 --> 00:02:37,180
And this is disconcerting, because again,
we like hash tables because we can look,

56
00:02:37,180 --> 00:02:39,900
the goal was to look at one spot and
immediately get an answer.

57
00:02:41,280 --> 00:02:42,820
So there are some ways.

58
00:02:42,820 --> 00:02:47,050
So this is gonna get particularly
problematic when the hash table gets full.

59
00:02:47,050 --> 00:02:49,610
And we'll talk little bit more
about what we mean by full and

60
00:02:49,610 --> 00:02:51,500
how we're gonna address
that as we go forward.

61
00:02:53,350 --> 00:02:55,636
I do wanna mention there's another
approach you can take other than

62
00:02:55,636 --> 00:02:56,246
linear probing.

63
00:02:56,246 --> 00:02:58,010
And that's called random probing.

64
00:02:58,010 --> 00:03:02,100
And the idea there is just essentially,
instead of going just the next step over

65
00:03:02,100 --> 00:03:05,690
to see for an open spot, you essentially
try to jump a random number of steps,

66
00:03:05,690 --> 00:03:09,160
based on seeding at random with a key.

67
00:03:09,160 --> 00:03:11,644
Now, there's a whole bunch of different
trade-offs associated with that.

68
00:03:11,644 --> 00:03:15,570
But, most importantly, the cost of doing
random operations tends to be expensive.

69
00:03:15,570 --> 00:03:17,152
So, this has problems as well.

70
00:03:19,404 --> 00:03:26,000
The second solution I wanna talk about
after linear probing is separate chaining.

71
00:03:26,000 --> 00:03:28,680
Now, the idea behind separate
chaining is pretty simple actually.

72
00:03:29,710 --> 00:03:33,940
Instead of just keeping a single element
within my array, why don't I keep a list?

73
00:03:34,980 --> 00:03:37,793
So when I insert 9, I'm gonna do
the same hash function as before.

74
00:03:37,793 --> 00:03:39,465
It's gonna give me the index 2.

75
00:03:39,465 --> 00:03:43,530
I'm gonna look at index 2, and
I'm gonna add 9 to my list.

76
00:03:45,260 --> 00:03:46,930
Now when I try to insert 16,

77
00:03:46,930 --> 00:03:52,930
I'm gonna look at my location at index 2,
I'm gonna find the list.

78
00:03:52,930 --> 00:03:55,760
Now the list already has 9 in it,
but it's a list.

79
00:03:55,760 --> 00:03:56,890
So I can just add 16 to it.

80
00:03:58,150 --> 00:03:59,620
So it's actually a really clean solution.

81
00:03:59,620 --> 00:04:03,130
So just keep essentially a linked list
at each location in your hash table.

82
00:04:05,150 --> 00:04:08,810
It's often preferred in terms of
implementations, but it has it's own set

83
00:04:08,810 --> 00:04:11,579
of drawbacks, which are a little bit
too advanced for this topic right now.

84
00:04:13,700 --> 00:04:17,370
All right, I do want to mention two
last challenges with hash tables.

85
00:04:17,370 --> 00:04:20,010
The first is we're talking about
when the hash table gets too full,

86
00:04:20,010 --> 00:04:22,930
you're going to need to do
something to help fix things.

87
00:04:22,930 --> 00:04:25,849
When hash tables get, and
the rule of thumb is about 70%,

88
00:04:25,849 --> 00:04:28,530
about 70% full you're
gonna want to resize it.

89
00:04:28,530 --> 00:04:32,330
Essentially create a larger hash table
in order to avoid these collisions and

90
00:04:32,330 --> 00:04:33,310
all these problems that come up.

91
00:04:34,480 --> 00:04:38,092
The problem with resizing is because
we're working with arrays and

92
00:04:38,092 --> 00:04:40,120
arrays are essentially statically sized,

93
00:04:40,120 --> 00:04:42,730
it requires me to create
an entirely new table.

94
00:04:42,730 --> 00:04:46,120
Create a new hash function and
reinsert everything.

95
00:04:46,120 --> 00:04:47,477
This can be expensive.

96
00:04:47,477 --> 00:04:50,250
And the only time you're going to
be really concerned about expense,

97
00:04:50,250 --> 00:04:52,708
is if you're working
on a real time system.

98
00:04:52,708 --> 00:04:54,330
So if you're landing the space shuttle and

99
00:04:54,330 --> 00:04:57,350
the space shuttle's essentially doing
a hash table operation and it decides to

100
00:04:57,350 --> 00:05:02,060
resize, and all of a sudden you can't use
your controls, that's not gonna work okay.

101
00:05:02,060 --> 00:05:06,114
So that's one of the concerns you might
have with hash tables is just this

102
00:05:06,114 --> 00:05:06,915
resize cost.

103
00:05:06,915 --> 00:05:11,729
The second challenge is that hash tables
don't have an implicit ordering of data

104
00:05:11,729 --> 00:05:13,584
within the structure itself.

105
00:05:13,584 --> 00:05:17,775
So thinking back to our binary
search trees, if I want to know,

106
00:05:17,775 --> 00:05:21,096
if I want to iterate through
all the data in order,

107
00:05:21,096 --> 00:05:25,390
I can pretty easily walk this binary
search tree to say A B C E L M Q.

108
00:05:26,410 --> 00:05:28,640
But there's no such ordering
within a hash table.

109
00:05:28,640 --> 00:05:31,250
So if you actually want an ordered
list of all the elements,

110
00:05:31,250 --> 00:05:32,972
you have to pull them out and
essentially sort them.

111
00:05:32,972 --> 00:05:35,960
So when we're thinking about hash tables,

112
00:05:35,960 --> 00:05:40,040
realize that the big pros to hash
tables is that it has, on average case,

113
00:05:40,040 --> 00:05:44,540
O of 1 lookup, insert, and remove,
and that's pretty fantastic.

114
00:05:44,540 --> 00:05:45,880
But there are a couple of drawbacks.

115
00:05:45,880 --> 00:05:48,840
The first is that those resizing costs can
impact you if you're working say on a real

116
00:05:48,840 --> 00:05:51,590
time system and
that there is no implicit data ordering.

117
00:05:51,590 --> 00:05:53,660
You want to keep that in mind
when you're selecting whether or

118
00:05:53,660 --> 00:05:55,460
not a hash table is gonna work for
your project.

119
00:05:56,920 --> 00:06:00,870
So in summary, we've looked at a couple
of solutions for handling collisions.

120
00:06:00,870 --> 00:06:04,180
The first was linear probing, and
the second was separate chaining.

121
00:06:04,180 --> 00:06:07,180
We've also seen some additional
challenges for hash tables, and

122
00:06:07,180 --> 00:06:11,160
next what we're gonna do is start looking
at how to use hash tables in Java.