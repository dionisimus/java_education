[MUSIC] In this week's programming assignment,
you're going to make your document class little bit more efficient by implementing
the efficient document class. And then, you're going to do some
benchmarking to test the running time between the basic document class
you implemented last time and the efficient document class that
you're going to implement this week. So again, before you start, just make sure
that you're all set up and ready to go. You should have the code. And if you don't like your
solutions from last week, you're welcome to download our solutions
for BasicDocument.java and Document.java. So, feel free to grab that code and
just drop it in to your workspace, and then you could use our
solutions from last week. So for this week,
you're going to be working with the efficient document class and
the document benchmarking class. So, you'll want to go ahead and
open those up. So, here's EfficientDocument and
here's DocumentBenchmarking. And the first thing you're
going to do is implement the code in EfficientDocument. So, in EfficientDocument, there's really only one major thing
that you're going to have to implement which is this processText function
in EfficientDocument.java. The idea behind the EfficientDocument
class is that instead of counting the words, sentences and
syllables, every time you call, getNumWords, getNumSentences,
getNumSyllables. It's just going to make one pass
through the text when you create a new EfficientDocument object. And then, store the number of words,
syllables, and sentences in the text for later use. So that those get our functions for
number of sentences, words, and syllables, can be very efficient. All right, so that's it for part one. And then in part two,
you're going to do some benchmarking. So, we have several steps here but the
crux of what you're going to do in part two is,
your goal is to get the code to output this list of running times for
BasicDocument and EfficientDocument. And you can see that the types for BasicDocument are going to be larger
than the types for EfficientDocument. And as the size the document gets larger,
they all get larger. And the idea will be to take this output
and then plot it in Google sheets or any other spreadsheet program that you
like, or graphing program that you like, so that you can see the trends for
each of these implementations. So, what you're going to do in this part
is your going to go to EfficientDocument, or sorry, to DocumentBenchmarking.java and
you can see that we've got a main method here already partially implemented for
you. And it's the four loop here,
if you look at this little TODO here, you can see that it's the four loop
here that you want to implement. So, you're basically going to implement
some code that follows the pseudocode and does some benchmarking and outputs,
some timing information about running the BasicDocument and EfficientDocument
flush score for each of those documents. So, are each of those classes. And you'll see that at the top, we have
some variables that you can play around with, feel free to change
any of these documents, any of these constants up here,
to get better numbers and a better graph. So, that's the crux of part two. You will implement this four loop
according to the pseudocode here, then you will get this output,
you'll take this output, you'll put it into some graphing
program like Google Sheets. And then, you'll just look at the trends,
look at the graph that it produces to compare the running time of BasicDocument
to the running time of EfficientDocument. That's about it for the assignment and in order to submit this you need to again,
submit your Java code for grading. So this time, you're going to create
a ZIP file creating all three files, Document.java, EfficientDocument.java,
and BasicDocument.java. And your going to submit that ZIP file for
both parts one and part two. And again, we're looking for different aspects of those files
with each of our grading methods. And then, submit. And just like for last week,
if you get any errors, we have provided you with the greater and
you can run it to fix your errors, and then please submit your
code until you get for credit. If you get stuck running into problems,
go ahead and reach out to others in the class
on that discussion forum. There are mentors around there,
people around who are happy to help you. So try that first,
have fun with this assignment.