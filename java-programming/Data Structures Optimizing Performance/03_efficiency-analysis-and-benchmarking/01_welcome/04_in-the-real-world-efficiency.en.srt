1
00:00:00,000 --> 00:00:03,364
[MUSIC]

2
00:00:08,942 --> 00:00:11,058
Everyone wants to write efficient code, or

3
00:00:11,058 --> 00:00:14,370
putting it another way,
no one wants to write inefficient code.

4
00:00:14,370 --> 00:00:19,810
If your program takes ten
minutes to display the welcome

5
00:00:19,810 --> 00:00:24,163
to my program screen, everybody knows this
is bad, okay fine we wanna avoid that.

6
00:00:25,500 --> 00:00:30,410
But making an active decision to write
efficient code is a little different and

7
00:00:30,410 --> 00:00:33,760
it's important because it
influences how you design it.

8
00:00:33,760 --> 00:00:38,350
You make different decisions for the
underpinnings of the logic for your code,

9
00:00:38,350 --> 00:00:39,750
the way you're going to approach it.

10
00:00:41,560 --> 00:00:46,290
Writing efficient code is really important
for us at Google because of how it

11
00:00:46,290 --> 00:00:50,880
plays out for millions of users
making billions of requests everyday.

12
00:00:52,310 --> 00:00:56,720
When in the group that I work in,
when we submit changes to the code

13
00:00:56,720 --> 00:01:00,590
one of the things that it gets evaluated
on before it can actually go live

14
00:01:00,590 --> 00:01:06,020
is its impact on the latency
that's seen by end users.

15
00:01:06,020 --> 00:01:11,420
There are certain pieces of our system and
as you might imagine, Google's

16
00:01:11,420 --> 00:01:15,060
system is a stack of different components,
each communicating with each other.

17
00:01:16,410 --> 00:01:20,580
But in our system there is a few places
in particular that we look at where

18
00:01:21,680 --> 00:01:25,940
taken as a whole,
if the user's request takes so

19
00:01:25,940 --> 00:01:29,680
many milliseconds to be
processed that's okay.

20
00:01:29,680 --> 00:01:35,590
But in the specific pieces of that system,
even though they may run separately and

21
00:01:35,590 --> 00:01:40,380
in parallel with the rest of the software,
we have much tighter constraints.

22
00:01:40,380 --> 00:01:44,540
For the areas that I work in,
if I submit a change and

23
00:01:44,540 --> 00:01:48,350
it increases the amount of
time that it takes to run

24
00:01:49,390 --> 00:01:54,330
that part of the request by more
than one tenth of one millisecond.

25
00:01:55,370 --> 00:01:57,027
I have to justify it.

26
00:01:57,027 --> 00:02:00,837
We keep that tight of constraint on it.

27
00:02:00,837 --> 00:02:04,543
If I blow that constraint,
I have to go back and

28
00:02:04,543 --> 00:02:09,500
fix my code, or I have to prove
why it's okay for me to do that.

29
00:02:10,570 --> 00:02:14,620
In our case,
it's because we look at it and, well,

30
00:02:14,620 --> 00:02:18,490
a tenth of a millisecond here,
not a big deal, maybe.

31
00:02:18,490 --> 00:02:22,470
A tenth of a millisecond there,
not a big deal, maybe.

32
00:02:22,470 --> 00:02:25,865
But when you get as many programmers
writing code as we do at Google,

33
00:02:25,865 --> 00:02:29,980
suddenly those tenths of milliseconds
really start adding up, and

34
00:02:29,980 --> 00:02:33,040
now we're at the point where
submitting your search request

35
00:02:33,040 --> 00:02:36,760
takes three hours to satisfy which
obviously isn't gonna work for you.

36
00:02:36,760 --> 00:02:38,660
You're gonna go off and
look for somebody else.

37
00:02:40,170 --> 00:02:45,480
So, efficiency is hard and

38
00:02:45,480 --> 00:02:49,580
it's important and
you have to design for it.

39
00:02:49,580 --> 00:02:50,970
You have to plan for it.

40
00:02:50,970 --> 00:02:53,273
And you have to watch it all the time.

41
00:02:53,273 --> 00:02:58,232
Because those inefficiencies sneak in and
mount up.

42
00:02:58,232 --> 00:03:01,400
And this little change today
may not seem like a big deal.

43
00:03:02,740 --> 00:03:07,525
But when all those little changes get
tacked together, suddenly it's forever.

44
00:03:07,525 --> 00:03:10,346
So, be careful.

45
00:03:10,346 --> 00:03:11,697
Yay, efficiency.