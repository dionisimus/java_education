1
00:00:00,000 --> 00:00:04,367
[MUSIC]

2
00:00:04,367 --> 00:00:08,025
So we've been talking about insertion
sorting and selection sorting, and

3
00:00:08,025 --> 00:00:10,470
we've been analyzing their performance.

4
00:00:10,470 --> 00:00:13,610
And in this video we're going to
talk about yet another algorithm

5
00:00:13,610 --> 00:00:18,070
to accomplish the exact same task,
which is sorting a collection of data.

6
00:00:18,070 --> 00:00:21,690
And so by the end of this video,
you'll be able to describe this algorithm,

7
00:00:21,690 --> 00:00:23,490
the merge sort algorithm.

8
00:00:23,490 --> 00:00:26,050
And the reason we're talking
about it is because it's a very

9
00:00:26,050 --> 00:00:29,190
different kind of algorithm from
the ones that we've looked at so far.

10
00:00:29,190 --> 00:00:31,080
And in particular, it uses recursion.

11
00:00:31,080 --> 00:00:35,900
So you'll be able to explain how this
particular algorithm uses recursion, and

12
00:00:35,900 --> 00:00:38,270
then discuss its performance.

13
00:00:38,270 --> 00:00:41,480
So let's start with a description
of the algorithm and

14
00:00:41,480 --> 00:00:44,510
how it goes about sorting
a collection of data.

15
00:00:44,510 --> 00:00:48,700
So we're presented with some input
data and we think of it as a list.

16
00:00:48,700 --> 00:00:52,240
And let's just think about
the easiest case we might have.

17
00:00:52,240 --> 00:00:55,430
And in the easiest case that
list will only have one element.

18
00:00:55,430 --> 00:00:59,110
And so if our list has just one element
then really we don't need to do anything.

19
00:00:59,110 --> 00:01:00,120
We can return.

20
00:01:00,120 --> 00:01:03,080
Because just one element
is already sorted.

21
00:01:03,080 --> 00:01:05,400
There's nothing that
could be out of place so

22
00:01:05,400 --> 00:01:08,830
it's already all organized
in ascending order.

23
00:01:08,830 --> 00:01:13,590
Okay, so if we're in that special
base case, the small case.

24
00:01:13,590 --> 00:01:17,309
Then we're done, but if not then we
actually have to do some work and

25
00:01:17,309 --> 00:01:19,334
the merge sort algorithm says well,

26
00:01:19,334 --> 00:01:23,932
I've got a big collection of data that I
need to organize from smallest to biggest.

27
00:01:23,932 --> 00:01:28,199
And that seems really hard so why don't
I make my life a little bit easier and

28
00:01:28,199 --> 00:01:30,630
just cut the list right in half.

29
00:01:30,630 --> 00:01:35,710
And then I'll focus on say the first
have of the collections of data and

30
00:01:35,710 --> 00:01:38,470
say can I organize that piece.

31
00:01:38,470 --> 00:01:42,050
Okay, maybe that's a slightly easier task
because I've got fewer elements there.

32
00:01:42,050 --> 00:01:44,800
And so I'll think about how
to do that in a minute.

33
00:01:44,800 --> 00:01:49,370
But, suppose I was able to organize
that first half of the list.

34
00:01:49,370 --> 00:01:52,050
Then I go ahead and say, well what
about the second half of the list?

35
00:01:52,050 --> 00:01:53,100
Can I organize that?

36
00:01:53,100 --> 00:01:56,250
Can I sort it in order
from smallest to biggest?

37
00:01:56,250 --> 00:01:59,550
And again, that's a smaller collection
than what I started with so

38
00:01:59,550 --> 00:02:01,180
maybe it's a little bit easier.

39
00:02:01,180 --> 00:02:03,220
And so once I do these two steps,

40
00:02:03,220 --> 00:02:07,950
then I've got two smaller lists
that are each sorted, and now what

41
00:02:07,950 --> 00:02:12,910
remains is to somehow combine those
two lists while maintaining the order.

42
00:02:12,910 --> 00:02:17,520
And so I'd wanna merge the two sorted
lists and then output the result.

43
00:02:17,520 --> 00:02:22,490
And so we really haven't done
any comparison of elements yet,

44
00:02:22,490 --> 00:02:23,750
in this description.

45
00:02:23,750 --> 00:02:28,090
But what we've done is described a high
level strategy of how we might sort

46
00:02:28,090 --> 00:02:32,180
of big list by dividing the problem
into something a little bit smaller.

47
00:02:32,180 --> 00:02:36,520
Sort the first half, sort the second half,
and then merge the results

48
00:02:36,520 --> 00:02:40,910
while preserving the order of the two
smaller lists that are sorted.

49
00:02:40,910 --> 00:02:45,280
Okay, so that seems like a plausible
strategy, when we have a big problem,

50
00:02:45,280 --> 00:02:47,580
break it down, divide and conquer.

51
00:02:47,580 --> 00:02:53,270
But we've really kind of punted,
we've postponed our solution for

52
00:02:53,270 --> 00:02:57,900
how do we actually go ahead and
sort these two smaller sublists?

53
00:02:57,900 --> 00:03:00,500
We haven't said how we're
going to do that, and

54
00:03:00,500 --> 00:03:04,110
this is when something really
powerful comes into play.

55
00:03:04,110 --> 00:03:07,430
What we're doing here is
using the power of recursion.

56
00:03:07,430 --> 00:03:11,370
And what recursion is all about
is breaking a big problem down

57
00:03:11,370 --> 00:03:13,410
into a smaller subproblem and

58
00:03:13,410 --> 00:03:19,390
then a manageable amount of work to
incrementally change what we need to do.

59
00:03:19,390 --> 00:03:23,730
So we had a big list to begin with,
and we're going to

60
00:03:23,730 --> 00:03:27,530
think about solving the problem on
the big list as solving smaller,

61
00:03:27,530 --> 00:03:30,930
similar subproblems and
then combining the results.

62
00:03:30,930 --> 00:03:36,370
And what's really helping us out here is
that once was broken down the problem

63
00:03:36,370 --> 00:03:41,000
into smaller and smaller and smaller list,
eventually we know what to do because

64
00:03:41,000 --> 00:03:45,300
eventually, if we get down to just a
single element, then that list has sorted.

65
00:03:45,300 --> 00:03:47,650
Okay, so, this all kinda
feels a little bit abstract.

66
00:03:47,650 --> 00:03:51,690
So, let's work through an example and
see how it all plays out.

67
00:03:51,690 --> 00:03:54,910
So let's think about a five element list.

68
00:03:54,910 --> 00:03:57,510
And think about the numbers,
the integers between one and

69
00:03:57,510 --> 00:04:02,850
five that we've messed around a bit,
and so they're not in order anymore.

70
00:04:02,850 --> 00:04:07,026
And so we'd like to use the merge sort
algorithm to rearrange the numbers in this

71
00:04:07,026 --> 00:04:09,222
list and put them in order.

72
00:04:09,222 --> 00:04:13,800
So, according to our merge sort algorithm,
we first of all observe that this list has

73
00:04:13,800 --> 00:04:16,740
more than one element, so
we're not in the base case.

74
00:04:16,740 --> 00:04:18,240
We have to do something, and

75
00:04:18,240 --> 00:04:22,830
so we're going to divide the list in
half and then sort the two halves.

76
00:04:22,830 --> 00:04:27,980
So we start by dividing the list in
half and so we've got the first half.

77
00:04:27,980 --> 00:04:32,830
Well, half of 5 is two and a half and
so we round down to two elements, and

78
00:04:32,830 --> 00:04:36,400
then the rest of the list
is in the second half.

79
00:04:36,400 --> 00:04:41,200
And now we need to sort that first half,
but sorting means using merge sort, again,

80
00:04:41,200 --> 00:04:44,850
using our overall strategy, and so
that means we start at the beginning and

81
00:04:44,850 --> 00:04:48,710
we check, does the list that contained
5 and 3 have just one element?

82
00:04:48,710 --> 00:04:50,050
No, it's got two.

83
00:04:50,050 --> 00:04:52,710
So we need to divide
that list in half again.

84
00:04:52,710 --> 00:04:57,440
And so the list that contains 5 and
3 gets divided down into a list that

85
00:04:57,440 --> 00:05:00,930
just contains 5, and
a list that just contains 3.

86
00:05:00,930 --> 00:05:06,960
And similarly the list that contained 2,
4, and 1, gets divided down into halves.

87
00:05:06,960 --> 00:05:12,340
One that contains just the element 2,
and then the second part of that list is

88
00:05:12,340 --> 00:05:15,580
the list that contains the elements 4 and
1.

89
00:05:15,580 --> 00:05:18,040
Okay and now what we want to do is

90
00:05:18,040 --> 00:05:22,120
sort each of those halves that we
got out of dividing our lists.

91
00:05:22,120 --> 00:05:28,920
And so we look at that first half of
the list, and that just has the element 5.

92
00:05:28,920 --> 00:05:34,010
And so when we reach down to this base
case of a list with just one element,

93
00:05:34,010 --> 00:05:38,290
then that one list is already sorted so
we can return.

94
00:05:38,290 --> 00:05:42,210
And so when we've sorted the list five,
well we don't need to do anything.

95
00:05:42,210 --> 00:05:47,060
So the yellow shading indicates
that that list is sorted.

96
00:05:47,060 --> 00:05:51,700
And similarly the list that just contains
3 and the list that just contains 2.

97
00:05:51,700 --> 00:05:56,240
When we look at the list it contains 4 and
1 and we try to apply merge sort to that

98
00:05:56,240 --> 00:06:00,060
list in order to sort that half so
then we can merge all the way back.

99
00:06:00,060 --> 00:06:02,450
We notice that it has
more than one element so

100
00:06:02,450 --> 00:06:06,720
we need to divide it in half and
then we'll be sorting each of it's halves,

101
00:06:06,720 --> 00:06:10,860
but they're just one element list so
they're already sorted.

102
00:06:10,860 --> 00:06:16,300
Okay, so what we've done at this point
is just broken down our problem over and

103
00:06:16,300 --> 00:06:23,190
over again to narrow into the smallest
sub problems that we can actually manage.

104
00:06:23,190 --> 00:06:27,210
And so we've started with a big list and
we've divided, and divided, and

105
00:06:27,210 --> 00:06:30,920
divided in half until we get a whole bunch
of lists that each have one element.

106
00:06:30,920 --> 00:06:33,620
And so those one element lists are sorted.

107
00:06:33,620 --> 00:06:37,470
But now we have to do that crucial
step of merging the sorted lists

108
00:06:37,470 --> 00:06:39,330
while preserving the order.

109
00:06:39,330 --> 00:06:41,210
So let's think about what that happens.

110
00:06:41,210 --> 00:06:42,950
We want to merge the lists 5 and 3,

111
00:06:42,950 --> 00:06:46,440
and that means we're going
to combine their elements.

112
00:06:46,440 --> 00:06:50,700
The resulting list is gonna have two
elements, but we want to do it in order,

113
00:06:50,700 --> 00:06:54,170
so we choose to pick off the elements
from the top of the list, or

114
00:06:54,170 --> 00:06:55,410
the head of the list.

115
00:06:55,410 --> 00:06:57,210
Based on which one is smaller.

116
00:06:57,210 --> 00:07:00,580
And so we're going to start with
the 3 because it's smaller, and

117
00:07:00,580 --> 00:07:02,300
afterwards put in the 5.

118
00:07:02,300 --> 00:07:05,750
And notice that what we got as a result
is a sorted list, but it's a little bit

119
00:07:05,750 --> 00:07:10,280
bigger than what we had before, and so
it's bringing us one step closer to our

120
00:07:10,280 --> 00:07:14,080
result, which is that sorted,
five element array that we're looking for.

121
00:07:14,080 --> 00:07:19,110
Okay, so we've combined two halves
of a list that were part of our

122
00:07:19,110 --> 00:07:23,660
recursive descent into the smallest sub
problems, and now we keep on going.

123
00:07:23,660 --> 00:07:27,640
So the 1 and the 4 get combined
to a two element list and

124
00:07:27,640 --> 00:07:30,000
then we add in that list two.

125
00:07:30,000 --> 00:07:34,260
And notice that when we merge
the list two with the list one four,

126
00:07:34,260 --> 00:07:38,050
what's going to happen is that the 2 will
get inserted between the 1 and the 4.

127
00:07:38,050 --> 00:07:41,240
Because we're comparing the heads
of the list at each point, and

128
00:07:41,240 --> 00:07:45,200
making sure to merge those lists so
that they preserve the order.

129
00:07:45,200 --> 00:07:49,320
And so then what we have is a two
element list on one side that's sorted.

130
00:07:49,320 --> 00:07:52,480
And a three element list on
the other side, also sorted.

131
00:07:52,480 --> 00:07:54,360
And we're going to merge those.

132
00:07:54,360 --> 00:08:01,540
And what we'll get is exactly the sorted
array 1, 2, 3, 4, 5 that we want.

133
00:08:01,540 --> 00:08:03,290
Okay, so this is a bit of a quick and

134
00:08:03,290 --> 00:08:06,560
dirty high level description
of the merge sort algorithm.

135
00:08:06,560 --> 00:08:08,250
I encourage you to try implementing it.

136
00:08:09,350 --> 00:08:13,760
It's very, it feels really good to
see it in action in front of you.

137
00:08:13,760 --> 00:08:17,560
But, it is a bit tricky because it is
using this principle of recursion.

138
00:08:17,560 --> 00:08:22,910
And so, what we're focusing on in
this module of the course isn't so

139
00:08:22,910 --> 00:08:25,700
much an in-depth analysis of recursion.

140
00:08:25,700 --> 00:08:28,550
But rather an illustration
of the different possible

141
00:08:28,550 --> 00:08:29,860
algorithms that are out there.

142
00:08:29,860 --> 00:08:31,080
For solving the same problem,

143
00:08:31,080 --> 00:08:34,350
and then thinking about how that
translates to different performance.

144
00:08:34,350 --> 00:08:36,700
So, let's think about that performance.

145
00:08:36,700 --> 00:08:41,580
Let's think about how we might analyze
how long it takes merged sort to run.

146
00:08:41,580 --> 00:08:43,870
How many operations are required.

147
00:08:43,870 --> 00:08:46,840
And so if we think about this algorithm,

148
00:08:46,840 --> 00:08:51,010
really at the beginning all we were doing
is saying I don't want to sort yet.

149
00:08:51,010 --> 00:08:51,790
I don't want to sort yet,

150
00:08:51,790 --> 00:08:55,530
I'm just going to define my problem and
smaller subproblems.

151
00:08:55,530 --> 00:09:00,360
And so we were organizing our data
until the step where we had to merge.

152
00:09:00,360 --> 00:09:04,420
That's where we starting doing
comparisons between list elements and

153
00:09:04,420 --> 00:09:06,140
really putting them together.

154
00:09:06,140 --> 00:09:11,210
And at each level of the recursion once
we started merging the sorted lists,

155
00:09:11,210 --> 00:09:15,610
what we had to do was compare,
pair-wise, basically all the elements.

156
00:09:15,610 --> 00:09:20,210
But only once, each of them,
were we comparing it with another element.

157
00:09:20,210 --> 00:09:24,955
And so if we count how many comparisons
are required there, it's O(n).

158
00:09:24,955 --> 00:09:31,130
Where n, remember, is our input size,
the size of the list that we started with.

159
00:09:31,130 --> 00:09:35,920
So really where we were doing a lot of
work was at a single level, merging

160
00:09:35,920 --> 00:09:40,980
all those smaller lists together and
figuring out how to maintain the order.

161
00:09:40,980 --> 00:09:43,681
Okay.
So then the question is, how many times

162
00:09:43,681 --> 00:09:48,297
did we have to do this big merge step, and
the number of times that we have to do

163
00:09:48,297 --> 00:09:53,012
the merge step depended upon how many
times we had to divide the lists in half.

164
00:09:53,012 --> 00:09:56,830
And to get them into smaller and
smaller chunks so that we could sort them.

165
00:09:56,830 --> 00:10:01,200
Okay, so each time that we divide,
we got two smaller lists.

166
00:10:01,200 --> 00:10:06,550
So if we started with a list of size five,
when we divided we got

167
00:10:06,550 --> 00:10:10,570
lists of size two and three and
then smaller and smaller and smaller.

168
00:10:10,570 --> 00:10:11,960
And we got to stop.

169
00:10:11,960 --> 00:10:14,210
When all our lists were of size 1.

170
00:10:14,210 --> 00:10:18,390
So we had to keep dividing until
all of our lists were of size 1.

171
00:10:18,390 --> 00:10:23,340
And so we're asking ourselves how many
times do we have to keep dividing by two.

172
00:10:23,340 --> 00:10:26,310
If we start at n,
I want to get all the way to 1.

173
00:10:26,310 --> 00:10:29,320
But that's exactly the logarithm base,
too.

174
00:10:29,320 --> 00:10:32,740
So when you start at a number and you
wanna keep dividing by 2, dividing by 2,

175
00:10:32,740 --> 00:10:36,240
dividing by 2, and count how many times
we have to do that until we get to 1,

176
00:10:36,240 --> 00:10:37,850
that's log base 2.

177
00:10:37,850 --> 00:10:43,900
And so what we're seeing here
is that we have log base 2 of

178
00:10:43,900 --> 00:10:48,630
n many times that we had to break down
our problem into sub-problems, and

179
00:10:48,630 --> 00:10:51,500
for each one of those,
we had to do a merge step.

180
00:10:51,500 --> 00:10:54,750
So, each one of those recursion levels

181
00:10:54,750 --> 00:10:59,230
we had about O(n) work to merge
all of the little pieces of lists.

182
00:10:59,230 --> 00:11:01,280
And that repeated log n times.

183
00:11:01,280 --> 00:11:07,262
And so our total performance is
n times log n, or O(n log n).