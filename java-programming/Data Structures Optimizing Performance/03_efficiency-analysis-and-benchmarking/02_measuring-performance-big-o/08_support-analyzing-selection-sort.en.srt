1
00:00:00,000 --> 00:00:04,950
[APPLAUSE]
>> In this video,

2
00:00:04,950 --> 00:00:08,200
we're gonna do a runtime
analysis of selection sort.

3
00:00:08,200 --> 00:00:09,135
So by the end of this video,

4
00:00:09,135 --> 00:00:11,101
you should be able to do this
kind of analysis on your own.

5
00:00:12,738 --> 00:00:15,698
Let's just get started by remembering
what selection sort does.

6
00:00:15,698 --> 00:00:20,000
So the idea behind selection sort is to
find essentially the smallest value in

7
00:00:20,000 --> 00:00:23,123
the remaining unsorted array and
put that at the start.

8
00:00:23,123 --> 00:00:25,816
And then just keep repeating
that process over and over.

9
00:00:25,816 --> 00:00:27,500
It may be easier with an example.

10
00:00:27,500 --> 00:00:29,684
What we have here is
an array that's unsorted.

11
00:00:29,684 --> 00:00:33,807
The first step is gonna be find
the smallest value in this array.

12
00:00:33,807 --> 00:00:37,540
So you're gonna walk all the way through,
you're gonna look at 4, 7, 2, 10, 1, and

13
00:00:37,540 --> 00:00:39,309
8, and figure out that 1 is the smallest.

14
00:00:39,309 --> 00:00:43,570
And you'll put 1 at the start,
as you swap 1 and 4 in the process.

15
00:00:44,590 --> 00:00:47,088
So now you essentially have your
sorted array on the left, and

16
00:00:47,088 --> 00:00:48,829
you have your unsorted array on the right.

17
00:00:48,829 --> 00:00:52,232
You're gonna do the same process again
now for the unsorted array on the right.

18
00:00:52,232 --> 00:00:54,159
You're gonna try to find
the smallest value.

19
00:00:54,159 --> 00:00:58,561
You're gonna look through all
the elements, 7, 2, 10, 4, and 8, and

20
00:00:58,561 --> 00:01:02,870
find that 2 is the smallest, and swap
that with 7, to put that at the start.

21
00:01:02,870 --> 00:01:05,625
Let's do one more example of this, so
we look at the unsorted array again,

22
00:01:05,625 --> 00:01:08,760
we're gonna find the smallest value,
this time the smallest value's gonna be 4.

23
00:01:08,760 --> 00:01:13,608
We're gonna swap 4 and
7 to put 4 at the front.

24
00:01:13,608 --> 00:01:16,162
At this point we just
continue this process and

25
00:01:16,162 --> 00:01:18,592
essentially you end up
with a sorted array.

26
00:01:18,592 --> 00:01:21,749
So that's the idea behind selection sort,
but now let's talk about the analysis.

27
00:01:23,440 --> 00:01:25,790
Here's the code to
essentially do selectionSort.

28
00:01:25,790 --> 00:01:27,680
We have our method name is selectionSort.

29
00:01:27,680 --> 00:01:32,580
It takes in an array of ints which are
just the values that we're trying to sort.

30
00:01:34,010 --> 00:01:36,992
In terms of analysis we can kinda
start walking through these steps.

31
00:01:36,992 --> 00:01:40,394
The first is just the initial
values that you're declaring.

32
00:01:40,394 --> 00:01:42,460
You don't need to worry about
this variable assignment.

33
00:01:42,460 --> 00:01:44,770
This is a constant time operation.

34
00:01:44,770 --> 00:01:47,780
But then we immediately get into a loop.

35
00:01:47,780 --> 00:01:50,340
And when we get to loops we know that
we're gonna wanna do a more careful

36
00:01:50,340 --> 00:01:51,270
analysis.

37
00:01:51,270 --> 00:01:53,870
In fact this is a nested loop and we'll
talk about those details in a moment.

38
00:01:55,020 --> 00:01:58,460
But the idea here is gonna be very similar
to the previous ones that we've done and

39
00:01:58,460 --> 00:02:01,330
we're gonna try to reason about how
many times the outer loop runs and

40
00:02:01,330 --> 00:02:03,420
how many times the inner loop runs.

41
00:02:03,420 --> 00:02:04,940
This isn't gonna quite work out for
us, and

42
00:02:04,940 --> 00:02:06,660
we'll see how that turns out here shortly.

43
00:02:08,450 --> 00:02:10,160
So, let's keep with this approach, though.

44
00:02:10,160 --> 00:02:13,170
So let's try and figure out how
many times the outer loop runs.

45
00:02:13,170 --> 00:02:15,190
The outer loop is actually
pretty easy to reason about.

46
00:02:15,190 --> 00:02:17,066
It's gonna run n times.

47
00:02:17,066 --> 00:02:19,153
So now,
looking at more detail in the inner loop,

48
00:02:19,153 --> 00:02:21,204
what we see that it starts
off with indexMin = i.

49
00:02:21,204 --> 00:02:25,540
This is just a single statement, so
this is a constant time operation.

50
00:02:25,540 --> 00:02:27,970
At the very end of the inner loop
we're gonna do a swap operation.

51
00:02:27,970 --> 00:02:30,380
And though it looks like I'm just
calling it a nice function here,

52
00:02:30,380 --> 00:02:34,440
we have to think about what are the actual
statements within that method.

53
00:02:34,440 --> 00:02:36,960
To do swap it only takes
actually three statements.

54
00:02:36,960 --> 00:02:39,500
So this again,
is essentially a constant time operation.

55
00:02:40,610 --> 00:02:42,349
Now we can dive into
the details of the inner loop.

56
00:02:43,510 --> 00:02:46,930
See, inner loop is gonna do
essentially this testing for

57
00:02:46,930 --> 00:02:50,880
keeping a running count of
the minimum values that it's seeing.

58
00:02:50,880 --> 00:02:52,850
So as it's going through,
it's keeping track of, again,

59
00:02:52,850 --> 00:02:54,900
the smallest value that it's seeing,
and in doing so

60
00:02:54,900 --> 00:02:58,480
it's doing a conditional operation and
then setting that value.

61
00:02:58,480 --> 00:03:01,750
A conditional, along with a value
setting is, again, just two statements.

62
00:03:01,750 --> 00:03:05,400
So we can consider this
a constant time operation.

63
00:03:05,400 --> 00:03:07,796
So now we have this constant
time operation here,

64
00:03:07,796 --> 00:03:11,228
we have to start reasoning about how
many times does this loop execute?

65
00:03:11,228 --> 00:03:17,018
Well, it's gonna execute, essentially, (n-
( i+1) ) and where did I get that from?

66
00:03:17,018 --> 00:03:19,702
n is the essentially
the length of the array,

67
00:03:19,702 --> 00:03:22,420
and if you notice,
j always starts at i + 1.

68
00:03:22,420 --> 00:03:27,110
So it's gonna keep increasing as
we go through, as i increases.

69
00:03:28,500 --> 00:03:30,729
This is going to cause problems for
me in a little bit, but

70
00:03:30,729 --> 00:03:32,320
we'll get back to that in just a second.

71
00:03:34,490 --> 00:03:37,850
So let's assume that our inner loop
essentially fills in this runtime.

72
00:03:37,850 --> 00:03:42,450
We know that those first and
the last operations are constant time.

73
00:03:42,450 --> 00:03:45,330
I can combine all of this into
now one larger statement.

74
00:03:45,330 --> 00:03:49,140
I know those constant time operations
can essentially be dropped, and

75
00:03:49,140 --> 00:03:55,020
I'm left with a fairly clean
term which is just O ( n-i ).

76
00:03:55,020 --> 00:03:57,840
What I'd like to do then is do the same
kind of analysis we've done in the past.

77
00:03:57,840 --> 00:04:01,310
Just take the number of iterations
that executed in the outer loop and

78
00:04:01,310 --> 00:04:04,580
multiply it by the number of
iterations on the inner loop.

79
00:04:04,580 --> 00:04:07,505
If I do that,
I essentially get this nice form.

80
00:04:07,505 --> 00:04:12,055
The problem here is, what is O (n- i)?

81
00:04:12,055 --> 00:04:14,240
That's not what we want,
we want this to be in terms of n.

82
00:04:15,700 --> 00:04:18,870
And i is gonna be changing on me,
so this is really problematic.

83
00:04:18,870 --> 00:04:21,719
I need to know specifically what
does this mean in terms of n?

84
00:04:23,520 --> 00:04:28,370
Now the way I can do this is essentially
look at the fact that as i increases,

85
00:04:28,370 --> 00:04:30,420
this term is gonna decrease.

86
00:04:30,420 --> 00:04:31,830
But it's not enough just to say that.

87
00:04:31,830 --> 00:04:35,840
Because if i increases rapidly and
the term decreases rapidly,

88
00:04:35,840 --> 00:04:38,420
I may get a very different
runtime analysis.

89
00:04:38,420 --> 00:04:40,180
The way I'm gonna wanna do this,

90
00:04:40,180 --> 00:04:43,254
is to instead of doing one loop at a time,
let's look at them together.

91
00:04:43,254 --> 00:04:47,354
So what I'm gonna do then is
look at the entire operation,

92
00:04:47,354 --> 00:04:50,282
the outer loop along with the inner loop,

93
00:04:50,282 --> 00:04:55,572
to figure out at each step how many
iterations have to run of the inner loop.

94
00:04:55,572 --> 00:04:59,804
So when i = 0, how many iterations
have to happen on the inner loop?

95
00:04:59,804 --> 00:05:05,388
Well, when i = 0, n- 0 is n,
and that just gives me n.

96
00:05:05,388 --> 00:05:09,804
Next iteration of the outer loop,
I'm now gonna have i be 1.

97
00:05:09,804 --> 00:05:12,800
n-1 is how many times it's gonna execute.

98
00:05:14,130 --> 00:05:17,270
i is gonna go to 2,
we're gonna have n-2 and

99
00:05:17,270 --> 00:05:22,519
this is gonna go until we hit the end of
the array in that iteration of the loop.

100
00:05:22,519 --> 00:05:28,440
When i is n-1, we're gonna have just 1.

101
00:05:28,440 --> 00:05:31,680
So this sequence is what we're
gonna start reasoning about.

102
00:05:32,970 --> 00:05:34,764
How long does this take?

103
00:05:34,764 --> 00:05:36,010
How many steps is this?

104
00:05:38,740 --> 00:05:41,340
We have the entire performance
within this series, but

105
00:05:41,340 --> 00:05:43,910
let's reverse it to work
with it more easily.

106
00:05:43,910 --> 00:05:47,380
When we reverse it it's
just swap the order.

107
00:05:47,380 --> 00:05:50,092
And now I'm seeing a series that
might be more easy to work with.

108
00:05:50,092 --> 00:05:55,165
I see that's 1+2+3 all the way up to +n.

109
00:05:55,165 --> 00:05:57,770
And this might be a series
you've recognized before.

110
00:05:57,770 --> 00:06:01,350
But let's talk a little bit more detail
about how we might solve for this series.

111
00:06:03,970 --> 00:06:05,710
What exactly is this?

112
00:06:07,230 --> 00:06:08,808
Well, there's a way to solve this.

113
00:06:08,808 --> 00:06:12,690
I actually wanna derive the equation for
this, this is not that hard to do.

114
00:06:12,690 --> 00:06:16,720
And the way to derive this essentially
is by looking at pairings.

115
00:06:16,720 --> 00:06:23,456
We want you to see is that this pairing,
1 and n-1 adds up to n.

116
00:06:23,456 --> 00:06:28,761
Likewise, 2 and n-2 also add up to n.

117
00:06:28,761 --> 00:06:32,150
And you can keep going this
way through the entire list.

118
00:06:32,150 --> 00:06:35,191
So, what I want you to do
is just take a moment and

119
00:06:35,191 --> 00:06:39,160
think about how many total pairs
add up to n within that range.

120
00:06:43,491 --> 00:06:44,530
All right.

121
00:06:44,530 --> 00:06:49,860
So, if you came up with essentially
the number of elements here is n-1.

122
00:06:49,860 --> 00:06:52,045
Each of them have to be paired up so

123
00:06:52,045 --> 00:06:55,961
it would be n-1 over 2 is
the number of pairs that sum to n.

124
00:06:55,961 --> 00:06:57,400
That'd be exactly right.

125
00:06:58,510 --> 00:07:00,910
So, how many operations
are occurring here?

126
00:07:00,910 --> 00:07:07,460
Well, if each of these sums up to n,
I can just say n(n-1) over 2.

127
00:07:07,460 --> 00:07:09,480
This is a pretty clean form.

128
00:07:09,480 --> 00:07:11,710
Now you may notice,
I'm missing one term here.

129
00:07:11,710 --> 00:07:16,400
I'm not adding on the n at the end,
and I can just do that right here.

130
00:07:16,400 --> 00:07:19,410
Now this is a fairly recognizable series.

131
00:07:19,410 --> 00:07:22,070
And the reason why,
is because there's a fun fact about it.

132
00:07:22,070 --> 00:07:26,185
The legend goes that Gauss was
assigned some busywork as a student.

133
00:07:26,185 --> 00:07:29,223
And in doing so,
he essentially derived this formula, and

134
00:07:29,223 --> 00:07:33,199
the busywork that he was assigned was
to add all the numbers from 1 to 100.

135
00:07:33,199 --> 00:07:37,925
And when the teacher assigned this, she
thought, okay, well everyone's gonna go 1

136
00:07:37,925 --> 00:07:42,950
+ 2 + 3 + 4, and it's gonna take them
a while, and I can get a little break.

137
00:07:42,950 --> 00:07:45,540
The problem is Gauss derived
this equation fairly quickly.

138
00:07:46,610 --> 00:07:51,120
He just plugs in the numbers, and
out comes the answer of 5,050.

139
00:07:51,120 --> 00:07:52,500
His work's done, he can move on.

140
00:07:53,510 --> 00:07:55,580
This is a fun story,
I always enjoy hearing about this.

141
00:07:55,580 --> 00:07:58,140
But this is where this equation come from.

142
00:08:00,130 --> 00:08:03,620
All right, let's wrap this up
by looking at the analysis.

143
00:08:03,620 --> 00:08:06,710
So we've got it down to this equation.

144
00:08:06,710 --> 00:08:10,239
What's the tightest correct
classification, then, for this equation?

145
00:08:11,560 --> 00:08:12,360
Nice work!

146
00:08:12,360 --> 00:08:14,874
There's a lot of different ways that
you may have solved this problem.

147
00:08:14,874 --> 00:08:19,917
But almost certainly what you did is
you expanded out that first set to say,

148
00:08:19,917 --> 00:08:24,398
n times n is n2, and then you saw
that the rest were all constants or

149
00:08:24,398 --> 00:08:25,540
just terms of n.

150
00:08:25,540 --> 00:08:28,175
Since n2 is the dominant term,
this is gonna be O(n2),

151
00:08:28,175 --> 00:08:31,130
and we've essentially solved this problem.

152
00:08:31,130 --> 00:08:34,410
So working through selection sort wasn't
incredibly straightforward from the start.

153
00:08:34,410 --> 00:08:36,075
You can see if you do
a careful analysis of it.

154
00:08:36,075 --> 00:08:37,151
You can come up with the solution.