1
00:00:00,000 --> 00:00:04,128
[MUSIC]

2
00:00:04,128 --> 00:00:05,330
Welcome back.

3
00:00:05,330 --> 00:00:08,610
In this lesson we're gonna learn about
benchmarking which means this video

4
00:00:08,610 --> 00:00:10,230
I get to have a little bit of fun.

5
00:00:10,230 --> 00:00:13,490
The reason I get to have some fun is
that my PhD is actually in computer

6
00:00:13,490 --> 00:00:14,800
architecture.

7
00:00:14,800 --> 00:00:17,550
Computer architecture is the high
level of design of processors.

8
00:00:17,550 --> 00:00:20,320
And when you start talking
about designing processors,

9
00:00:20,320 --> 00:00:21,900
you're talking about making things fast.

10
00:00:23,298 --> 00:00:26,600
If you wanna be able to say one processor
is faster than another processor

11
00:00:27,610 --> 00:00:30,960
you have to have some programs
to run on the processors.

12
00:00:30,960 --> 00:00:33,600
And those are essentially
called benchmarks.

13
00:00:33,600 --> 00:00:36,360
So in this video we're going to dive
in beneath the hood a little bit.

14
00:00:36,360 --> 00:00:39,250
And look at some of these details in
terms of how long does it take for

15
00:00:39,250 --> 00:00:39,880
a program to run.

16
00:00:39,880 --> 00:00:42,630
And what are the different things
that affect program execution time.

17
00:00:45,030 --> 00:00:47,970
So big goals for this video is for
you to be able to explain the role

18
00:00:47,970 --> 00:00:52,080
of benchmarking in computer science, and
for you to be able to identify components

19
00:00:52,080 --> 00:00:54,390
in real systems that can
impact execution time.

20
00:00:54,390 --> 00:00:58,670
Now you may have already used some
kind of benchmarking software before.

21
00:00:58,670 --> 00:01:06,020
For example, the website on the left,
www.speedtest.net has software

22
00:01:06,020 --> 00:01:09,960
designed to test your internet service
provider's ability to transfer data, so

23
00:01:09,960 --> 00:01:11,740
essentially how fast is
your internet connection.

24
00:01:13,330 --> 00:01:17,770
The website on the right is
benchmarking software for video gamers.

25
00:01:17,770 --> 00:01:18,650
So if you're a video gamer and

26
00:01:18,650 --> 00:01:21,380
you wanna see how well your video
games are gonna play on your system,

27
00:01:21,380 --> 00:01:25,140
this software is designed to essentially
test all that hardware your graphics card,

28
00:01:25,140 --> 00:01:26,230
your processor, etcetera.

29
00:01:27,310 --> 00:01:32,240
So if you want to see how well does your
system do given a piece of software,

30
00:01:32,240 --> 00:01:34,620
that's the classic case of benchmarking.

31
00:01:34,620 --> 00:01:37,430
Now the other way that you may have
used benchmarking before is if you ran

32
00:01:37,430 --> 00:01:38,460
a program that was a little slow.

33
00:01:39,500 --> 00:01:42,610
So may want to use benchmarking to
essentially compare one piece of software

34
00:01:42,610 --> 00:01:43,660
against another.

35
00:01:43,660 --> 00:01:47,220
So you may have had your old code, which
took awhile to run, say like ten seconds.

36
00:01:47,220 --> 00:01:50,640
Then you improve your code, and
it ran in say four seconds.

37
00:01:50,640 --> 00:01:52,090
You've essentially done benchmarking.

38
00:01:52,090 --> 00:01:54,740
You compared your old version of your code
against your new version of the code and

39
00:01:54,740 --> 00:01:56,830
you say your new version
of your code is better.

40
00:01:58,080 --> 00:02:01,710
Now if you've ever done this before you
may have noticed that the execution times

41
00:02:01,710 --> 00:02:03,420
weren't very consistent.

42
00:02:03,420 --> 00:02:08,030
It may have ran four seconds one time,
six seconds the next, three the next.

43
00:02:08,030 --> 00:02:09,960
Why is there a variance there?

44
00:02:09,960 --> 00:02:11,470
Well those details are what
we're gonna dive into now.

45
00:02:13,490 --> 00:02:16,980
When Mia first introduced
run time analysis, she said,

46
00:02:16,980 --> 00:02:19,940
you know, when you're trying to work on
a real system, there's a lot of different

47
00:02:19,940 --> 00:02:23,220
variables that play into how
long it takes something to run.

48
00:02:23,220 --> 00:02:26,510
So it's really useful to be able to
analyze an algorithm in itself and

49
00:02:26,510 --> 00:02:28,580
we've been doing a great deal
of that in the last lesson.

50
00:02:28,580 --> 00:02:31,250
And that's an incredibly useful
way to analyze an algorithm.

51
00:02:31,250 --> 00:02:35,150
But at some point or another, you actually
wanna run your software on a system,

52
00:02:35,150 --> 00:02:37,170
and you wanna be able to
measure how long it takes.

53
00:02:37,170 --> 00:02:39,880
There are a number of
components that go into that.

54
00:02:39,880 --> 00:02:43,900
Now I'm gonna dive into some details here
that you don't need to know going forward.

55
00:02:43,900 --> 00:02:45,300
We're not gonna test you on it.

56
00:02:45,300 --> 00:02:47,980
But I just want you to see that there's
a lot of components that all play into

57
00:02:47,980 --> 00:02:50,160
how long it takes for
something to run on a real system.

58
00:02:51,230 --> 00:02:54,450
Now one area that you're probably
very familiar with is the Compiler.

59
00:02:55,470 --> 00:02:58,770
So, when you take your code that you've
written it goes through a Java Compiler,

60
00:02:58,770 --> 00:03:01,270
it produces Byte Code which then
runs on Java Virtual Machine.

61
00:03:01,270 --> 00:03:03,970
And there's two things I
want you to focus on here.

62
00:03:03,970 --> 00:03:08,030
The first is that the Java Virtual Machine
is actually an abstraction,

63
00:03:08,030 --> 00:03:09,600
it's an abstraction for computers.

64
00:03:09,600 --> 00:03:12,580
You don't need all the details
behind to essentially write

65
00:03:12,580 --> 00:03:13,870
the byte code to run on it.

66
00:03:14,870 --> 00:03:18,920
The second piece I want you to focus
on is that the compiler makes choices.

67
00:03:18,920 --> 00:03:21,480
The choices it makes affects
the performance of your program.

68
00:03:21,480 --> 00:03:24,820
Now there are companies that
compete in other languages,

69
00:03:24,820 --> 00:03:30,120
like C++, to essentially produce the best
compilers the fastest running compilers.

70
00:03:30,120 --> 00:03:33,050
So what your compiler does
impacts your performance.

71
00:03:34,160 --> 00:03:36,350
But let's dive into the details
of the Java Virtual Machine,

72
00:03:36,350 --> 00:03:38,210
let's go one level of extraction lower.

73
00:03:39,560 --> 00:03:43,720
Your Java Virtual Machine is actually
executing on top of an operating system.

74
00:03:43,720 --> 00:03:45,610
An operating system makes choices too.

75
00:03:45,610 --> 00:03:48,310
An operating system is
essentially an obstraction for

76
00:03:48,310 --> 00:03:50,100
all your hardware components.

77
00:03:50,100 --> 00:03:54,730
And it makes decisions like how many
resources should your program get?

78
00:03:54,730 --> 00:03:56,430
How often should it get to run?

79
00:03:56,430 --> 00:03:58,030
How long does it run for?

80
00:03:58,030 --> 00:04:00,170
All these decisions are made
by your operating system and

81
00:04:00,170 --> 00:04:01,570
that affects performance too.

82
00:04:02,640 --> 00:04:04,780
But again, it's an abstraction for
the hardware.

83
00:04:04,780 --> 00:04:06,420
So let's look at the hardware.

84
00:04:06,420 --> 00:04:09,980
When you actually start running your
program it's gonna run on real devices.

85
00:04:09,980 --> 00:04:13,770
Your program exists and
data exists on hard disk.

86
00:04:13,770 --> 00:04:16,920
Your memory is essentially your working
set that you're working with right now.

87
00:04:16,920 --> 00:04:20,390
And your CPU is actually what
does all your computations.

88
00:04:20,390 --> 00:04:22,100
You have other components
in your computer.

89
00:04:22,100 --> 00:04:25,750
You may have a graphics card which
does again graphics rendering.

90
00:04:25,750 --> 00:04:28,640
You may have a monitor, a keyboard,

91
00:04:28,640 --> 00:04:32,430
a mouse, an internet port,
a wireless adapter.

92
00:04:32,430 --> 00:04:35,490
All of these things can
impact performance.

93
00:04:35,490 --> 00:04:40,570
At this point you're almost certainly
saying, whoa, that's a lot of details.

94
00:04:41,710 --> 00:04:43,860
And in fact I'm kinda breaking
some rules right now.

95
00:04:44,880 --> 00:04:49,150
These systems have been designed so
these details are hidden away from you.

96
00:04:49,150 --> 00:04:51,200
That's the whole purpose of abstraction.

97
00:04:51,200 --> 00:04:54,050
In fact we should be really
happy about abstraction.

98
00:04:54,050 --> 00:04:57,200
Because when you wrote your first
program you didn't deal with,

99
00:04:57,200 --> 00:05:01,150
how am I gonna pull the program from
disc and then get that into memory and

100
00:05:01,150 --> 00:05:06,000
then put that through my processor and
then get that to the screen.

101
00:05:06,000 --> 00:05:06,920
You just wrote it in Java.

102
00:05:06,920 --> 00:05:08,619
And it ran on the Java virtual machine.

103
00:05:10,690 --> 00:05:15,640
So why then am I pulling back the curtains
here and looking at the details?

104
00:05:15,640 --> 00:05:18,150
And this would be for two reasons.

105
00:05:18,150 --> 00:05:21,220
The first is because when we thing
about the running time of a program on

106
00:05:21,220 --> 00:05:25,170
a real system, it's influenced by
all these things, by the compiler,

107
00:05:25,170 --> 00:05:27,720
by the operating system,
by the processor design.

108
00:05:30,130 --> 00:05:31,260
The other reason I'm talking about these,

109
00:05:31,260 --> 00:05:34,150
is because these are really
interesting topics in themselves.

110
00:05:34,150 --> 00:05:38,080
After you've finished the specialization I
encourage to look more into any of these

111
00:05:38,080 --> 00:05:39,790
topics you may be interested in.

112
00:05:39,790 --> 00:05:42,160
Again compiler design is
interesting in itself.

113
00:05:42,160 --> 00:05:44,320
Operating systems is
incredibly interesting.

114
00:05:44,320 --> 00:05:47,579
And of course I love computer architecture
which is the design of processors.

115
00:05:48,910 --> 00:05:50,240
So, let's get back to performance.

116
00:05:52,080 --> 00:05:55,260
So how then,
given how complex these real systems are,

117
00:05:55,260 --> 00:05:58,800
can we reason about how long it takes
to run our program on a real system?

118
00:06:00,370 --> 00:06:05,400
You might right now be thinking,
well, wait, I have the program, and

119
00:06:05,400 --> 00:06:09,100
I have the system,
couldn't I just run it and time it?

120
00:06:10,500 --> 00:06:13,530
Well yeah, that's what benchmarking is.

121
00:06:13,530 --> 00:06:17,060
So benchmarking is just running
a program on a real machine and

122
00:06:17,060 --> 00:06:18,810
measuring its performance.

123
00:06:18,810 --> 00:06:22,060
And for right now we're gonna define
performance to be essentially how long it

124
00:06:22,060 --> 00:06:23,790
takes for a program to execute.

125
00:06:23,790 --> 00:06:26,190
But I do wanna say there
are other metrics in performance.

126
00:06:26,190 --> 00:06:29,250
For example, you might care
about how much power is consumed

127
00:06:29,250 --> 00:06:33,140
in running that program if you're
talking about a laptop or smartphone.

128
00:06:33,140 --> 00:06:36,290
But for right now, again, let's just focus
on how long it takes for something to run.

129
00:06:37,950 --> 00:06:39,970
And we'll use benchmarking in two ways.

130
00:06:39,970 --> 00:06:42,900
The first is it allows us to
compare different machines

131
00:06:42,900 --> 00:06:45,800
by running the same program
on each of those machines.

132
00:06:45,800 --> 00:06:49,094
And the other way we use it,
is comparing two different programs

133
00:06:49,094 --> 00:06:52,941
on the same machine, and that's what
we're going to do in our next video.