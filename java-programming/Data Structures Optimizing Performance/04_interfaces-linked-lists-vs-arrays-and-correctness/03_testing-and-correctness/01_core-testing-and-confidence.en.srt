1
00:00:00,000 --> 00:00:04,879
[MUSIC]

2
00:00:04,879 --> 00:00:07,580
In this lesson,
we're going to start dealing with testing.

3
00:00:07,580 --> 00:00:09,310
And I really enjoy testing,

4
00:00:09,310 --> 00:00:12,921
because testing influences
your confidence in your code.

5
00:00:12,921 --> 00:00:15,300
And let me tell you just a quick
story here before we get started.

6
00:00:15,300 --> 00:00:18,260
So, I've worked with students for
a long time and I've also worked for

7
00:00:18,260 --> 00:00:19,400
professional programmers a long time.

8
00:00:19,400 --> 00:00:22,760
And there's a surprising difference
in terms of the confidence

9
00:00:22,760 --> 00:00:25,540
about code correctness
between those two groups.

10
00:00:25,540 --> 00:00:29,450
And the surprising difference here is
that students actually tend to be more

11
00:00:29,450 --> 00:00:32,350
confident than
the experienced programmers.

12
00:00:32,350 --> 00:00:35,340
So I'll talk to students, they'll come in,
they'll show me their code.

13
00:00:35,340 --> 00:00:38,810
They'll say, hey I've written all my code,
I haven't compiled it yet, but

14
00:00:38,810 --> 00:00:40,300
I'm sure it's close to being finished.

15
00:00:40,300 --> 00:00:44,280
And this is terrifying, because you
haven't compiled your code yet.

16
00:00:44,280 --> 00:00:45,520
You haven't run any test cases.

17
00:00:45,520 --> 00:00:48,254
How can you be sure that
it's working correctly?

18
00:00:48,254 --> 00:00:49,010
In turn though,

19
00:00:49,010 --> 00:00:52,414
I've also seen professional programmers
who've written and tested even

20
00:00:52,414 --> 00:00:56,087
parts of their code, and they still don't
have much confidence about whether or

21
00:00:56,087 --> 00:00:59,837
not it's correct or not until they've
seen extensive testing done on that code.

22
00:00:59,837 --> 00:01:02,940
So there's a big difference in terms
of confidence, I think comes from

23
00:01:02,940 --> 00:01:07,110
the misunderstanding about, how do you
know if your code works, or if it doesn't?

24
00:01:07,110 --> 00:01:08,769
And a lot of that has to do with testing.

25
00:01:09,940 --> 00:01:13,900
So by the end of this video, I hope you'll
be able to explain the value of having

26
00:01:13,900 --> 00:01:18,740
confidence in your code, and also be able
to identify some ways to build confidence

27
00:01:18,740 --> 00:01:19,950
about your code's correctness.

28
00:01:22,430 --> 00:01:23,960
So when we start talking
about code correctness,

29
00:01:23,960 --> 00:01:27,060
let's start thinking about code
that runs in important systems.

30
00:01:27,060 --> 00:01:30,680
So there's code that runs say,
a pacemaker in someone's heart.

31
00:01:30,680 --> 00:01:34,316
And there's code that's going to be
running the next self-driving car.

32
00:01:34,316 --> 00:01:39,080
And there's code the runs the landing
program on the space shuttle.

33
00:01:39,080 --> 00:01:42,180
You have to be incredibly confident
about the correctness of this code

34
00:01:42,180 --> 00:01:44,650
before you'd ever let it
impact people's lives.

35
00:01:45,950 --> 00:01:47,350
So how do you gain this confidence?

36
00:01:48,580 --> 00:01:51,490
Well, it's hard to gain the confidence
especially given there's lots of different

37
00:01:51,490 --> 00:01:53,670
people who are gonna use your code.

38
00:01:53,670 --> 00:01:56,510
There are users who are gonna
try to use your code, and

39
00:01:56,510 --> 00:02:00,860
users do a lot of unexpected things
with code when they work with it.

40
00:02:00,860 --> 00:02:04,100
You also have hackers who are
intentionally trying to misuse your code

41
00:02:04,100 --> 00:02:07,240
in order to break it to gain some
kind of privileged access to it.

42
00:02:08,480 --> 00:02:11,280
You have other software
developers in your own company,

43
00:02:11,280 --> 00:02:14,670
who might use your code in a way
different than it was intended.

44
00:02:15,770 --> 00:02:17,800
And then, you also have yourself.

45
00:02:19,280 --> 00:02:22,990
I'm working with code these days
that I wrote ten years ago.

46
00:02:22,990 --> 00:02:26,546
I want to be sure that my code is actually
correct that I use in the future, too.

47
00:02:29,087 --> 00:02:31,150
So let's focus on one scenario here.

48
00:02:31,150 --> 00:02:32,320
Let's just look at programmers.

49
00:02:32,320 --> 00:02:34,837
And talk about how confident
our code needs to be.

50
00:02:34,837 --> 00:02:38,629
How confident we have to be in our code
to be able to say it's working correctly.

51
00:02:38,629 --> 00:02:42,500
So let's say you're working at a company
and there's 30 programmers there.

52
00:02:42,500 --> 00:02:45,963
And each programmer writes say,
only ten methods.

53
00:02:45,963 --> 00:02:49,337
Well, right there you've
already got 300 methods.

54
00:02:49,337 --> 00:02:53,029
Well, let's say you got some really
good software engineers, and

55
00:02:53,029 --> 00:02:56,671
they're 99% sure that each of
those methods works correctly.

56
00:02:56,671 --> 00:03:00,712
Well, what are your chances that
one of those methods is broken?

57
00:03:00,712 --> 00:03:03,530
95% chance one of those is broken.

58
00:03:04,700 --> 00:03:06,010
That's pretty scary.

59
00:03:06,010 --> 00:03:09,750
And this is ignoring interactions
that may occur between the methods or

60
00:03:09,750 --> 00:03:11,880
highly level design mistakes
that may have happened.

61
00:03:11,880 --> 00:03:14,100
This is just looking at
the individual methods themselves.

62
00:03:17,220 --> 00:03:19,270
The other way you can look at
this as a software engineer,

63
00:03:19,270 --> 00:03:21,040
is to essentially say that
this is risk assessment.

64
00:03:21,040 --> 00:03:24,760
If you talk to CTOs of companies,
this is essentially what they'll say.

65
00:03:24,760 --> 00:03:26,880
Well, depends on the domain.

66
00:03:26,880 --> 00:03:28,820
If we're working with pacemaker code,

67
00:03:28,820 --> 00:03:33,470
you have to be sure it's gonna work right
before you ever release it to the wild.

68
00:03:33,470 --> 00:03:38,107
On the other hand, if you're writing code
for a website that provides cute cats,

69
00:03:38,107 --> 00:03:40,726
it's still fun, it's still important, but

70
00:03:40,726 --> 00:03:44,640
you can have some bugs in there
without any real loss of life, right?

71
00:03:44,640 --> 00:03:47,172
So it really just depends on the domain.

72
00:03:47,172 --> 00:03:50,084
You have to have different degrees
of confidence depending on how it's

73
00:03:50,084 --> 00:03:50,720
gonna be used.

74
00:03:52,580 --> 00:03:56,970
So, how do we gain confidence for our code
and how do we reason about the confidence?

75
00:03:56,970 --> 00:03:58,990
What I wanna do is give you some ideas,
essentially,

76
00:03:58,990 --> 00:04:00,350
about how I feel about my code.

77
00:04:00,350 --> 00:04:01,650
This is just my personal opinion.

78
00:04:01,650 --> 00:04:03,540
But essentially,
when I have written code and

79
00:04:03,540 --> 00:04:07,990
I haven't compiled it yet, I have almost
no confidence that that code is correct.

80
00:04:07,990 --> 00:04:09,680
I've been writing code for a long time.

81
00:04:09,680 --> 00:04:12,630
I just assume that it's gonna have
problems until shown differently.

82
00:04:14,090 --> 00:04:15,900
Even after I've compiled the code,

83
00:04:15,900 --> 00:04:19,860
I still have no confidence in it because I
could have many kinds of bugs at run time.

84
00:04:22,280 --> 00:04:24,150
Maybe I've tested against a basic input.

85
00:04:24,150 --> 00:04:28,370
The inputs, maybe a couple of inputs that
I used to essentially device my algorithm.

86
00:04:28,370 --> 00:04:30,870
I'm still gonna have a low degree of
confidence because I haven't tested corner

87
00:04:30,870 --> 00:04:31,430
cases yet.

88
00:04:32,450 --> 00:04:37,570
After I test corner cases, like giving a
null input as a reference or say, an empty

89
00:04:37,570 --> 00:04:42,170
list, then I start feeling a little more
confident about my code working properly.

90
00:04:42,170 --> 00:04:43,940
But it's not until
a whole bunch of users or

91
00:04:43,940 --> 00:04:46,430
other software engineers of the company
start pounding on down my code,

92
00:04:46,430 --> 00:04:48,990
before you're gonna start
feeling really good about it.

93
00:04:48,990 --> 00:04:50,900
And this is why companies do beta testing.

94
00:04:50,900 --> 00:04:53,450
They want users to essentially pound on

95
00:04:53,450 --> 00:04:56,620
the code to essentially
find potential mistakes.

96
00:04:56,620 --> 00:05:00,250
You might say, wait a second, couldn't we
just test it against all possible inputs,

97
00:05:00,250 --> 00:05:03,140
and then we know for
sure it's gonna work no matter what.

98
00:05:03,140 --> 00:05:04,550
Well, maybe.

99
00:05:05,670 --> 00:05:09,920
If your method only depends on say,
a boolean, so it has different behaviors,

100
00:05:09,920 --> 00:05:11,470
whether or
not a true value is given to it or

101
00:05:11,470 --> 00:05:14,950
false value, sure,
you can try both true or false.

102
00:05:14,950 --> 00:05:17,790
But even if your method takes
just three integer inputs,

103
00:05:17,790 --> 00:05:19,822
this is gonna be essentially impossible.

104
00:05:19,822 --> 00:05:24,100
Using int has essentially four
billion different values.

105
00:05:24,100 --> 00:05:27,050
And if you wanna look at all possible
combinations of three integers,

106
00:05:27,050 --> 00:05:30,480
you're looking at this number here, and
I have no idea what this number is.

107
00:05:30,480 --> 00:05:31,360
It's just huge.

108
00:05:31,360 --> 00:05:35,830
There's no way you could possibly
test all these combinations.

109
00:05:35,830 --> 00:05:40,580
Which means if your method
takes an array as an input, or

110
00:05:40,580 --> 00:05:42,570
depends on information being
fed to you from a database,

111
00:05:42,570 --> 00:05:45,380
there's just no way you could
try it on all possible inputs.

112
00:05:45,380 --> 00:05:47,060
This is just scary.

113
00:05:47,060 --> 00:05:48,650
So we can't test on all possible inputs,

114
00:05:48,650 --> 00:05:52,470
we just try to test it on as much as we
possibly can, in real life situations.

115
00:05:54,300 --> 00:05:56,212
So how then can we
increase our confidence?

116
00:05:56,212 --> 00:05:59,080
Well first off, at an algorithmic level,
be critical of your code.

117
00:05:59,080 --> 00:06:01,921
Be critical of your idea.

118
00:06:01,921 --> 00:06:04,856
You wanna make sure,
first devise your algorithm, and

119
00:06:04,856 --> 00:06:08,047
then essentially put on your
skeptic hat and try to break it.

120
00:06:08,047 --> 00:06:10,254
Trying breaking it in many
ways as you possibly can.

121
00:06:10,254 --> 00:06:13,279
In the process of trying to break it,
you're essentially gonna try all these

122
00:06:13,279 --> 00:06:15,760
different corner cases to see whether or
not it's gonna work.

123
00:06:15,760 --> 00:06:16,922
Is is gonna go off the end of the array?

124
00:06:16,922 --> 00:06:20,680
Is it gonna again, deal with that
null reference being fed to it?

125
00:06:20,680 --> 00:06:24,520
The other thing you can do
is usually attempt to reason

126
00:06:24,520 --> 00:06:26,400
about its correctness formally.

127
00:06:26,400 --> 00:06:28,990
There's an area of programming languages
that's essentially focused on this.

128
00:06:28,990 --> 00:06:31,810
And that could essentially
be a course within itself.

129
00:06:31,810 --> 00:06:35,380
The last thing you could do, is
essentially create automated test cases,

130
00:06:35,380 --> 00:06:39,170
that are gonna try and test the code in
a whole bunch of different situations, so

131
00:06:39,170 --> 00:06:41,560
you can feel more confident
in its performance.

132
00:06:41,560 --> 00:06:43,610
And that's, in fact,
what we're gonna do next.