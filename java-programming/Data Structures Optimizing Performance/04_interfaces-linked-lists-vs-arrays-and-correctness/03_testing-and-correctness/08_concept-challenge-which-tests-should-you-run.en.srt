1
00:00:00,025 --> 00:00:04,120
[CROSSTALK].

2
00:00:04,120 --> 00:00:06,602
This concept challenge
is about testing and

3
00:00:06,602 --> 00:00:11,170
in particular how to write code to
verify that your test actually worked.

4
00:00:11,170 --> 00:00:15,180
This is a subtle skill and one that you'll
need to get good at in order to make sure

5
00:00:15,180 --> 00:00:16,540
that you're writing correct code.

6
00:00:17,940 --> 00:00:19,560
So same format as before.

7
00:00:19,560 --> 00:00:22,750
Try to answer the question yourself first,
discuss it and

8
00:00:22,750 --> 00:00:25,450
watch the UC San Diego
learners discussing it.

9
00:00:25,450 --> 00:00:28,990
Then answer the question again and confirm
your understanding with our explanation.

10
00:00:30,770 --> 00:00:35,790
So we're gonna be writing a tester for
the remove method in the link list class.

11
00:00:35,790 --> 00:00:40,410
So you've perhaps gotten this link
list setup in your setup method

12
00:00:40,410 --> 00:00:43,880
in your tester and
you wanna test the remove method.

13
00:00:43,880 --> 00:00:46,710
Now just a remind what the remove
method is supposed to do.

14
00:00:46,710 --> 00:00:49,560
It's supposed to take
an index position and

15
00:00:49,560 --> 00:00:52,000
then remove the element
at that index position,

16
00:00:52,000 --> 00:00:56,760
returning the element that was there and
getting rid of the element from the list.

17
00:00:56,760 --> 00:00:59,400
So, let's say you're now
writing your test code.

18
00:00:59,400 --> 00:01:02,810
And, again, you've got this list
already set up in the setup method.

19
00:01:02,810 --> 00:01:04,120
So, you can now work with this list.

20
00:01:04,120 --> 00:01:05,020
It's called list one.

21
00:01:06,520 --> 00:01:09,850
And, the first thing you're going to
do is you're going to test removing

22
00:01:09,850 --> 00:01:11,600
the element at position zero.

23
00:01:11,600 --> 00:01:15,800
Now again, this is just one of the tests
that you're going to write to test remove.

24
00:01:15,800 --> 00:01:18,970
There are other things you might want to
test, like testing trying to remove off

25
00:01:18,970 --> 00:01:23,130
the ends of the list, testing removal of
a element in the middle of the list, but

26
00:01:23,130 --> 00:01:26,550
you're focused right now on testing
removal of the element at position zero.

27
00:01:26,550 --> 00:01:30,480
Now you can write this line
of code in your tester.

28
00:01:30,480 --> 00:01:33,730
And if it doesn't crash,
that's a good sign.

29
00:01:33,730 --> 00:01:37,550
But it's not enough to verify
that this code actually worked,

30
00:01:37,550 --> 00:01:41,270
that you correctly removed
the element at index permission zero.

31
00:01:41,270 --> 00:01:45,850
So the question for you to work on on this
concept challenge is, what code to you

32
00:01:45,850 --> 00:01:50,840
need to write to verify that this
remove call worked correctly?

33
00:01:51,950 --> 00:01:56,910
>> The first thing that you always need
to do is verify that the actual number

34
00:01:56,910 --> 00:02:01,660
you're removing is the correct one

35
00:02:01,660 --> 00:02:06,570
because you might think that you're
removing the one at position zero,

36
00:02:06,570 --> 00:02:10,390
but then if something goes wrong
you actually remove another one.

37
00:02:10,390 --> 00:02:15,159
So you want to, do actually want to
verify that the value that you're

38
00:02:15,159 --> 00:02:20,480
returning actually matches with
which one you want to remove.

39
00:02:20,480 --> 00:02:24,700
>> And I think the next thing we
need to do is check the next node

40
00:02:24,700 --> 00:02:27,020
which goes after the first one.

41
00:02:27,020 --> 00:02:31,400
And since we remove the node
which contents value 65.

42
00:02:31,400 --> 00:02:33,930
And then the other node,
which contains 21,

43
00:02:33,930 --> 00:02:37,480
would become the first node,
which has index zero.

44
00:02:37,480 --> 00:02:40,930
So I think we do need to check
if it has value of 21, and

45
00:02:40,930 --> 00:02:44,480
then we can know that we
did the correct remove.

46
00:02:44,480 --> 00:02:45,170
>> Yeah.

47
00:02:45,170 --> 00:02:47,700
Yeah, I think both of you are correct.

48
00:02:47,700 --> 00:02:49,970
And I think that the option two and

49
00:02:49,970 --> 00:02:54,120
option five both talking about
the null pointer exceptions.

50
00:02:54,120 --> 00:03:00,430
I think we need to check them, cause the
remove does nothing modification to them.

51
00:03:00,430 --> 00:03:04,070
So I think we can just
do not handle those.

52
00:03:05,270 --> 00:03:11,030
>> Yeah, I think that, well, part of
the reason is because when you check

53
00:03:11,030 --> 00:03:16,340
get negative one, negative one will
return a null pointer exception

54
00:03:16,340 --> 00:03:21,608
no matter what you do to the rest of them,
so I don't think it's really necessary,

55
00:03:21,608 --> 00:03:28,840
and then also to add to that I also don't
think it's necessary to check that.

56
00:03:28,840 --> 00:03:31,910
Get one has a value of 42.

57
00:03:31,910 --> 00:03:39,092
Because you're not actually modifying, so
when you remove 65 all you're doing is

58
00:03:39,092 --> 00:03:44,080
modifying the reference of 21 but you're
not modifying the one that goes after.

59
00:03:44,080 --> 00:03:44,680
>> Yeah, definitely.
Right.

60
00:03:44,680 --> 00:03:46,980
>> You're only modifying
the ones that goes before.

61
00:03:46,980 --> 00:03:49,180
So it's not necessary to check.

62
00:03:49,180 --> 00:03:53,383
It's just I guess you can check but
it's [CROSSTALK],

63
00:03:53,383 --> 00:03:56,006
it would be an unnecessary step.

64
00:03:56,006 --> 00:03:58,423
>> Yeah.

65
00:03:58,423 --> 00:04:02,370
>> Do you think there's anything
else we need to check besides that?

66
00:04:02,370 --> 00:04:06,390
>> Yeah, I think we need to keep track
of the size because size of the list is

67
00:04:06,390 --> 00:04:08,720
stored as a separate reference.

68
00:04:08,720 --> 00:04:11,670
So we want to check whether it's two or
not.

69
00:04:11,670 --> 00:04:16,593
>> Yeah, to make sure that we actually
remember to update the size whenever

70
00:04:16,593 --> 00:04:18,130
we remove an element.

71
00:04:20,545 --> 00:04:25,235
>> All right, so now that you've worked on
the problem yourself, let's go over each

72
00:04:25,235 --> 00:04:29,760
of these possible pieces of code that
you could include in order to verify.

73
00:04:29,760 --> 00:04:32,280
That this line of code worked correctly.

74
00:04:32,280 --> 00:04:35,830
And in essence what we
really need to do is test

75
00:04:35,830 --> 00:04:39,600
the essential pieces
of that remove method.

76
00:04:39,600 --> 00:04:41,040
So what are the essential pieces?

77
00:04:41,040 --> 00:04:45,500
The essential pieces are to actually
return the element that was removed,

78
00:04:45,500 --> 00:04:47,530
to remove it from the list, and

79
00:04:47,530 --> 00:04:51,590
to make sure the list is now
one smaller than it was before.

80
00:04:51,590 --> 00:04:55,000
So those are the verification
steps that we're going to include.

81
00:04:55,000 --> 00:04:57,930
And let's go through the list of all
those verification steps that we gave you

82
00:04:57,930 --> 00:04:59,080
as possibilities,

83
00:04:59,080 --> 00:05:03,980
to see which of those matches those
essential pieces of the remove method.

84
00:05:03,980 --> 00:05:06,860
This first statement here says that
we should verify that the variable

85
00:05:06,860 --> 00:05:09,810
a contains the value 65.

86
00:05:09,810 --> 00:05:10,690
Absolutely.

87
00:05:10,690 --> 00:05:12,840
That's definitely something you should do.

88
00:05:12,840 --> 00:05:14,620
Because that's one of
the things remove has to do,

89
00:05:14,620 --> 00:05:18,990
it has to return the value that was at
position zero, which in this case is 65,

90
00:05:18,990 --> 00:05:21,220
which would now be in the variable a.

91
00:05:21,220 --> 00:05:22,670
So definitely need to check that.

92
00:05:24,230 --> 00:05:26,650
The next possibility
said we should call get

93
00:05:26,650 --> 00:05:30,700
negative one to make sure that causes
an index out of bounds exception.

94
00:05:30,700 --> 00:05:32,210
Well that's not really essential.

95
00:05:32,210 --> 00:05:34,600
It's not an essential piece
of the remove operation.

96
00:05:34,600 --> 00:05:37,220
You absolutely should test this but

97
00:05:37,220 --> 00:05:40,770
it would be more appropriately tested
when your testing the get method.

98
00:05:40,770 --> 00:05:44,200
That's not part of testing whether
removing the element at an exposition zero

99
00:05:44,200 --> 00:05:44,870
actually worked.

100
00:05:46,000 --> 00:05:47,930
So don't bother with that right here.

101
00:05:49,870 --> 00:05:54,180
The next thing said we should call
list one dot get in its position zero

102
00:05:54,180 --> 00:05:55,900
to make sure it now has the value 21.

103
00:05:55,900 --> 00:05:59,440
This is what another piece
that's essential for

104
00:05:59,440 --> 00:06:03,400
the remove method, so yes,
definitely include this test.

105
00:06:03,400 --> 00:06:07,690
When 65 is removed, 21 better have
shifted over to take its place.

106
00:06:07,690 --> 00:06:08,870
So include that test.

107
00:06:10,290 --> 00:06:11,720
What about this next one?

108
00:06:11,720 --> 00:06:15,310
Should we call get at index
permission one to make

109
00:06:15,310 --> 00:06:17,100
sure that 42 has also shifted over?

110
00:06:17,100 --> 00:06:21,660
And the answer to that one is, that's not
an essential test that we need to run

111
00:06:21,660 --> 00:06:24,110
here, that's not an essential
verification step.

112
00:06:24,110 --> 00:06:28,130
Because we're not testing add,
we're not testing get.

113
00:06:28,130 --> 00:06:31,820
We're testing remove and
if we've tested these other methods well,

114
00:06:31,820 --> 00:06:36,500
we can be pretty sure that the integrity
of the list is such that if 21 got moved

115
00:06:36,500 --> 00:06:40,380
over correctly,
then 42 also got moved over correctly.

116
00:06:40,380 --> 00:06:42,720
So that's not an essential
verification step here.

117
00:06:44,790 --> 00:06:49,490
Next question, should we test off
the other end of the list to see if

118
00:06:49,490 --> 00:06:52,190
that throws a null pointer exception.

119
00:06:52,190 --> 00:06:55,150
And again, going back to what we said
about the essential pieces of testing

120
00:06:55,150 --> 00:06:58,630
remove, that's probably
not necessary here.

121
00:06:58,630 --> 00:07:00,730
We're not trying to test the get method.

122
00:07:00,730 --> 00:07:02,910
We're just trying to test remove.

123
00:07:02,910 --> 00:07:05,720
However, there is one more
thing we need to test

124
00:07:05,720 --> 00:07:07,940
to make sure this remove zero worked.

125
00:07:07,940 --> 00:07:11,320
And that's whether or not the size
of the list was actually reduced.

126
00:07:11,320 --> 00:07:15,960
So this last step here,
calling list at size to check to

127
00:07:15,960 --> 00:07:20,580
make sure that it's equal to two is
definitely something you need to do.

128
00:07:20,580 --> 00:07:24,570
So in summary,
we have three essential verification steps

129
00:07:24,570 --> 00:07:27,640
to make sure remove at position
zero worked correctly.

130
00:07:27,640 --> 00:07:29,830
We need to make sure it
return the correct value.

131
00:07:29,830 --> 00:07:33,150
We need to make sure that the element
that was at position zero moved up,

132
00:07:33,150 --> 00:07:36,990
sorry position one moved
up to position zero and

133
00:07:36,990 --> 00:07:41,510
we need to check to make sure that the
size of the list has been reduced by one,

134
00:07:41,510 --> 00:07:45,800
so those are the three essential
verification steps, now before

135
00:07:45,800 --> 00:07:50,760
we go let me just ask you a question,
what about this bug?

136
00:07:50,760 --> 00:07:54,818
So, this bug is where we've updated
the head pointer correctly,

137
00:07:54,818 --> 00:07:59,890
head dot next, but
we've failed to update that node 21,

138
00:07:59,890 --> 00:08:04,490
we haven't updated its previous pointer so
that it connects back to the head.

139
00:08:04,490 --> 00:08:09,970
And, this is definitely a bug,
that red arrow there is not correct.

140
00:08:09,970 --> 00:08:14,859
But my question is will our verifications
steps, those three steps we laid

141
00:08:14,859 --> 00:08:19,608
out over this concept challenge,
will they correctly detect this bug?

142
00:08:22,487 --> 00:08:24,870
And the answer, of course,
is no they won't.

143
00:08:26,010 --> 00:08:31,020
So we're kind of stuck here because
we've actually tested the verification.

144
00:08:31,020 --> 00:08:35,320
We've verified all of the essential
behavior of the remove method and

145
00:08:35,320 --> 00:08:38,270
it seems like it's working correctly.

146
00:08:38,270 --> 00:08:43,640
The problem here is to really test
that this pointer is correct,

147
00:08:43,640 --> 00:08:48,050
we need to get into the structure of this
list because we don't have a great way

148
00:08:48,050 --> 00:08:51,500
of figuring out, when you're going in
the opposite direction, whether or

149
00:08:51,500 --> 00:08:55,130
not all those pointers
are correctly positioned.

150
00:08:55,130 --> 00:08:58,720
So what we'll recommend for
you to do is we'll recommend for

151
00:08:58,720 --> 00:09:04,540
you to actually break the boundaries
of black box testing just a bit.

152
00:09:04,540 --> 00:09:07,940
And, go in and put in a test to
make sure that list get zero,

153
00:09:07,940 --> 00:09:11,160
which should get back that
node that contains 21,

154
00:09:11,160 --> 00:09:17,500
make sure its previous pointer actually
points to that sentinel head element.

155
00:09:17,500 --> 00:09:20,520
Now, again, this does break
the spirit of black box testing,

156
00:09:20,520 --> 00:09:26,250
because you're no longer testing the list
from outside its abstraction barrier.

157
00:09:26,250 --> 00:09:29,540
But for your sanity and
to make sure that you don't

158
00:09:29,540 --> 00:09:34,316
have any of these nasty bugs that are very
hard to discover with black box testing,

159
00:09:34,316 --> 00:09:38,770
given me a methods that you have access
to, we are going to allow you and even

160
00:09:38,770 --> 00:09:43,830
encourage you to break that barrier, and
go in and test these pointers directly.

161
00:09:45,270 --> 00:09:47,930
So good luck with your link list and
its testing.