1
00:00:00,125 --> 00:00:04,097
[MUSIC]

2
00:00:04,097 --> 00:00:05,350
Hey everyone.

3
00:00:05,350 --> 00:00:09,730
In this support video what we're
gonna do is look at JUnit in detail.

4
00:00:09,730 --> 00:00:12,000
So, first off we're going
to look at our code.

5
00:00:12,000 --> 00:00:16,400
In the package that was provided you'll
find there's a MyLinkedListTester

6
00:00:16,400 --> 00:00:18,030
which is already set up to do JUnit.

7
00:00:19,370 --> 00:00:20,820
To make sure that you're
able to run JUnit,

8
00:00:20,820 --> 00:00:24,010
you want to make sure that you've
done the setup instructions properly.

9
00:00:24,010 --> 00:00:28,670
To set up JUnit,
you go to project, properties.

10
00:00:28,670 --> 00:00:30,930
Go to the Java build path.

11
00:00:30,930 --> 00:00:33,200
And then add in add library.

12
00:00:33,200 --> 00:00:35,520
You'll select JUnit.

13
00:00:35,520 --> 00:00:36,230
JUnit four.

14
00:00:36,230 --> 00:00:40,470
And then finish, and that'll essentially
add in the JUnit four libraries.

15
00:00:40,470 --> 00:00:42,890
And that's essentially what
you need to be able to JUnit.

16
00:00:42,890 --> 00:00:47,580
Okay, so now that Eclipse is set up,
let's talk about JUnit overall.

17
00:00:47,580 --> 00:00:50,540
So JUnit is a lightweight test platform.

18
00:00:50,540 --> 00:00:54,520
And what you do is you're gonna
write methods that are going to run

19
00:00:54,520 --> 00:00:57,550
before the tests occur and
then you're going to write methods which

20
00:00:57,550 --> 00:01:01,280
are essentially just testing the behavior
of methods in some other class.

21
00:01:01,280 --> 00:01:05,160
In this case we're trying to
test The MyLinkedListClass,

22
00:01:05,160 --> 00:01:06,490
specifically this class right here.

23
00:01:07,780 --> 00:01:10,850
Let me give you a preview of some of
the methods you might want to write.

24
00:01:10,850 --> 00:01:13,090
One method that's incredibly
useful is called setup.

25
00:01:14,430 --> 00:01:16,850
And for
setup what you do is put an @before and

26
00:01:16,850 --> 00:01:20,580
that means this would be run
before a test, and you run setup.

27
00:01:20,580 --> 00:01:24,790
And what it's gonna do is essentially
set up the state of your variables so

28
00:01:24,790 --> 00:01:26,440
that you're able to perform tests.

29
00:01:26,440 --> 00:01:30,520
In this case, we're setting up a short
list, an empty list, a longer list, and

30
00:01:30,520 --> 00:01:33,180
we're gonna use these for
a number of tests.

31
00:01:33,180 --> 00:01:36,250
It's worth noting that there is another
method called setupClass, which,

32
00:01:36,250 --> 00:01:40,660
if you wanna run something just once
not before every single test case,

33
00:01:40,660 --> 00:01:42,170
you'd use setupClass.

34
00:01:42,170 --> 00:01:45,139
But if you wanna have setup done
before each individual test,

35
00:01:45,139 --> 00:01:46,575
that's where you use setup.

36
00:01:48,716 --> 00:01:52,731
In terms of writing tests, the syntax for
this, lets just say @Test, and

37
00:01:52,731 --> 00:01:56,220
then this is one of the test
cases that'll be executed.

38
00:01:56,220 --> 00:01:58,680
In this case I have the method testGet,

39
00:01:58,680 --> 00:02:03,010
so this is supposed to test the get
method in a MyLinkedList class.

40
00:02:03,010 --> 00:02:05,660
Let me point out the two things that
are probably the most useful to you

41
00:02:05,660 --> 00:02:08,560
in terms of seeing whether or
not your code is working properly.

42
00:02:08,560 --> 00:02:11,838
The first is actually down here,
which is called assertEquals.

43
00:02:11,838 --> 00:02:17,387
With assertEquals, what it says is,
I want you to verify that "A",

44
00:02:17,387 --> 00:02:20,883
in fact, matches shortlist.get(0).

45
00:02:20,883 --> 00:02:24,120
If those two are not equal,
I want you to throw an error.

46
00:02:24,120 --> 00:02:25,760
If they're the same, just keep going.

47
00:02:25,760 --> 00:02:29,520
So since they're the same,
assert that this logic is true.

48
00:02:29,520 --> 00:02:32,980
And assert exists in a number
of programming languages to help

49
00:02:32,980 --> 00:02:34,700
with debugging and catching any errors.

50
00:02:35,990 --> 00:02:39,330
The other method that I think is
going to be quite useful is fail.

51
00:02:39,330 --> 00:02:42,320
And the,
where fail comes in is emptyList.get(0) is

52
00:02:42,320 --> 00:02:43,890
supposed to throw an exception.

53
00:02:44,910 --> 00:02:47,790
I have an empty list, there's nothing in
there, if I try to get an element out of

54
00:02:47,790 --> 00:02:49,730
that that should throw an index
out of bounds exception.

55
00:02:51,280 --> 00:02:53,140
But how am I gonna test that in place?

56
00:02:53,140 --> 00:02:55,600
If I just call the method
emptyList.get(0),

57
00:02:55,600 --> 00:02:58,260
it's gonna throw an exception which

58
00:02:58,260 --> 00:03:02,060
could be treated like an improper
activity via inceptions being strung.

59
00:03:02,060 --> 00:03:06,160
So the way we do this is to actually throw
your operation within a tri catch block

60
00:03:07,160 --> 00:03:09,900
where the proper behavior is
actually gonna be caught.

61
00:03:09,900 --> 00:03:12,610
So it's gonna catch an index out of
bounds, exception if it catches it,

62
00:03:12,610 --> 00:03:15,570
it's just gonna keep going
to the very next task.

63
00:03:15,570 --> 00:03:17,580
But if this codes succeeds and

64
00:03:17,580 --> 00:03:21,700
doesn't throw an index out of bounds
exception, what you call is a method fail.

65
00:03:21,700 --> 00:03:25,790
And fail is gonna say,
this did not work, we need to quit and

66
00:03:25,790 --> 00:03:29,100
it will print out you need
to check your out of bounds.

67
00:03:29,100 --> 00:03:33,908
We could have more of a verbose print
messages here, something like in test get,

68
00:03:33,908 --> 00:03:37,654
empty the list if I get 0 fails
you should check out of bounds and

69
00:03:37,654 --> 00:03:40,783
those are going to be the main
methods used for this.

70
00:03:40,783 --> 00:03:44,559
There are other methods that allow you
to tear down anything you've built in

71
00:03:44,559 --> 00:03:45,857
the process of this test.

72
00:03:45,857 --> 00:03:47,575
You're not going to need this for
this case.

73
00:03:47,575 --> 00:03:51,143
But if you'd say, create a large
database before you began the test,

74
00:03:51,143 --> 00:03:54,060
when all the tests are done
you'd want to tear that down.

75
00:03:54,060 --> 00:03:56,880
And the way that you'd do that is
you'd make a method teardown and

76
00:03:56,880 --> 00:04:00,760
you use an @ after to denote I want this

77
00:04:00,760 --> 00:04:03,070
method to be performed after
all the testing is complete.

78
00:04:04,530 --> 00:04:06,230
So what does this look
like when you run it?

79
00:04:06,230 --> 00:04:09,480
So if we go to MyLinkedListTester and
we try to run this code what

80
00:04:09,480 --> 00:04:13,910
it's going to give me is a whole new
window over here on the left called JUnit.

81
00:04:13,910 --> 00:04:16,350
And what it will give you
is a number of things.

82
00:04:16,350 --> 00:04:20,420
It will tell you how many different
tests it ran, in this case there's six.

83
00:04:20,420 --> 00:04:24,170
Now we've put code within testGet and
within testRemove.

84
00:04:24,170 --> 00:04:27,140
All the others are just
empty stubs at this point.

85
00:04:27,140 --> 00:04:28,640
So I ran all six of those tests.

86
00:04:28,640 --> 00:04:32,735
Because I haven't written
the MyLinkedList class yet, testGet and

87
00:04:32,735 --> 00:04:37,121
testRemove are both gonna fail because
it's not gonna behave properly.

88
00:04:37,121 --> 00:04:39,504
What you will also is that there is
actually times associated with this.

89
00:04:39,504 --> 00:04:42,476
This is how much time was spent
running these tests to figure

90
00:04:42,476 --> 00:04:47,130
out that there was a failure here and
within test remove there is an error.

91
00:04:47,130 --> 00:04:51,560
If you ever see these times start becoming
large in the second range or even ten

92
00:04:51,560 --> 00:04:54,920
second range, you might want to think
more about how you are doing your tests.

93
00:04:54,920 --> 00:04:57,600
But again as we said in
the original videos,

94
00:04:57,600 --> 00:05:00,490
it's more important to make sure
that you're testing your codes and

95
00:05:00,490 --> 00:05:04,510
getting it right and then afterwards
think about the performance implications.

96
00:05:04,510 --> 00:05:07,511
I hope this helps you get started with
JUnit and good luck on your project.