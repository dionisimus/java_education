1
00:00:00,000 --> 00:00:03,854
[MUSIC]

2
00:00:03,854 --> 00:00:06,725
In this video, we're gonna dive
into the details of something

3
00:00:06,725 --> 00:00:10,420
called abstract data types and how they're
implemented as interfaces in Java.

4
00:00:11,660 --> 00:00:15,280
So by the end of this video, you'll be
able to explain the idea of abstraction

5
00:00:15,280 --> 00:00:19,320
both in Java and in the real world,
and describe why it is important.

6
00:00:19,320 --> 00:00:23,130
And you'll also be able to describe the
difference between an Abstract Data Type

7
00:00:23,130 --> 00:00:26,350
as well as a Data Structure,
which does the implementation.

8
00:00:28,220 --> 00:00:31,440
We're getting into this really
key idea in computer science, and

9
00:00:31,440 --> 00:00:35,420
really in the whole world,
in our lives, called abstraction.

10
00:00:35,420 --> 00:00:40,020
Abstraction is the idea of hiding away
the details of how something works

11
00:00:40,020 --> 00:00:43,460
in order to focus on the key features
you need to interact with that thing.

12
00:00:43,460 --> 00:00:46,200
And it's really how we
function with the world.

13
00:00:46,200 --> 00:00:50,940
And it's certainly the key behind
implementing large scale software systems.

14
00:00:50,940 --> 00:00:53,010
So let me give you an example
of abstraction that

15
00:00:53,010 --> 00:00:54,850
you should be familiar with.

16
00:00:54,850 --> 00:00:56,630
So here's the example of a car.

17
00:00:56,630 --> 00:00:59,570
And in particular, your car brakes.

18
00:00:59,570 --> 00:01:00,240
Let me ask you a question.

19
00:01:00,240 --> 00:01:02,110
Do you know how your car brakes work?

20
00:01:03,550 --> 00:01:06,480
Now you might say, mm, no, not really.

21
00:01:06,480 --> 00:01:07,350
I'm not a mechanic.

22
00:01:07,350 --> 00:01:09,260
I don't really know how they work.

23
00:01:09,260 --> 00:01:12,190
But if you ask me this question I say,
sure I do.

24
00:01:12,190 --> 00:01:13,340
Here's how they work.

25
00:01:13,340 --> 00:01:16,520
I put my foot on the brake pedal and
my car stops.

26
00:01:16,520 --> 00:01:18,560
That's all I need to know.

27
00:01:18,560 --> 00:01:22,160
So the difference between this first
thought with thinking about what's

28
00:01:22,160 --> 00:01:25,700
under the hood and the details of
the brakes, and the way I described it,

29
00:01:25,700 --> 00:01:30,630
which is step on the pedal and my car
stops, is the difference between being on

30
00:01:30,630 --> 00:01:33,119
either side of something
called an abstraction barrier.

31
00:01:34,500 --> 00:01:39,240
When I'm on the user side of
the abstraction barrier, I only care

32
00:01:39,240 --> 00:01:44,650
about the behavior that happens when
I interact with my car's brakes.

33
00:01:44,650 --> 00:01:46,960
Like I said,
I put my foot on the pedal and

34
00:01:46,960 --> 00:01:50,810
it stops, that's all I need to
know in order to drive a car.

35
00:01:50,810 --> 00:01:52,999
I don't have to know how things
are implemented under the hood.

36
00:01:54,080 --> 00:01:56,810
But in order for
my car to have functioning brakes,

37
00:01:56,810 --> 00:01:59,710
somebody has to be on the other
side of the abstraction barrier.

38
00:01:59,710 --> 00:02:03,750
Somebody has to know how my
brakes are actually implemented.

39
00:02:03,750 --> 00:02:07,270
The person who designed my car,
the manufacturer of my car,

40
00:02:07,270 --> 00:02:10,800
a mechanic who's gonna fix my brakes,
they're on the other side of

41
00:02:10,800 --> 00:02:15,520
the abstraction barrier, concerned with
the specific implementation of my brakes.

42
00:02:15,520 --> 00:02:19,160
As long as they fulfill the contract,
that I put my foot on the brake pedal and

43
00:02:19,160 --> 00:02:23,300
my car stops, I don't particularly
care how my brakes are implemented.

44
00:02:23,300 --> 00:02:27,730
And that's what allows majority of us to
drive our cars without being a mechanic

45
00:02:27,730 --> 00:02:29,050
who knows about every single detail.

46
00:02:30,610 --> 00:02:33,970
The same idea exists in software systems,
in particular,

47
00:02:33,970 --> 00:02:37,000
in something we're gonna look
at called data abstraction.

48
00:02:37,000 --> 00:02:39,630
In order to work with
large quantities of data,

49
00:02:39,630 --> 00:02:44,370
it's not important that you understand
exactly how that data is organized if

50
00:02:44,370 --> 00:02:50,200
you're simply a user of
a particular data repository.

51
00:02:50,200 --> 00:02:54,000
So what you care about is how
you can interact with that data.

52
00:02:54,000 --> 00:02:57,160
So let's take the example of a list.

53
00:02:57,160 --> 00:02:59,260
A list is kind of an abstract notion.

54
00:02:59,260 --> 00:03:02,460
It's a set of elements arranged
to some particular order.

55
00:03:02,460 --> 00:03:03,890
And you can do things with those elements.

56
00:03:03,890 --> 00:03:05,410
You can add elements to your list.

57
00:03:05,410 --> 00:03:06,730
You can give the size of your list.

58
00:03:06,730 --> 00:03:09,550
You can get an element at
a particular index in your list.

59
00:03:09,550 --> 00:03:11,940
You can iterate over the list
in a particular order.

60
00:03:12,960 --> 00:03:19,220
All of this is specified in something
called the Abstract Data Type.

61
00:03:19,220 --> 00:03:23,010
And these Abstract Data Types often
manifest themselves as either interfaces

62
00:03:23,010 --> 00:03:25,310
or as abstract classes in Java.

63
00:03:25,310 --> 00:03:28,830
In Java, there's an interface that's
called the list that embodies this

64
00:03:28,830 --> 00:03:33,890
abstract notion of a collection of
elements organized in a sequential order.

65
00:03:33,890 --> 00:03:36,510
But really the abstract notion of a list

66
00:03:36,510 --> 00:03:39,810
goes beyond a specific
programming language.

67
00:03:39,810 --> 00:03:44,300
You can think of a grocery list,
or a list of students in a class.

68
00:03:44,300 --> 00:03:47,520
These things are not
directly related to code.

69
00:03:47,520 --> 00:03:51,600
So this idea of
an Abstract Data Type is broader

70
00:03:51,600 --> 00:03:55,500
than just a particular implementation
in a particular programming language.

71
00:03:55,500 --> 00:03:59,040
It's really just this abstract concept
of how we interact with this data.

72
00:03:59,040 --> 00:03:59,860
It's a promise.

73
00:04:01,070 --> 00:04:03,340
On the other side of
the abstraction barrier,

74
00:04:03,340 --> 00:04:08,920
we have our specific implementation of the
list functionality, in this case, in Java.

75
00:04:08,920 --> 00:04:12,070
You're probably already familiar
with the array list class.

76
00:04:12,070 --> 00:04:14,600
You've used it several times.

77
00:04:14,600 --> 00:04:19,830
And what that class does is it implements
the list interface, it fulfills all

78
00:04:19,830 --> 00:04:24,650
of the functionality of a list, using an
array to store the elements in the list.

79
00:04:25,750 --> 00:04:29,620
So it can use the array to put
the elements in a particular order.

80
00:04:29,620 --> 00:04:32,470
As you know, an array organizes elements

81
00:04:32,470 --> 00:04:36,330
in order with indices to access
the different elements in the array.

82
00:04:37,340 --> 00:04:41,820
So that's one particular
implementation of this list interface.

83
00:04:41,820 --> 00:04:45,590
And this specific implementation
using a data structure, or

84
00:04:45,590 --> 00:04:49,350
particular organization of data
under the hood called an array.

85
00:04:50,880 --> 00:04:53,720
But the array is not the only
way we can implement

86
00:04:53,720 --> 00:04:56,990
the list interface in this
abstract data type list.

87
00:04:56,990 --> 00:04:59,780
So throughout the rest of this module,
we're actually gonna be looking at

88
00:04:59,780 --> 00:05:03,100
a different implementation of the list
interface called a link list,

89
00:05:03,100 --> 00:05:05,140
which we'll get into
starting in the next video.

90
00:05:06,220 --> 00:05:10,400
Before we move on to the next video,
I just want to go back to this idea that

91
00:05:10,400 --> 00:05:13,820
there are always two sides
of an abstraction barrier.

92
00:05:13,820 --> 00:05:16,300
On the one hand there's the user side, and

93
00:05:16,300 --> 00:05:19,730
you'll be on this side whenever you're
using built-in libraries in Java.

94
00:05:20,760 --> 00:05:24,740
You'll be using the defined interfaces,
and

95
00:05:24,740 --> 00:05:30,060
you care mostly about the behavior,
not so much about the implementation.

96
00:05:31,520 --> 00:05:34,470
On the other side of things, when you're
a library developer, which you'll

97
00:05:34,470 --> 00:05:38,600
also be in this class, you care a lot
about the specific implementation.

98
00:05:38,600 --> 00:05:43,080
And the specific implementation
must fulfill the contract, but

99
00:05:43,080 --> 00:05:47,970
it's also going to have impacts of
how fast it fulfills the contract.

100
00:05:47,970 --> 00:05:51,780
What's the performance of a particular
choice of underlying data structure

101
00:05:51,780 --> 00:05:53,720
to fulfill an abstract data type contract?

102
00:05:54,980 --> 00:05:59,740
So we'll start to make all these ideas
much more concrete when we dive into

103
00:05:59,740 --> 00:06:03,520
the implementation of the Linked List
data structure in the next video.