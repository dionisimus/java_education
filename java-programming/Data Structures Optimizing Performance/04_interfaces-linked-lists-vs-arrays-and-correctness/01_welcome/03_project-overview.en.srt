1
00:00:00,303 --> 00:00:03,923
[MUSIC]

2
00:00:03,923 --> 00:00:05,053
Hey everybody.

3
00:00:05,053 --> 00:00:05,703
In this video,

4
00:00:05,703 --> 00:00:10,000
we're gonna learn about the programming
assignment associated with week three.

5
00:00:10,000 --> 00:00:11,800
Now there's two pieces to
this programming assignment,

6
00:00:11,800 --> 00:00:14,040
the first is creating your
own linked LinkedList.

7
00:00:14,040 --> 00:00:16,650
And the second part of it,
is creating Markov Text Generator.

8
00:00:16,650 --> 00:00:19,300
I just wanna show what you're
gonna do with each of these.

9
00:00:19,300 --> 00:00:22,970
So, the first part, creating a LinkedList
is an interesting assignment.

10
00:00:22,970 --> 00:00:26,430
And the reason it's interesting is because
this kind of already exists in Java.

11
00:00:26,430 --> 00:00:30,000
So if you look at the list
interface in the Java Docs,

12
00:00:30,000 --> 00:00:33,790
you'll notice that it has a number of
features which are useful to programmers.

13
00:00:33,790 --> 00:00:37,420
In fact, you've almost certainly
used the list interface already.

14
00:00:37,420 --> 00:00:42,490
Now, there is a LinkList implementation
of the list interface and

15
00:00:42,490 --> 00:00:43,720
this is provided by Java.

16
00:00:43,720 --> 00:00:45,440
So there's a bit of a question.

17
00:00:45,440 --> 00:00:48,010
Why then should you code
a LinkList yourself?

18
00:00:48,010 --> 00:00:52,690
Well the reason why is that LinkedList
are a core data structure and

19
00:00:52,690 --> 00:00:54,168
they're also a linked data structure.

20
00:00:54,168 --> 00:00:57,320
And we're gonna be doing a whole
bunch with the linked data structures

21
00:00:57,320 --> 00:01:00,210
as we go forward through this course and
even into the next course.

22
00:01:01,620 --> 00:01:04,410
LinkedList is a great place to
start when trying to write your own

23
00:01:04,410 --> 00:01:05,150
linked data structure.

24
00:01:05,150 --> 00:01:08,540
So what you're gonna do is you're
gonna create your own LinkedList and

25
00:01:08,540 --> 00:01:13,280
it's gonna have many of the features that
the Java implementational LinkedList has.

26
00:01:13,280 --> 00:01:16,730
The second reason why we're gonna write a
LinkedList yourself is because we're gonna

27
00:01:16,730 --> 00:01:18,670
learn about testing in this week.

28
00:01:19,900 --> 00:01:23,330
Mainly, how do you do unit tests and
why are they so important.

29
00:01:23,330 --> 00:01:26,382
What we're gonna do is apply this
knowledge of how to do testing to

30
00:01:26,382 --> 00:01:29,360
essentially test your LinkList interface.

31
00:01:29,360 --> 00:01:31,872
And you'll also run your test against,
essentially,

32
00:01:31,872 --> 00:01:34,490
a whole sweep of LinkLists,
which are either correctly or

33
00:01:34,490 --> 00:01:37,390
incorrectly written as part of
the grading for the assignment.

34
00:01:38,690 --> 00:01:42,745
The second part of the assignment
is actually really fun.

35
00:01:42,745 --> 00:01:44,550
So, what I have here in our interface, and

36
00:01:44,550 --> 00:01:48,630
I hope you've got this all running at this
point, is I've just typed in some text.

37
00:01:48,630 --> 00:01:50,460
And all I wrote in was this is a test.

38
00:01:50,460 --> 00:01:51,430
This is a video.

39
00:01:51,430 --> 00:01:53,110
This video is cool.

40
00:01:53,110 --> 00:01:57,930
Now, what Markov Text Generation
does is it creates text

41
00:01:57,930 --> 00:02:01,990
that's artificial but
it looks similar to the original text.

42
00:02:01,990 --> 00:02:03,000
So, let's just do this.

43
00:02:03,000 --> 00:02:04,390
I'll show you what it looks like.

44
00:02:04,390 --> 00:02:05,740
I'm gonna generate Markov Text.

45
00:02:05,740 --> 00:02:08,920
I'm gonna use, creates say 50 words worth.

46
00:02:08,920 --> 00:02:12,920
And what it produces is text that
looks really similar to that original.

47
00:02:12,920 --> 00:02:14,362
But it's not quite the same.

48
00:02:14,362 --> 00:02:16,580
I wanna highlight a couple
of these phrases in here,

49
00:02:16,580 --> 00:02:19,680
that shows you that this isn't doing
exactly what you may think it does.

50
00:02:19,680 --> 00:02:22,050
So, if you look at the original text,

51
00:02:22,050 --> 00:02:26,090
there's nowhere in the original
text that says this is cool.

52
00:02:26,090 --> 00:02:29,720
To create this is cool,
he looked at the original text and

53
00:02:29,720 --> 00:02:33,740
it found that the words that
followed this, include is or video.

54
00:02:33,740 --> 00:02:35,070
And I happened to randomly select is.

55
00:02:35,070 --> 00:02:38,480
And then I looked at words
that potentially follow is and

56
00:02:38,480 --> 00:02:43,540
it found that words that follow
is are either a or cool.

57
00:02:43,540 --> 00:02:44,970
And it randomly selected cool.

58
00:02:44,970 --> 00:02:47,010
And that's how it ended up producing,
this is cool.

59
00:02:48,190 --> 00:02:53,640
Now, this Markov text looks like real
text, but will also have mistakes.

60
00:02:53,640 --> 00:02:57,280
For example, this video is a video
doesn't make any sense, but

61
00:02:57,280 --> 00:03:00,120
it makes sense in terms of
Markov Text Generation.

62
00:03:00,120 --> 00:03:04,800
From the original text, it says,
this is, I'm sorry, this video is,

63
00:03:04,800 --> 00:03:08,750
and then I found a sign that
matched after is, which as video.

64
00:03:08,750 --> 00:03:12,530
Now if this is a bit confusing, don't
worry about it we'll talk in depth in our

65
00:03:12,530 --> 00:03:15,850
lessons about how Markov Text Generation
works and the basis behind this.

66
00:03:15,850 --> 00:03:18,710
I hope you have a lot of fun with
both this part of the assignment and

67
00:03:18,710 --> 00:03:20,780
with the first part of the assignment and
good luck.