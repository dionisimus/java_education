1
00:00:00,404 --> 00:00:04,396
[MUSIC]

2
00:00:04,396 --> 00:00:07,554
All right, in this video we're
gonna pick up working with strings,

3
00:00:07,554 --> 00:00:11,202
looking at some of the built in functions
strings have so that you can learn about

4
00:00:11,202 --> 00:00:14,000
strings enough to use them in
that first part of the project.

5
00:00:15,050 --> 00:00:18,220
So by the end of this video you'll be
able to work with the built in String

6
00:00:18,220 --> 00:00:20,400
functions in order to manipulate Strings.

7
00:00:21,440 --> 00:00:26,110
Now as I mentioned, at the end of the last
video, Strings can do a lot of things, and

8
00:00:26,110 --> 00:00:30,920
you can see on the slide the URL to
the API documentation in the Java docs.

9
00:00:30,920 --> 00:00:35,030
And I am not going to put in this video an
explanation of every single method in that

10
00:00:35,030 --> 00:00:38,200
library that would take forever and
it would be very boring.

11
00:00:38,200 --> 00:00:40,860
What I am going to do is
just highlight five methods

12
00:00:40,860 --> 00:00:44,760
that we think will be particularly useful
for you when you're doing your project.

13
00:00:44,760 --> 00:00:48,010
But, at the same time, keep in mind
that whenever you have a doubt

14
00:00:48,010 --> 00:00:51,060
you can always go back to those
Java docs to learn more and

15
00:00:51,060 --> 00:00:52,830
to find more methods
that you might wanna use.

16
00:00:54,110 --> 00:00:58,800
So we're going to look at these methods
in the context of solving problems.

17
00:00:58,800 --> 00:01:01,590
So the first problem we're gonna
wanna think about solving is,

18
00:01:01,590 --> 00:01:04,270
how do we calculate the number
of syllables in a piece of text?

19
00:01:04,270 --> 00:01:07,180
That's needed to estimate
this Flesch score.

20
00:01:07,180 --> 00:01:09,380
And in order to do that,
what we're going to need to do is,

21
00:01:09,380 --> 00:01:13,340
we're gonna have to look at words,
character by character.

22
00:01:13,340 --> 00:01:15,790
So, let's look at a function
that I've written.

23
00:01:15,790 --> 00:01:21,550
This method takes in a String word,
and a character letter and

24
00:01:21,550 --> 00:01:26,310
it just tries to determine does that
letter appear anywhere in the word.

25
00:01:26,310 --> 00:01:30,340
The way it does this is it uses a loop, so
it's going to loop through each character

26
00:01:30,340 --> 00:01:34,590
in the word and remember that Strings are
represented by a raise of characters so

27
00:01:34,590 --> 00:01:38,710
Strings have a length method that will
return back to us the number of characters

28
00:01:38,710 --> 00:01:39,730
in that String.

29
00:01:39,730 --> 00:01:43,160
So this for loop's gonna execute once for
every position in the String.

30
00:01:44,520 --> 00:01:45,930
Then it's going to check,

31
00:01:45,930 --> 00:01:50,460
is the character at that position equal
to the letter that I'm looking for?

32
00:01:50,460 --> 00:01:53,620
Again, this illustrates the use of
another built-in string method,

33
00:01:53,620 --> 00:01:55,660
this charAt method.

34
00:01:55,660 --> 00:01:59,270
So charAt takes an index,
i, in this case, and

35
00:01:59,270 --> 00:02:02,370
it returns the character that's
at that particular index.

36
00:02:02,370 --> 00:02:04,500
The character, remember,
is a primitive, so

37
00:02:04,500 --> 00:02:07,760
we can compare this with the equals,
equals operator.

38
00:02:07,760 --> 00:02:10,920
So if it's equal to the letter we're
looking for, we'll return true.

39
00:02:10,920 --> 00:02:15,305
If the loop finishes and we didn't
find the character, we'll go ahead and

40
00:02:15,305 --> 00:02:16,218
return false.

41
00:02:16,218 --> 00:02:18,198
Okay, so this method works and

42
00:02:18,198 --> 00:02:22,246
it illustrates a couple of things
in the built in String class.

43
00:02:22,246 --> 00:02:25,930
Next I wanna use it to illustrate a kind
of for loop that you may not have seen,

44
00:02:25,930 --> 00:02:29,040
or if you have seen it,
maybe you forgotten about it.

45
00:02:29,040 --> 00:02:32,478
It's called a for-each loop and
this can be very handy.

46
00:02:32,478 --> 00:02:34,680
So, the for-each loop
looks kind of like a for

47
00:02:34,680 --> 00:02:37,230
loop, only the headers
a little bit different.

48
00:02:37,230 --> 00:02:40,480
Instead of those three parts,
we just basically have two parts.

49
00:02:40,480 --> 00:02:41,660
We declare a variable.

50
00:02:41,660 --> 00:02:46,370
In this case, a character type variable,
C and then we have a colon.

51
00:02:46,370 --> 00:02:49,230
And after the colon what we
have is some sort of list or

52
00:02:49,230 --> 00:02:52,520
array that we want to loop over.

53
00:02:52,520 --> 00:02:54,370
And what's gonna happen, each time for

54
00:02:54,370 --> 00:03:00,530
each loop is C is going to get the value
of each position in that array.

55
00:03:00,530 --> 00:03:02,270
So in this case our array,

56
00:03:02,270 --> 00:03:05,930
is the array of characters inside
the word that we're looking at.

57
00:03:05,930 --> 00:03:09,360
So a String class has this
built-in method called toCharArray

58
00:03:09,360 --> 00:03:12,750
that returns back the array of
all the characters in the String.

59
00:03:12,750 --> 00:03:16,590
Now, it's not the actual array of the
characters in the String, it's a copy of

60
00:03:16,590 --> 00:03:19,810
the array of the characters in the String
because, remember, Strings are immutable.

61
00:03:19,810 --> 00:03:21,620
So we're not allowed to get in there and

62
00:03:21,620 --> 00:03:24,660
change the characters
in a particular String.

63
00:03:24,660 --> 00:03:30,670
So c is going to iterate taking on
the values of each element in that array.

64
00:03:30,670 --> 00:03:34,840
In this way, c will first get
the first character in the String,

65
00:03:34,840 --> 00:03:37,440
the next time through the loop it'll have
the next character in the String and so

66
00:03:37,440 --> 00:03:38,510
on and so forth.

67
00:03:38,510 --> 00:03:39,490
So inside the for

68
00:03:39,490 --> 00:03:42,770
each loop we just compare c directly
to the letter we're looking for.

69
00:03:42,770 --> 00:03:45,060
If they're the same we return true,
otherwise,

70
00:03:45,060 --> 00:03:47,529
if the loop ends we know it's
not there and we return false.

71
00:03:49,010 --> 00:03:53,220
So at this point, what we're gonna do is,
we're gonna give you a couple of

72
00:03:53,220 --> 00:03:58,650
end of year quizzes to see how well you
really understood what I just said.

73
00:03:58,650 --> 00:04:01,550
And then we're gonna pick back
up working with this code.

74
00:04:02,920 --> 00:04:06,088
All right, now that you're back, we
actually have one more challenge for you.

75
00:04:06,088 --> 00:04:09,760
It's not gonna be a quiz, but
we do want you to pause the video and

76
00:04:09,760 --> 00:04:10,920
think about this.

77
00:04:10,920 --> 00:04:14,120
What I would like you to do,
is I would like you to modify this code,

78
00:04:14,120 --> 00:04:19,460
so instead of just returning true or false
it returns the index of the first position

79
00:04:19,460 --> 00:04:23,560
where it finds this particular
character that it's looking for.

80
00:04:23,560 --> 00:04:27,040
So one thing we're gonna have to do is
we're have to change that method header

81
00:04:27,040 --> 00:04:31,490
from boolean to returning an int, but
let's just assume that's already done.

82
00:04:31,490 --> 00:04:34,090
Just focus on what you have
to change inside the code.

83
00:04:34,090 --> 00:04:36,400
So go ahead and pause and
work on this now.

84
00:04:40,381 --> 00:04:42,294
Okay, so we hoped you figured this out,

85
00:04:42,294 --> 00:04:46,470
there actually aren't very many
changes we have to make to this code.

86
00:04:46,470 --> 00:04:50,390
All we have to do is, because we have
this variable i that's tracking through

87
00:04:50,390 --> 00:04:53,620
the position in the String, is that when
we find the character we're looking for,

88
00:04:53,620 --> 00:04:57,070
instead of just returning true,
we can go ahead and change the code so

89
00:04:57,070 --> 00:04:59,740
that it returns the index
where we found that position.

90
00:04:59,740 --> 00:05:01,230
And that of course is
stored in the variable i.

91
00:05:02,390 --> 00:05:03,490
If we get to the end,

92
00:05:03,490 --> 00:05:07,240
we didn't find it, we wanna return that
flag that indicates we didn't find it,

93
00:05:07,240 --> 00:05:11,290
which was negative 1, so we just replace
that return false with return negative 1.

94
00:05:11,290 --> 00:05:12,300
And that's it.

95
00:05:13,320 --> 00:05:16,810
So, it turns out that this method that
we just implemented is very similar to

96
00:05:16,810 --> 00:05:20,500
a built-in method in the string
class called index of.

97
00:05:20,500 --> 00:05:24,510
Index of takes, rather than
a single character, a String and

98
00:05:24,510 --> 00:05:28,650
returns the index position in
the String that it was called on

99
00:05:28,650 --> 00:05:32,040
where it first found the substring
that it was passed in.

100
00:05:32,040 --> 00:05:34,070
So let's take a look at how this works.

101
00:05:34,070 --> 00:05:36,370
Let's assume we have this piece
of text that you can see here.

102
00:05:36,370 --> 00:05:37,160
Can you hear me?

103
00:05:37,160 --> 00:05:38,450
Hello, hello?

104
00:05:38,450 --> 00:05:41,040
And I wanna know what is
the index of the substring he.

105
00:05:41,040 --> 00:05:46,960
Well if you asked Java this using
the indexOf method in the String class,

106
00:05:46,960 --> 00:05:54,310
it will return eight because he first
appears at position 8 in this String.

107
00:05:54,310 --> 00:05:59,650
Remember we start counting at 0 so
the index of c is 0 and the spaces count.

108
00:05:59,650 --> 00:06:02,950
The spaces take up positions
in that String array.

109
00:06:02,950 --> 00:06:06,960
So then when we count, you'll see that
h is the position eight in the array.

110
00:06:08,580 --> 00:06:11,520
On the other hand, if we ask for
the substring He with a capital h,

111
00:06:11,520 --> 00:06:14,530
it won't find it until position 17.

112
00:06:14,530 --> 00:06:19,710
Because Java distinguishes between
little h's and capital h's.

113
00:06:19,710 --> 00:06:21,380
Now, if you're worried about case,

114
00:06:21,380 --> 00:06:24,050
Java has a couple of string methods
that can help you with that.

115
00:06:24,050 --> 00:06:28,110
So and check out the equals ignore case,
two lowercase, and two uppercase methods,

116
00:06:28,110 --> 00:06:31,040
also in the String class, which you can
read about in the Java documentation.

117
00:06:32,770 --> 00:06:37,140
If you look for a String that's not there,
like help, Java will return negative one,

118
00:06:37,140 --> 00:06:40,360
because that String does not appear at
all in the text that we're looking at.

119
00:06:42,690 --> 00:06:44,830
Okay, now let's switch gears a bit.

120
00:06:44,830 --> 00:06:47,000
We've talked about some methods
that would be useful for

121
00:06:47,000 --> 00:06:49,340
counting the number of
syllables in a particular word.

122
00:06:49,340 --> 00:06:52,350
Let's now look at how we're gonna count
the number of words in an entire document.

123
00:06:52,350 --> 00:06:56,270
And in order to count the number of words
in an entire document, we need to be able

124
00:06:56,270 --> 00:06:59,610
to split the String apart into
individual words, so we can count them.

125
00:07:01,050 --> 00:07:04,940
Fortunately, Java has a built-in
method called split, and

126
00:07:04,940 --> 00:07:08,950
what it takes is a pattern that
you would like to use to split on.

127
00:07:08,950 --> 00:07:11,800
So in this example here,
with that same piece of text,

128
00:07:11,800 --> 00:07:15,590
I'm calling the split method
with a space passed in.

129
00:07:15,590 --> 00:07:18,520
So that's a space between those
two quotes, a single space.

130
00:07:18,520 --> 00:07:23,680
And Java will say, okay, every space is
where I wanna split that String up and it

131
00:07:23,680 --> 00:07:30,290
will return to me an array of the Strings
that are essentially between the spaces.

132
00:07:30,290 --> 00:07:32,190
So it will be the words in that String.

133
00:07:33,370 --> 00:07:34,640
That's great.

134
00:07:34,640 --> 00:07:37,940
But what happens when we,
say, add an extra space?

135
00:07:37,940 --> 00:07:41,240
I like to put two spaces
between my sentences.

136
00:07:41,240 --> 00:07:45,140
Well split isn't quite gonna
work as we want it to.

137
00:07:45,140 --> 00:07:48,520
So it's gonna interpret
that space quite literally.

138
00:07:48,520 --> 00:07:52,080
And instead of giving me back a nice array
of all the words, it's gonna give me back

139
00:07:52,080 --> 00:07:56,390
an array of the words with this
extra empty String in the middle.

140
00:07:56,390 --> 00:07:57,820
And what that empty String is,

141
00:07:57,820 --> 00:08:03,690
is it's the text that's between the two
spaces that are between the sentences.

142
00:08:03,690 --> 00:08:06,640
There's no text there, the spaces
are right next to each other, but

143
00:08:06,640 --> 00:08:10,050
because it needs to split there,
it needs to split among those spaces,

144
00:08:10,050 --> 00:08:13,150
it says well, there's this thing here,
and there's nothing there, so

145
00:08:13,150 --> 00:08:16,570
I'll just put an empty String in my
array of Strings that I'll return.

146
00:08:18,280 --> 00:08:20,130
Well that's kind of unfortunate, but

147
00:08:20,130 --> 00:08:22,850
the fortunate part is that
we can fix this problem.

148
00:08:22,850 --> 00:08:24,690
So if you look at the Java
documentation for

149
00:08:24,690 --> 00:08:30,400
the split method, you'll see that
it doesn't take a String, per se,

150
00:08:30,400 --> 00:08:33,870
what it takes is something
called a regular expression.

151
00:08:33,870 --> 00:08:37,250
We're gonna talk a lot more about regular
expressions in the next video, and

152
00:08:37,250 --> 00:08:40,970
they're going to be our key to solving
the problem of splitting on not just

153
00:08:40,970 --> 00:08:43,470
one space, but
any number of spaces in a string.